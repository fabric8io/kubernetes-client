{
  "swagger": "2.0",
  "info": {
    "title": "Kubernetes",
    "version": "0.0.0"
  },
  "paths": null,
  "definitions": {
    "io.cert-manager.acme.v1.ACMEAuthorization": {
      "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "challenges": {
          "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallenge"
          }
        },
        "identifier": {
          "description": "Identifier is the DNS name to be validated as part of this authorization",
          "type": "string"
        },
        "initialState": {
          "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
          "type": "string"
        },
        "url": {
          "description": "URL is the URL of the Authorization that must be completed",
          "type": "string",
          "default": ""
        },
        "wildcard": {
          "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEAuthorization",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEChallenge": {
      "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
      "type": "object",
      "required": [
        "url",
        "token",
        "type"
      ],
      "properties": {
        "token": {
          "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
          "type": "string",
          "default": ""
        },
        "url": {
          "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEChallenge",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEChallengeSolver": {
      "description": "An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.",
      "type": "object",
      "properties": {
        "dns01": {
          "description": "Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolverDNS01"
        },
        "http01": {
          "description": "Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01"
        },
        "selector": {
          "description": "Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.CertificateDNSNameSelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEChallengeSolver",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEChallengeSolverDNS01": {
      "description": "Used to configure a DNS01 challenge provider to be used when solving DNS01 challenges. Only one DNS provider may be configured per solver.",
      "type": "object",
      "properties": {
        "acmeDNS": {
          "description": "Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderAcmeDNS"
        },
        "akamai": {
          "description": "Use the Akamai DNS zone management API to manage DNS01 challenge records.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderAkamai"
        },
        "azureDNS": {
          "description": "Use the Microsoft Azure DNS API to manage DNS01 challenge records.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderAzureDNS"
        },
        "cloudDNS": {
          "description": "Use the Google Cloud DNS API to manage DNS01 challenge records.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderCloudDNS"
        },
        "cloudflare": {
          "description": "Use the Cloudflare API to manage DNS01 challenge records.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderCloudflare"
        },
        "cnameStrategy": {
          "description": "CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.",
          "type": "string"
        },
        "digitalocean": {
          "description": "Use the DigitalOcean DNS API to manage DNS01 challenge records.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderDigitalOcean"
        },
        "rfc2136": {
          "description": "Use RFC2136 (\"Dynamic Updates in the Domain Name System\") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderRFC2136"
        },
        "route53": {
          "description": "Use the AWS Route53 API to manage DNS01 challenge records.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderRoute53"
        },
        "webhook": {
          "description": "Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderWebhook"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEChallengeSolverDNS01",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01": {
      "description": "ACMEChallengeSolverHTTP01 contains configuration detailing how to solve HTTP01 challenges within a Kubernetes cluster. Typically this is accomplished through creating 'routes' of some description that configure ingress controllers to direct traffic to 'solver pods', which are responsible for responding to the ACME server's HTTP requests. Only one of Ingress / Gateway can be specified.",
      "type": "object",
      "properties": {
        "gatewayHTTPRoute": {
          "description": "The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01GatewayHTTPRoute"
        },
        "ingress": {
          "description": "The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01Ingress"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEChallengeSolverHTTP01",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01GatewayHTTPRoute": {
      "description": "The ACMEChallengeSolverHTTP01GatewayHTTPRoute solver will create HTTPRoute objects for a Gateway class routing to an ACME challenge solver pod.",
      "type": "object",
      "properties": {
        "labels": {
          "description": "Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "parentRefs": {
          "description": "When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.networking.gateway.v1.ParentReference"
          }
        },
        "podTemplate": {
          "description": "Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressPodTemplate"
        },
        "serviceType": {
          "description": "Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEChallengeSolverHTTP01GatewayHTTPRoute",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01Ingress": {
      "type": "object",
      "properties": {
        "class": {
          "description": "This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.",
          "type": "string"
        },
        "ingressClassName": {
          "description": "This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.",
          "type": "string"
        },
        "ingressTemplate": {
          "description": "Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressTemplate"
        },
        "name": {
          "description": "The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.",
          "type": "string"
        },
        "podTemplate": {
          "description": "Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressPodTemplate"
        },
        "serviceType": {
          "description": "Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEChallengeSolverHTTP01Ingress",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressObjectMeta": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations that should be added to the created ACME HTTP01 solver ingress.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "labels": {
          "description": "Labels that should be added to the created ACME HTTP01 solver ingress.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEChallengeSolverHTTP01IngressObjectMeta",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressPodObjectMeta": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations that should be added to the created ACME HTTP01 solver pods.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "labels": {
          "description": "Labels that should be added to the created ACME HTTP01 solver pods.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEChallengeSolverHTTP01IngressPodObjectMeta",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressPodSecurityContext": {
      "type": "object",
      "properties": {
        "fsGroup": {
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
          "type": "integer",
          "format": "int64"
        },
        "fsGroupChangePolicy": {
          "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.",
          "type": "string"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
          "type": "integer",
          "format": "int64"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
          "type": "integer",
          "format": "int64"
        },
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
        },
        "seccompProfile": {
          "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile"
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        },
        "sysctls": {
          "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEChallengeSolverHTTP01IngressPodSecurityContext",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressPodSpec": {
      "type": "object",
      "properties": {
        "affinity": {
          "description": "If specified, the pod's scheduling constraints",
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
        },
        "imagePullSecrets": {
          "description": "If specified, the pod's imagePullSecrets",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeSelector": {
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "priorityClassName": {
          "description": "If specified, the pod's priorityClassName.",
          "type": "string"
        },
        "securityContext": {
          "description": "If specified, the pod's security context",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressPodSecurityContext"
        },
        "serviceAccountName": {
          "description": "If specified, the pod's service account",
          "type": "string"
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEChallengeSolverHTTP01IngressPodSpec",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressPodTemplate": {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressPodObjectMeta"
        },
        "spec": {
          "description": "PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressPodSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEChallengeSolverHTTP01IngressPodTemplate",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressTemplate": {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolverHTTP01IngressObjectMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEChallengeSolverHTTP01IngressTemplate",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEExternalAccountBinding": {
      "description": "ACMEExternalAccountBinding is a reference to a CA external account of the ACME server.",
      "type": "object",
      "required": [
        "keyID",
        "keySecretRef"
      ],
      "properties": {
        "keyAlgorithm": {
          "description": "Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.",
          "type": "string"
        },
        "keyID": {
          "description": "keyID is the ID of the CA key that the External Account is bound to.",
          "type": "string",
          "default": ""
        },
        "keySecretRef": {
          "description": "keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEExternalAccountBinding",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEIssuer": {
      "description": "ACMEIssuer contains the specification for an ACME issuer. This uses the RFC8555 specification to obtain certificates by completing 'challenges' to prove ownership of domain identifiers. Earlier draft versions of the ACME specification are not supported.",
      "type": "object",
      "required": [
        "server",
        "privateKeySecretRef"
      ],
      "properties": {
        "caBundle": {
          "description": "Base64-encoded bundle of PEM CAs which can be used to validate the certificate chain presented by the ACME server. Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various kinds of security vulnerabilities. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection.",
          "type": "string",
          "format": "byte"
        },
        "disableAccountKeyGeneration": {
          "description": "Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.",
          "type": "boolean"
        },
        "email": {
          "description": "Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.",
          "type": "string"
        },
        "enableDurationFeature": {
          "description": "Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it, it will create an error on the Order. Defaults to false.",
          "type": "boolean"
        },
        "externalAccountBinding": {
          "description": "ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEExternalAccountBinding"
        },
        "preferredChain": {
          "description": "PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: \"DST Root CA X3\" or \"ISRG Root X1\" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the combined set of ACME default and alternative chains that has a root-most certificate with this value as its issuer's commonname.",
          "type": "string"
        },
        "privateKeySecretRef": {
          "description": "PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "server": {
          "description": "Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: \"https://acme-staging-v02.api.letsencrypt.org/directory\". Only ACME v2 endpoints (i.e. RFC 8555) are supported.",
          "type": "string",
          "default": ""
        },
        "skipTLSVerify": {
          "description": "INSECURE: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have the TLS certificate chain validated. Mutually exclusive with CABundle; prefer using CABundle to prevent various kinds of security vulnerabilities. Only enable this option in development environments. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection. Defaults to false.",
          "type": "boolean"
        },
        "solvers": {
          "description": "Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolver"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEIssuer",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderAcmeDNS": {
      "description": "ACMEIssuerDNS01ProviderAcmeDNS is a structure containing the configuration for ACME-DNS servers",
      "type": "object",
      "required": [
        "host",
        "accountSecretRef"
      ],
      "properties": {
        "accountSecretRef": {
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "host": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEIssuerDNS01ProviderAcmeDNS",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderAkamai": {
      "description": "ACMEIssuerDNS01ProviderAkamai is a structure containing the DNS configuration for Akamai DNS—Zone Record Management API",
      "type": "object",
      "required": [
        "serviceConsumerDomain",
        "clientTokenSecretRef",
        "clientSecretSecretRef",
        "accessTokenSecretRef"
      ],
      "properties": {
        "accessTokenSecretRef": {
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "clientSecretSecretRef": {
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "clientTokenSecretRef": {
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "serviceConsumerDomain": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEIssuerDNS01ProviderAkamai",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderAzureDNS": {
      "description": "ACMEIssuerDNS01ProviderAzureDNS is a structure containing the configuration for Azure DNS",
      "type": "object",
      "required": [
        "subscriptionID",
        "resourceGroupName"
      ],
      "properties": {
        "clientID": {
          "description": "Auth: Azure Service Principal: The ClientID of the Azure Service Principal used to authenticate with Azure DNS. If set, ClientSecret and TenantID must also be set.",
          "type": "string"
        },
        "clientSecretSecretRef": {
          "description": "Auth: Azure Service Principal: A reference to a Secret containing the password associated with the Service Principal. If set, ClientID and TenantID must also be set.",
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "environment": {
          "description": "name of the Azure environment (default AzurePublicCloud)",
          "type": "string"
        },
        "hostedZoneName": {
          "description": "name of the DNS zone that should be used",
          "type": "string"
        },
        "managedIdentity": {
          "description": "Auth: Azure Workload Identity or Azure Managed Service Identity: Settings to enable Azure Workload Identity or Azure Managed Service Identity If set, ClientID, ClientSecret and TenantID must not be set.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.AzureManagedIdentity"
        },
        "resourceGroupName": {
          "description": "resource group the DNS zone is located in",
          "type": "string",
          "default": ""
        },
        "subscriptionID": {
          "description": "ID of the Azure subscription",
          "type": "string",
          "default": ""
        },
        "tenantID": {
          "description": "Auth: Azure Service Principal: The TenantID of the Azure Service Principal used to authenticate with Azure DNS. If set, ClientID and ClientSecret must also be set.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEIssuerDNS01ProviderAzureDNS",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderCloudDNS": {
      "description": "ACMEIssuerDNS01ProviderCloudDNS is a structure containing the DNS configuration for Google Cloud DNS",
      "type": "object",
      "required": [
        "project"
      ],
      "properties": {
        "hostedZoneName": {
          "description": "HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.",
          "type": "string"
        },
        "project": {
          "type": "string",
          "default": ""
        },
        "serviceAccountSecretRef": {
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEIssuerDNS01ProviderCloudDNS",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderCloudflare": {
      "description": "ACMEIssuerDNS01ProviderCloudflare is a structure containing the DNS configuration for Cloudflare. One of `apiKeySecretRef` or `apiTokenSecretRef` must be provided.",
      "type": "object",
      "properties": {
        "apiKeySecretRef": {
          "description": "API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.",
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "apiTokenSecretRef": {
          "description": "API token used to authenticate with Cloudflare.",
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "email": {
          "description": "Email of the account, only required when using API key based authentication.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEIssuerDNS01ProviderCloudflare",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderDigitalOcean": {
      "description": "ACMEIssuerDNS01ProviderDigitalOcean is a structure containing the DNS configuration for DigitalOcean Domains",
      "type": "object",
      "required": [
        "tokenSecretRef"
      ],
      "properties": {
        "tokenSecretRef": {
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEIssuerDNS01ProviderDigitalOcean",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderRFC2136": {
      "description": "ACMEIssuerDNS01ProviderRFC2136 is a structure containing the configuration for RFC2136 DNS",
      "type": "object",
      "required": [
        "nameserver"
      ],
      "properties": {
        "nameserver": {
          "description": "The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.",
          "type": "string",
          "default": ""
        },
        "tsigAlgorithm": {
          "description": "The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.",
          "type": "string"
        },
        "tsigKeyName": {
          "description": "The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.",
          "type": "string"
        },
        "tsigSecretSecretRef": {
          "description": "The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEIssuerDNS01ProviderRFC2136",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderRoute53": {
      "description": "ACMEIssuerDNS01ProviderRoute53 is a structure containing the Route 53 configuration for AWS",
      "type": "object",
      "properties": {
        "accessKeyID": {
          "description": "The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials",
          "type": "string"
        },
        "accessKeyIDSecretRef": {
          "description": "The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials",
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "auth": {
          "description": "Auth configures how cert-manager authenticates.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.Route53Auth"
        },
        "hostedZoneID": {
          "description": "If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.",
          "type": "string"
        },
        "region": {
          "description": "Override the AWS region.\n\nRoute53 is a global service and does not have regional endpoints but the region specified here (or via environment variables) is used as a hint to help compute the correct AWS credential scope and partition when it connects to Route53. See: - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html) - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)\n\nIf you omit this region field, cert-manager will use the region from AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set in the cert-manager controller Pod.\n\nThe `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html). Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by: [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook). In this case this `region` field value is ignored.\n\nThe `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html). Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by: [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent), In this case this `region` field value is ignored.",
          "type": "string"
        },
        "role": {
          "description": "Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata",
          "type": "string"
        },
        "secretAccessKeySecretRef": {
          "description": "The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEIssuerDNS01ProviderRoute53",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEIssuerDNS01ProviderWebhook": {
      "description": "ACMEIssuerDNS01ProviderWebhook specifies configuration for a webhook DNS01 provider, including where to POST ChallengePayload resources.",
      "type": "object",
      "required": [
        "groupName",
        "solverName"
      ],
      "properties": {
        "config": {
          "description": "Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.",
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        },
        "groupName": {
          "description": "The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.",
          "type": "string",
          "default": ""
        },
        "solverName": {
          "description": "The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEIssuerDNS01ProviderWebhook",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ACMEIssuerStatus": {
      "type": "object",
      "properties": {
        "lastPrivateKeyHash": {
          "description": "LastPrivateKeyHash is a hash of the private key associated with the latest registered ACME account, in order to track changes made to registered account associated with the Issuer",
          "type": "string"
        },
        "lastRegisteredEmail": {
          "description": "LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer",
          "type": "string"
        },
        "uri": {
          "description": "URI is the unique account identifier, which can also be used to retrieve account details from the CA",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ACMEIssuerStatus",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.AzureManagedIdentity": {
      "description": "AzureManagedIdentity contains the configuration for Azure Workload Identity or Azure Managed Service Identity If the AZURE_FEDERATED_TOKEN_FILE environment variable is set, the Azure Workload Identity will be used. Otherwise, we fall-back to using Azure Managed Service Identity.",
      "type": "object",
      "properties": {
        "clientID": {
          "description": "client ID of the managed identity, can not be used at the same time as resourceID",
          "type": "string"
        },
        "resourceID": {
          "description": "resource ID of the managed identity, can not be used at the same time as clientID Cannot be used for Azure Managed Service Identity",
          "type": "string"
        },
        "tenantID": {
          "description": "tenant ID of the managed identity, can not be used at the same time as resourceID",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "AzureManagedIdentity",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.CertificateDNSNameSelector": {
      "description": "CertificateDNSNameSelector selects certificates using a label selector, and can optionally select individual DNS names within those certificates. If both MatchLabels and DNSNames are empty, this selector will match all certificates and DNS names within them.",
      "type": "object",
      "properties": {
        "dnsNames": {
          "description": "List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "dnsZones": {
          "description": "List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "matchLabels": {
          "description": "A label selector that is used to refine the set of certificate's that this challenge solver will apply to.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateDNSNameSelector",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.Challenge": {
      "description": "Challenge is a type to represent a Challenge request with an ACME server",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.cert-manager.acme.v1.ChallengeStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "Challenge",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ChallengeList": {
      "description": "ChallengeList is a list of Challenges",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.acme.v1.Challenge"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ChallengeList",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ChallengeSpec": {
      "type": "object",
      "required": [
        "url",
        "authorizationURL",
        "dnsName",
        "type",
        "token",
        "key",
        "solver",
        "issuerRef"
      ],
      "properties": {
        "authorizationURL": {
          "description": "The URL to the ACME Authorization resource that this challenge is a part of.",
          "type": "string",
          "default": ""
        },
        "dnsName": {
          "description": "dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.",
          "type": "string",
          "default": ""
        },
        "issuerRef": {
          "description": "References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.ObjectReference"
        },
        "key": {
          "description": "The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `\u003cprivate key JWK thumbprint\u003e.\u003ckey from acme server for challenge\u003e`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `\u003cprivate key JWK thumbprint\u003e.\u003ckey from acme server for challenge\u003e` text that must be set as the TXT record content.",
          "type": "string",
          "default": ""
        },
        "solver": {
          "description": "Contains the domain solving configuration that should be used to solve this challenge resource.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEChallengeSolver"
        },
        "token": {
          "description": "The ACME challenge token for this challenge. This is the raw value returned from the ACME server.",
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "The type of ACME challenge this resource represents. One of \"HTTP-01\" or \"DNS-01\".",
          "type": "string",
          "default": ""
        },
        "url": {
          "description": "The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.",
          "type": "string",
          "default": ""
        },
        "wildcard": {
          "description": "wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.",
          "type": "boolean",
          "default": false
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ChallengeSpec",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ChallengeStatus": {
      "type": "object",
      "properties": {
        "presented": {
          "description": "presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).",
          "type": "boolean",
          "default": false
        },
        "processing": {
          "description": "Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.",
          "type": "boolean",
          "default": false
        },
        "reason": {
          "description": "Contains human readable information on why the Challenge is in the current state.",
          "type": "string"
        },
        "state": {
          "description": "Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ChallengeStatus",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.Order": {
      "description": "Order is a type to represent an Order with an ACME server",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.cert-manager.acme.v1.OrderSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.cert-manager.acme.v1.OrderStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "Order",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.OrderList": {
      "description": "OrderList is a list of Orders",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.acme.v1.Order"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "OrderList",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.OrderSpec": {
      "type": "object",
      "required": [
        "request",
        "issuerRef"
      ],
      "properties": {
        "commonName": {
          "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
          "type": "string"
        },
        "dnsNames": {
          "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "duration": {
          "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "ipAddresses": {
          "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "issuerRef": {
          "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.ObjectReference"
        },
        "request": {
          "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
          "type": "string",
          "format": "byte"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "OrderSpec",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.OrderStatus": {
      "type": "object",
      "properties": {
        "authorizations": {
          "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEAuthorization"
          }
        },
        "certificate": {
          "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
          "type": "string",
          "format": "byte"
        },
        "failureTime": {
          "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "finalizeURL": {
          "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
          "type": "string"
        },
        "reason": {
          "description": "Reason optionally provides more information about a why the order is in the current state.",
          "type": "string"
        },
        "state": {
          "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
          "type": "string"
        },
        "url": {
          "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "OrderStatus",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.Route53Auth": {
      "description": "Route53Auth is configuration used to authenticate with a Route53.",
      "type": "object",
      "required": [
        "kubernetes"
      ],
      "properties": {
        "kubernetes": {
          "description": "Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity by passing a bound ServiceAccount token.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.Route53KubernetesAuth"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "Route53Auth",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.Route53KubernetesAuth": {
      "description": "Route53KubernetesAuth is a configuration to authenticate against Route53 using a bound Kubernetes ServiceAccount token.",
      "type": "object",
      "required": [
        "serviceAccountRef"
      ],
      "properties": {
        "serviceAccountRef": {
          "description": "A reference to a service account that will be used to request a bound token (also known as \"projected token\"). To use this field, you must configure an RBAC rule to let cert-manager request a token.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ServiceAccountRef"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "Route53KubernetesAuth",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.acme.v1.ServiceAccountRef": {
      "description": "ServiceAccountRef is a service account used by cert-manager to request a token. The expiration of the token is also set by cert-manager to 10 minutes.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "audiences": {
          "description": "TokenAudiences is an optional list of audiences to include in the token passed to AWS. The default token consisting of the issuer's namespace and name is always included. If unset the audience defaults to `sts.amazonaws.com`.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "name": {
          "description": "Name of the ServiceAccount used to request a token.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "acme.cert-manager.io",
        "Version": "v1",
        "Kind": "ServiceAccountRef",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.meta.v1.LocalObjectReference": {
      "description": "A reference to an object in the same namespace as the referent. If the referent is a cluster-scoped resource (e.g. a ClusterIssuer), the reference instead refers to the resource with the given name in the configured 'cluster resource namespace', which is set as a flag on the controller component (and defaults to the namespace that cert-manager runs in).",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "meta.cert-manager.io",
        "Version": "v1",
        "Kind": "LocalObjectReference",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.meta.v1.ObjectReference": {
      "description": "ObjectReference is a reference to an object with a given name, kind and group.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "group": {
          "description": "Group of the resource being referred to.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the resource being referred to.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource being referred to.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "meta.cert-manager.io",
        "Version": "v1",
        "Kind": "ObjectReference",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.meta.v1.SecretKeySelector": {
      "description": "A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "key": {
          "description": "The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "meta.cert-manager.io",
        "Version": "v1",
        "Kind": "SecretKeySelector",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CAIssuer": {
      "type": "object",
      "required": [
        "secretName"
      ],
      "properties": {
        "crlDistributionPoints": {
          "description": "The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "issuingCertificateURLs": {
          "description": "IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details. As an example, such a URL might be \"http://ca.domain.com/ca.crt\".",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "ocspServers": {
          "description": "The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be \"http://ocsp.int-x3.letsencrypt.org\".",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "secretName": {
          "description": "SecretName is the name of the secret used to sign Certificates issued by this Issuer.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CAIssuer",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.Certificate": {
      "description": "A Certificate resource should be created to ensure an up to date and signed X.509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.\n\nThe stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired state of the Certificate resource. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.v1.CertificateSpec"
        },
        "status": {
          "description": "Status of the Certificate. This is set and managed automatically. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.v1.CertificateStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "Certificate",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificateAdditionalOutputFormat": {
      "description": "CertificateAdditionalOutputFormat defines an additional output format of a Certificate resource. These contain supplementary data formats of the signed certificate chain and paired private key.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "Type is the name of the format type that should be written to the Certificate's target Secret.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateAdditionalOutputFormat",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificateCondition": {
      "description": "CertificateCondition contains condition information for a Certificate.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is a human readable description of the details of the last transition, complementing reason.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.",
          "type": "integer",
          "format": "int64"
        },
        "reason": {
          "description": "Reason is a brief machine readable explanation for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "Type of the condition, known values are (`Ready`, `Issuing`).",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateCondition",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificateKeystores": {
      "description": "CertificateKeystores configures additional keystore output formats to be created in the Certificate's output Secret.",
      "type": "object",
      "properties": {
        "jks": {
          "description": "JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.",
          "$ref": "#/definitions/io.cert-manager.v1.JKSKeystore"
        },
        "pkcs12": {
          "description": "PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.",
          "$ref": "#/definitions/io.cert-manager.v1.PKCS12Keystore"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateKeystores",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificateList": {
      "description": "CertificateList is a list of Certificates.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of Certificates",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.v1.Certificate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateList",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificatePrivateKey": {
      "description": "CertificatePrivateKey contains configuration options for private keys used by the Certificate controller. These include the key algorithm and size, the used encoding and the rotation policy.",
      "type": "object",
      "properties": {
        "algorithm": {
          "description": "Algorithm is the private key algorithm of the corresponding private key for this certificate.\n\nIf provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`. If `algorithm` is specified and `size` is not provided, key size of 2048 will be used for `RSA` key algorithm and key size of 256 will be used for `ECDSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.",
          "type": "string"
        },
        "encoding": {
          "description": "The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in.\n\nIf provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.",
          "type": "string"
        },
        "rotationPolicy": {
          "description": "RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed.\n\nIf set to `Never`, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exist but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to `Always`, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is `Never` for backward compatibility.",
          "type": "string"
        },
        "size": {
          "description": "Size is the key bit size of the corresponding private key for this certificate.\n\nIf `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificatePrivateKey",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificateRequest": {
      "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers.\n\nAll fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `Ready` status condition and its `status.failureTime` field.\n\nA CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired state of the CertificateRequest resource. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.v1.CertificateRequestSpec"
        },
        "status": {
          "description": "Status of the CertificateRequest. This is set and managed automatically. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.v1.CertificateRequestStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateRequest",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificateRequestCondition": {
      "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is a human readable description of the details of the last transition, complementing reason.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is a brief machine readable explanation for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateRequestCondition",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificateRequestList": {
      "description": "CertificateRequestList is a list of CertificateRequests.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of CertificateRequests",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.v1.CertificateRequest"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateRequestList",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificateRequestSpec": {
      "description": "CertificateRequestSpec defines the desired state of CertificateRequest\n\nNOTE: It is important to note that the issuer can choose to ignore or change any of the requested attributes. How the issuer maps a certificate request to a signed certificate is the full responsibility of the issuer itself. For example, as an edge case, an issuer that inverts the isCA value is free to do so.",
      "type": "object",
      "required": [
        "issuerRef",
        "request"
      ],
      "properties": {
        "duration": {
          "description": "Requested 'duration' (i.e. lifetime) of the Certificate. Note that the issuer may choose to ignore the requested duration, just like any other requested attribute.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "extra": {
          "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string",
              "default": ""
            }
          }
        },
        "groups": {
          "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-list-type": "atomic"
        },
        "isCA": {
          "description": "Requested basic constraints isCA value. Note that the issuer may choose to ignore the requested isCA value, just like any other requested attribute.\n\nNOTE: If the CSR in the `Request` field has a BasicConstraints extension, it must have the same isCA value as specified here.\n\nIf true, this will automatically add the `cert sign` usage to the list of requested `usages`.",
          "type": "boolean"
        },
        "issuerRef": {
          "description": "Reference to the issuer responsible for issuing the certificate. If the issuer is namespace-scoped, it must be in the same namespace as the Certificate. If the issuer is cluster-scoped, it can be used from any namespace.\n\nThe `name` field of the reference must always be specified.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.ObjectReference"
        },
        "request": {
          "description": "The PEM-encoded X.509 certificate signing request to be submitted to the issuer for signing.\n\nIf the CSR has a BasicConstraints extension, its isCA attribute must match the `isCA` value of this CertificateRequest. If the CSR has a KeyUsage extension, its key usages must match the key usages in the `usages` field of this CertificateRequest. If the CSR has a ExtKeyUsage extension, its extended key usages must match the extended key usages in the `usages` field of this CertificateRequest.",
          "type": "string",
          "format": "byte"
        },
        "uid": {
          "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
          "type": "string"
        },
        "usages": {
          "description": "Requested key usages and extended key usages.\n\nNOTE: If the CSR in the `Request` field has uses the KeyUsage or ExtKeyUsage extension, these extensions must have the same values as specified here without any additional values.\n\nIf unset, defaults to `digital signature` and `key encipherment`.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "username": {
          "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateRequestSpec",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificateRequestStatus": {
      "description": "CertificateRequestStatus defines the observed state of CertificateRequest and resulting signed certificate.",
      "type": "object",
      "properties": {
        "ca": {
          "description": "The PEM encoded X.509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
          "type": "string",
          "format": "byte"
        },
        "certificate": {
          "description": "The PEM encoded X.509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
          "type": "string",
          "format": "byte"
        },
        "conditions": {
          "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.v1.CertificateRequestCondition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "failureTime": {
          "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateRequestStatus",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificateSecretTemplate": {
      "description": "CertificateSecretTemplate defines the default labels and annotations to be copied to the Kubernetes Secret resource named in `CertificateSpec.secretName`.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is a key value map to be copied to the target Kubernetes Secret.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "labels": {
          "description": "Labels is a key value map to be copied to the target Kubernetes Secret.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateSecretTemplate",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificateSpec": {
      "description": "CertificateSpec defines the desired state of Certificate.\n\nNOTE: The specification contains a lot of \"requested\" certificate attributes, it is important to note that the issuer can choose to ignore or change any of these requested attributes. How the issuer maps a certificate request to a signed certificate is the full responsibility of the issuer itself. For example, as an edge case, an issuer that inverts the isCA value is free to do so.\n\nA valid Certificate requires at least one of a CommonName, LiteralSubject, DNSName, or URI to be valid.",
      "type": "object",
      "required": [
        "secretName",
        "issuerRef"
      ],
      "properties": {
        "additionalOutputFormats": {
          "description": "Defines extra output formats of the private key and signed certificate chain to be written to this Certificate's target Secret.\n\nThis is a Beta Feature enabled by default. It can be disabled with the `--feature-gates=AdditionalCertificateOutputFormats=false` option set on both the controller and webhook components.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.v1.CertificateAdditionalOutputFormat"
          }
        },
        "commonName": {
          "description": "Requested common name X509 certificate subject attribute. More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6 NOTE: TLS clients will ignore this value when any subject alternative name is set (see https://tools.ietf.org/html/rfc6125#section-6.4.4).\n\nShould have a length of 64 characters or fewer to avoid generating invalid CSRs. Cannot be set if the `literalSubject` field is set.",
          "type": "string"
        },
        "dnsNames": {
          "description": "Requested DNS subject alternative names.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "duration": {
          "description": "Requested 'duration' (i.e. lifetime) of the Certificate. Note that the issuer may choose to ignore the requested duration, just like any other requested attribute.\n\nIf unset, this defaults to 90 days. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "emailAddresses": {
          "description": "Requested email subject alternative names.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "encodeUsagesInRequest": {
          "description": "Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.\n\nThis option defaults to true, and should only be disabled if the target issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.",
          "type": "boolean"
        },
        "ipAddresses": {
          "description": "Requested IP address subject alternative names.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "isCA": {
          "description": "Requested basic constraints isCA value. The isCA value is used to set the `isCA` field on the created CertificateRequest resources. Note that the issuer may choose to ignore the requested isCA value, just like any other requested attribute.\n\nIf true, this will automatically add the `cert sign` usage to the list of requested `usages`.",
          "type": "boolean"
        },
        "issuerRef": {
          "description": "Reference to the issuer responsible for issuing the certificate. If the issuer is namespace-scoped, it must be in the same namespace as the Certificate. If the issuer is cluster-scoped, it can be used from any namespace.\n\nThe `name` field of the reference must always be specified.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.ObjectReference"
        },
        "keystores": {
          "description": "Additional keystore output formats to be stored in the Certificate's Secret.",
          "$ref": "#/definitions/io.cert-manager.v1.CertificateKeystores"
        },
        "literalSubject": {
          "description": "Requested X.509 certificate subject, represented using the LDAP \"String Representation of a Distinguished Name\" [1]. Important: the LDAP string format also specifies the order of the attributes in the subject, this is important when issuing certs for LDAP authentication. Example: `CN=foo,DC=corp,DC=example,DC=com` More info [1]: https://datatracker.ietf.org/doc/html/rfc4514 More info: https://github.com/cert-manager/cert-manager/issues/3203 More info: https://github.com/cert-manager/cert-manager/issues/4424\n\nCannot be set if the `subject` or `commonName` field is set.",
          "type": "string"
        },
        "nameConstraints": {
          "description": "x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate. More Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10\n\nThis is an Alpha Feature and is only enabled with the `--feature-gates=NameConstraints=true` option set on both the controller and webhook components.",
          "$ref": "#/definitions/io.cert-manager.v1.NameConstraints"
        },
        "otherNames": {
          "description": "`otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37 Any UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`. Most commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3 You should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.v1.OtherName"
          }
        },
        "privateKey": {
          "description": "Private key options. These include the key algorithm and size, the used encoding and the rotation policy.",
          "$ref": "#/definitions/io.cert-manager.v1.CertificatePrivateKey"
        },
        "renewBefore": {
          "description": "How long before the currently issued certificate's expiry cert-manager should renew the certificate. For example, if a certificate is valid for 60 minutes, and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate 50 minutes after it was issued (i.e. when there are 10 minutes remaining until the certificate is no longer valid).\n\nNOTE: The actual lifetime of the issued certificate is used to determine the renewal time. If an issuer returns a certificate with a different lifetime than the one requested, cert-manager will use the lifetime of the issued certificate.\n\nIf unset, this defaults to 1/3 of the issued certificate's lifetime. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration. Cannot be set if the `renewBeforePercentage` field is set.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "renewBeforePercentage": {
          "description": "`renewBeforePercentage` is like `renewBefore`, except it is a relative percentage rather than an absolute duration. For example, if a certificate is valid for 60 minutes, and  `renewBeforePercentage=25`, cert-manager will begin to attempt to renew the certificate 45 minutes after it was issued (i.e. when there are 15 minutes (25%) remaining until the certificate is no longer valid).\n\nNOTE: The actual lifetime of the issued certificate is used to determine the renewal time. If an issuer returns a certificate with a different lifetime than the one requested, cert-manager will use the lifetime of the issued certificate.\n\nValue must be an integer in the range (0,100). The minimum effective `renewBefore` derived from the `renewBeforePercentage` and `duration` fields is 5 minutes. Cannot be set if the `renewBefore` field is set.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "The maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number.\n\nIf set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.",
          "type": "integer",
          "format": "int32"
        },
        "secretName": {
          "description": "Name of the Secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer. The Secret resource lives in the same namespace as the Certificate resource.",
          "type": "string",
          "default": ""
        },
        "secretTemplate": {
          "description": "Defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.",
          "$ref": "#/definitions/io.cert-manager.v1.CertificateSecretTemplate"
        },
        "subject": {
          "description": "Requested set of X509 certificate subject attributes. More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6\n\nThe common name attribute is specified separately in the `commonName` field. Cannot be set if the `literalSubject` field is set.",
          "$ref": "#/definitions/io.cert-manager.v1.X509Subject"
        },
        "uris": {
          "description": "Requested URI subject alternative names.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "usages": {
          "description": "Requested key usages and extended key usages. These usages are used to set the `usages` field on the created CertificateRequest resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages will additionally be encoded in the `request` field which contains the CSR blob.\n\nIf unset, defaults to `digital signature` and `key encipherment`.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateSpec",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.CertificateStatus": {
      "description": "CertificateStatus defines the observed state of Certificate",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.v1.CertificateCondition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "failedIssuanceAttempts": {
          "description": "The number of continuous failed issuance attempts up till now. This field gets removed (if set) on a successful issuance and gets set to 1 if unset and an issuance has failed. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).",
          "type": "integer",
          "format": "int32"
        },
        "lastFailureTime": {
          "description": "LastFailureTime is set only if the latest issuance for this Certificate failed and contains the time of the failure. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1). If the latest issuance has succeeded this field will be unset.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "nextPrivateKeySecretName": {
          "description": "The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.",
          "type": "string"
        },
        "notAfter": {
          "description": "The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "notBefore": {
          "description": "The time after which the certificate stored in the secret named by this resource in `spec.secretName` is valid.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "renewalTime": {
          "description": "RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "revision": {
          "description": "The current 'revision' of the certificate as issued.\n\nWhen a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field.\n\nUpon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate.\n\nPersisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "CertificateStatus",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.ClusterIssuer": {
      "description": "A ClusterIssuer represents a certificate issuing authority which can be referenced as part of `issuerRef` fields. It is similar to an Issuer, however it is cluster-scoped and therefore can be referenced by resources that exist in *any* namespace, not just the same namespace as the referent.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Desired state of the ClusterIssuer resource.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.v1.IssuerSpec"
        },
        "status": {
          "description": "Status of the ClusterIssuer. This is set and managed automatically.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.v1.IssuerStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "ClusterIssuer",
        "Scope": "Clustered"
      }
    },
    "io.cert-manager.v1.ClusterIssuerList": {
      "description": "ClusterIssuerList is a list of Issuers",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.v1.ClusterIssuer"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "ClusterIssuerList",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.Issuer": {
      "description": "An Issuer represents a certificate issuing authority which can be referenced as part of `issuerRef` fields. It is scoped to a single namespace and can therefore only be referenced by resources within the same namespace.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Desired state of the Issuer resource.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.v1.IssuerSpec"
        },
        "status": {
          "description": "Status of the Issuer. This is set and managed automatically.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.v1.IssuerStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "Issuer",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.IssuerCondition": {
      "description": "IssuerCondition contains condition information for an Issuer.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is a human readable description of the details of the last transition, complementing reason.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.",
          "type": "integer",
          "format": "int64"
        },
        "reason": {
          "description": "Reason is a brief machine readable explanation for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "Type of the condition, known values are (`Ready`).",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "IssuerCondition",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.IssuerConfig": {
      "description": "The configuration for the issuer. Only one of these can be set.",
      "type": "object",
      "properties": {
        "acme": {
          "description": "ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEIssuer"
        },
        "ca": {
          "description": "CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.",
          "$ref": "#/definitions/io.cert-manager.v1.CAIssuer"
        },
        "selfSigned": {
          "description": "SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.",
          "$ref": "#/definitions/io.cert-manager.v1.SelfSignedIssuer"
        },
        "vault": {
          "description": "Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.",
          "$ref": "#/definitions/io.cert-manager.v1.VaultIssuer"
        },
        "venafi": {
          "description": "Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.",
          "$ref": "#/definitions/io.cert-manager.v1.VenafiIssuer"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "IssuerConfig",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.IssuerList": {
      "description": "IssuerList is a list of Issuers",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.v1.Issuer"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "IssuerList",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.IssuerSpec": {
      "description": "IssuerSpec is the specification of an Issuer. This includes any configuration required for the issuer.",
      "type": "object",
      "properties": {
        "acme": {
          "description": "ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEIssuer"
        },
        "ca": {
          "description": "CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.",
          "$ref": "#/definitions/io.cert-manager.v1.CAIssuer"
        },
        "selfSigned": {
          "description": "SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.",
          "$ref": "#/definitions/io.cert-manager.v1.SelfSignedIssuer"
        },
        "vault": {
          "description": "Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.",
          "$ref": "#/definitions/io.cert-manager.v1.VaultIssuer"
        },
        "venafi": {
          "description": "Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.",
          "$ref": "#/definitions/io.cert-manager.v1.VenafiIssuer"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "IssuerSpec",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.IssuerStatus": {
      "description": "IssuerStatus contains status information about an Issuer",
      "type": "object",
      "properties": {
        "acme": {
          "description": "ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.",
          "$ref": "#/definitions/io.cert-manager.acme.v1.ACMEIssuerStatus"
        },
        "conditions": {
          "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.cert-manager.v1.IssuerCondition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "IssuerStatus",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.JKSKeystore": {
      "description": "JKS configures options for storing a JKS keystore in the target secret. Either PasswordSecretRef or Password must be provided.",
      "type": "object",
      "required": [
        "create"
      ],
      "properties": {
        "alias": {
          "description": "Alias specifies the alias of the key in the keystore, required by the JKS format. If not provided, the default alias `certificate` will be used.",
          "type": "string"
        },
        "create": {
          "description": "Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` or `password`. The keystore file will be updated immediately. If the issuer provided a CA certificate, a file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority",
          "type": "boolean",
          "default": false
        },
        "password": {
          "description": "Password provides a literal password used to encrypt the JKS keystore. Mutually exclusive with passwordSecretRef. One of password or passwordSecretRef must provide a password with a non-zero length.",
          "type": "string"
        },
        "passwordSecretRef": {
          "description": "PasswordSecretRef is a reference to a non-empty key in a Secret resource containing the password used to encrypt the JKS keystore. Mutually exclusive with password. One of password or passwordSecretRef must provide a password with a non-zero length.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "JKSKeystore",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.NameConstraintItem": {
      "type": "object",
      "properties": {
        "dnsDomains": {
          "description": "DNSDomains is a list of DNS domains that are permitted or excluded.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "emailAddresses": {
          "description": "EmailAddresses is a list of Email Addresses that are permitted or excluded.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "ipRanges": {
          "description": "IPRanges is a list of IP Ranges that are permitted or excluded. This should be a valid CIDR notation.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "uriDomains": {
          "description": "URIDomains is a list of URI domains that are permitted or excluded.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "NameConstraintItem",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.NameConstraints": {
      "description": "NameConstraints is a type to represent x509 NameConstraints",
      "type": "object",
      "properties": {
        "critical": {
          "description": "if true then the name constraints are marked critical.",
          "type": "boolean"
        },
        "excluded": {
          "description": "Excluded contains the constraints which must be disallowed. Any name matching a restriction in the excluded field is invalid regardless of information appearing in the permitted",
          "$ref": "#/definitions/io.cert-manager.v1.NameConstraintItem"
        },
        "permitted": {
          "description": "Permitted contains the constraints in which the names must be located.",
          "$ref": "#/definitions/io.cert-manager.v1.NameConstraintItem"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "NameConstraints",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.OtherName": {
      "type": "object",
      "properties": {
        "oid": {
          "description": "OID is the object identifier for the otherName SAN. The object identifier must be expressed as a dotted string, for example, \"1.2.840.113556.1.4.221\".",
          "type": "string"
        },
        "utf8Value": {
          "description": "utf8Value is the string value of the otherName SAN. The utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "OtherName",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.PKCS12Keystore": {
      "description": "PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.",
      "type": "object",
      "required": [
        "create"
      ],
      "properties": {
        "create": {
          "description": "Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` or in `password`. The keystore file will be updated immediately. If the issuer provided a CA certificate, a file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority",
          "type": "boolean",
          "default": false
        },
        "password": {
          "description": "Password provides a literal password used to encrypt the PKCS#12 keystore. Mutually exclusive with passwordSecretRef. One of password or passwordSecretRef must provide a password with a non-zero length.",
          "type": "string"
        },
        "passwordSecretRef": {
          "description": "PasswordSecretRef is a reference to a non-empty key in a Secret resource containing the password used to encrypt the PKCS#12 keystore. Mutually exclusive with password. One of password or passwordSecretRef must provide a password with a non-zero length.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "profile": {
          "description": "Profile specifies the key and certificate encryption algorithms and the HMAC algorithm used to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.\n\nIf provided, allowed values are: `LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20. `LegacyDES`: Less secure algorithm. Use this option for maximal compatibility. `Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms (eg. because of company policy). Please note that the security of the algorithm is not that important in reality, because the unencrypted certificate and private key are also stored in the Secret.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "PKCS12Keystore",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.SelfSignedIssuer": {
      "description": "Configures an issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.",
      "type": "object",
      "properties": {
        "crlDistributionPoints": {
          "description": "The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "SelfSignedIssuer",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.ServiceAccountRef": {
      "description": "ServiceAccountRef is a service account used by cert-manager to request a token. Default audience is generated by cert-manager and takes the form `vault://namespace-name/issuer-name` for an Issuer and `vault://issuer-name` for a ClusterIssuer. The expiration of the token is also set by cert-manager to 10 minutes.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "audiences": {
          "description": "TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token consisting of the issuer's namespace and name is always included.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "name": {
          "description": "Name of the ServiceAccount used to request a token.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "ServiceAccountRef",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.VaultAppRole": {
      "description": "VaultAppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.",
      "type": "object",
      "required": [
        "path",
        "roleId",
        "secretRef"
      ],
      "properties": {
        "path": {
          "description": "Path where the App Role authentication backend is mounted in Vault, e.g: \"approle\"",
          "type": "string",
          "default": ""
        },
        "roleId": {
          "description": "RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "VaultAppRole",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.VaultAuth": {
      "description": "VaultAuth is configuration used to authenticate with a Vault server. The order of precedence is [`tokenSecretRef`, `appRole`, `clientCertificate` or `kubernetes`].",
      "type": "object",
      "properties": {
        "appRole": {
          "description": "AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.",
          "$ref": "#/definitions/io.cert-manager.v1.VaultAppRole"
        },
        "clientCertificate": {
          "description": "ClientCertificate authenticates with Vault by presenting a client certificate during the request's TLS handshake. Works only when using HTTPS protocol.",
          "$ref": "#/definitions/io.cert-manager.v1.VaultClientCertificateAuth"
        },
        "kubernetes": {
          "description": "Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.",
          "$ref": "#/definitions/io.cert-manager.v1.VaultKubernetesAuth"
        },
        "tokenSecretRef": {
          "description": "TokenSecretRef authenticates with Vault by presenting a token.",
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "VaultAuth",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.VaultClientCertificateAuth": {
      "description": "VaultKubernetesAuth is used to authenticate against Vault using a client certificate stored in a Secret.",
      "type": "object",
      "properties": {
        "mountPath": {
          "description": "The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value \"/v1/auth/cert\" will be used.",
          "type": "string"
        },
        "name": {
          "description": "Name of the certificate role to authenticate against. If not set, matching any certificate role, if available.",
          "type": "string"
        },
        "secretName": {
          "description": "Reference to Kubernetes Secret of type \"kubernetes.io/tls\" (hence containing tls.crt and tls.key) used to authenticate to Vault using TLS client authentication.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "VaultClientCertificateAuth",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.VaultIssuer": {
      "description": "Configures an issuer to sign certificates using a HashiCorp Vault PKI backend.",
      "type": "object",
      "required": [
        "auth",
        "server",
        "path"
      ],
      "properties": {
        "auth": {
          "description": "Auth configures how cert-manager authenticates with the Vault server.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.v1.VaultAuth"
        },
        "caBundle": {
          "description": "Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by Vault. Only used if using HTTPS to connect to Vault and ignored for HTTP connections. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.",
          "type": "string",
          "format": "byte"
        },
        "caBundleSecretRef": {
          "description": "Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.",
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "clientCertSecretRef": {
          "description": "Reference to a Secret containing a PEM-encoded Client Certificate to use when the Vault server requires mTLS.",
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "clientKeySecretRef": {
          "description": "Reference to a Secret containing a PEM-encoded Client Private Key to use when the Vault server requires mTLS.",
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "namespace": {
          "description": "Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces",
          "type": "string"
        },
        "path": {
          "description": "Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: \"my_pki_mount/sign/my-role-name\".",
          "type": "string",
          "default": ""
        },
        "server": {
          "description": "Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "VaultIssuer",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.VaultKubernetesAuth": {
      "description": "Authenticate against Vault using a Kubernetes ServiceAccount token stored in a Secret.",
      "type": "object",
      "required": [
        "role"
      ],
      "properties": {
        "mountPath": {
          "description": "The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value \"/v1/auth/kubernetes\" will be used.",
          "type": "string"
        },
        "role": {
          "description": "A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "serviceAccountRef": {
          "description": "A reference to a service account that will be used to request a bound token (also known as \"projected token\"). Compared to using \"secretRef\", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.",
          "$ref": "#/definitions/io.cert-manager.v1.ServiceAccountRef"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "VaultKubernetesAuth",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.VenafiCloud": {
      "description": "VenafiCloud defines connection configuration details for Venafi Cloud",
      "type": "object",
      "required": [
        "apiTokenSecretRef"
      ],
      "properties": {
        "apiTokenSecretRef": {
          "description": "APITokenSecretRef is a secret key selector for the Venafi Cloud API token.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "url": {
          "description": "URL is the base URL for Venafi Cloud. Defaults to \"https://api.venafi.cloud/v1\".",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "VenafiCloud",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.VenafiIssuer": {
      "description": "Configures an issuer to sign certificates using a Venafi TPP or Cloud policy zone.",
      "type": "object",
      "required": [
        "zone"
      ],
      "properties": {
        "cloud": {
          "description": "Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.",
          "$ref": "#/definitions/io.cert-manager.v1.VenafiCloud"
        },
        "tpp": {
          "description": "TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.",
          "$ref": "#/definitions/io.cert-manager.v1.VenafiTPP"
        },
        "zone": {
          "description": "Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "VenafiIssuer",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.VenafiTPP": {
      "description": "VenafiTPP defines connection configuration details for a Venafi TPP instance",
      "type": "object",
      "required": [
        "url",
        "credentialsRef"
      ],
      "properties": {
        "caBundle": {
          "description": "Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP. If undefined, the certificate bundle in the cert-manager controller container is used to validate the chain.",
          "type": "string",
          "format": "byte"
        },
        "caBundleSecretRef": {
          "description": "Reference to a Secret containing a base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.",
          "$ref": "#/definitions/io.cert-manager.meta.v1.SecretKeySelector"
        },
        "credentialsRef": {
          "description": "CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials. The secret must contain the key 'access-token' for the Access Token Authentication, or two keys, 'username' and 'password' for the API Keys Authentication.",
          "default": {},
          "$ref": "#/definitions/io.cert-manager.meta.v1.LocalObjectReference"
        },
        "url": {
          "description": "URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: \"https://tpp.example.com/vedsdk\".",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "VenafiTPP",
        "Scope": "Namespaced"
      }
    },
    "io.cert-manager.v1.X509Subject": {
      "description": "X509Subject Full X509 name specification",
      "type": "object",
      "properties": {
        "countries": {
          "description": "Countries to be used on the Certificate.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "localities": {
          "description": "Cities to be used on the Certificate.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "organizationalUnits": {
          "description": "Organizational Units to be used on the Certificate.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "organizations": {
          "description": "Organizations to be used on the Certificate.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "postalCodes": {
          "description": "Postal codes to be used on the Certificate.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "provinces": {
          "description": "State/Provinces to be used on the Certificate.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "serialNumber": {
          "description": "Serial number to be used on the Certificate.",
          "type": "string"
        },
        "streetAddresses": {
          "description": "Street addresses to be used on the Certificate.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cert-manager.io",
        "Version": "v1",
        "Kind": "X509Subject",
        "Scope": "Namespaced"
      }
    }
  }
}