{
  "swagger": "2.0",
  "info": {
    "title": "Kubernetes",
    "version": "0.0.0"
  },
  "paths": null,
  "definitions": {
    "io.k8s.api.core.v1.ConfigMap": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "binaryData": {
          "description": "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "data": {
          "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "immutable": {
          "description": "Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "ConfigMap",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.AWSChaos": {
      "description": "AWSChaos is the Schema for the awschaos API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AWSChaosSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AWSChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "AWSChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.AWSChaosList": {
      "description": "AWSChaosList contains a list of AWSChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AWSChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "AWSChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.AWSChaosSpec": {
      "description": "AWSChaosSpec is the content of the specification for an AWSChaos",
      "type": "object",
      "required": [
        "action",
        "awsRegion",
        "ec2Instance"
      ],
      "properties": {
        "action": {
          "description": "Action defines the specific aws chaos action. Supported action: ec2-stop / ec2-restart / detach-volume Default action: ec2-stop",
          "type": "string",
          "default": ""
        },
        "awsRegion": {
          "description": "AWSRegion defines the region of aws.",
          "type": "string",
          "default": ""
        },
        "deviceName": {
          "description": "DeviceName indicates the name of the device. Needed in detach-volume.",
          "type": "string"
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action.",
          "type": "string"
        },
        "ec2Instance": {
          "description": "Ec2Instance indicates the ID of the ec2 instance.",
          "type": "string",
          "default": ""
        },
        "endpoint": {
          "description": "Endpoint indicates the endpoint of the aws server. Just used it in test now.",
          "type": "string"
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "secretName": {
          "description": "SecretName defines the name of kubernetes secret.",
          "type": "string"
        },
        "volumeID": {
          "description": "EbsVolume indicates the ID of the EBS volume. Needed in detach-volume.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "AWSChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.AWSChaosStatus": {
      "description": "AWSChaosStatus represents the status of an AWSChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "AWSChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.AWSSelector": {
      "type": "object",
      "required": [
        "awsRegion",
        "ec2Instance"
      ],
      "properties": {
        "awsRegion": {
          "description": "AWSRegion defines the region of aws.",
          "type": "string",
          "default": ""
        },
        "deviceName": {
          "description": "DeviceName indicates the name of the device. Needed in detach-volume.",
          "type": "string"
        },
        "ec2Instance": {
          "description": "Ec2Instance indicates the ID of the ec2 instance.",
          "type": "string",
          "default": ""
        },
        "endpoint": {
          "description": "Endpoint indicates the endpoint of the aws server. Just used it in test now.",
          "type": "string"
        },
        "volumeID": {
          "description": "EbsVolume indicates the ID of the EBS volume. Needed in detach-volume.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "AWSSelector",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.AttrOverrideSpec": {
      "description": "AttrOverrideSpec represents an override of attribution",
      "type": "object",
      "properties": {
        "atime": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Timespec"
        },
        "blocks": {
          "type": "integer",
          "format": "int64"
        },
        "ctime": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Timespec"
        },
        "gid": {
          "type": "integer",
          "format": "int64"
        },
        "ino": {
          "type": "integer",
          "format": "int64"
        },
        "kind": {
          "type": "string"
        },
        "mtime": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Timespec"
        },
        "nlink": {
          "type": "integer",
          "format": "int64"
        },
        "perm": {
          "type": "integer",
          "format": "int32"
        },
        "rdev": {
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "uid": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "AttrOverrideSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.AzureChaos": {
      "description": "AzureChaos is the Schema for the azurechaos API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AzureChaosSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AzureChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "AzureChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.AzureChaosList": {
      "description": "AzureChaosList contains a list of AzureChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AzureChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "AzureChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.AzureChaosSpec": {
      "description": "AzureChaosSpec is the content of the specification for an AzureChaos",
      "type": "object",
      "required": [
        "action",
        "subscriptionID",
        "resourceGroupName",
        "vmName"
      ],
      "properties": {
        "action": {
          "description": "Action defines the specific azure chaos action. Supported action: vm-stop / vm-restart / disk-detach Default action: vm-stop",
          "type": "string",
          "default": ""
        },
        "diskName": {
          "description": "DiskName indicates the name of the disk. Needed in disk-detach.",
          "type": "string"
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action.",
          "type": "string"
        },
        "lun": {
          "description": "LUN indicates the Logical Unit Number of the data disk. Needed in disk-detach.",
          "type": "integer",
          "format": "int32"
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "resourceGroupName": {
          "description": "ResourceGroupName defines the name of ResourceGroup",
          "type": "string",
          "default": ""
        },
        "secretName": {
          "description": "SecretName defines the name of kubernetes secret. It is used for Azure credentials.",
          "type": "string"
        },
        "subscriptionID": {
          "description": "SubscriptionID defines the id of Azure subscription.",
          "type": "string",
          "default": ""
        },
        "vmName": {
          "description": "VMName defines the name of Virtual Machine",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "AzureChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.AzureChaosStatus": {
      "description": "AzureChaosStatus represents the status of an AzureChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "AzureChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.AzureSelector": {
      "type": "object",
      "required": [
        "subscriptionID",
        "resourceGroupName",
        "vmName"
      ],
      "properties": {
        "diskName": {
          "description": "DiskName indicates the name of the disk. Needed in disk-detach.",
          "type": "string"
        },
        "lun": {
          "description": "LUN indicates the Logical Unit Number of the data disk. Needed in disk-detach.",
          "type": "integer",
          "format": "int32"
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "resourceGroupName": {
          "description": "ResourceGroupName defines the name of ResourceGroup",
          "type": "string",
          "default": ""
        },
        "secretName": {
          "description": "SecretName defines the name of kubernetes secret. It is used for Azure credentials.",
          "type": "string"
        },
        "subscriptionID": {
          "description": "SubscriptionID defines the id of Azure subscription.",
          "type": "string",
          "default": ""
        },
        "vmName": {
          "description": "VMName defines the name of Virtual Machine",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "AzureSelector",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.BandwidthSpec": {
      "description": "BandwidthSpec defines detail of bandwidth limit.",
      "type": "object",
      "required": [
        "rate",
        "limit",
        "buffer"
      ],
      "properties": {
        "buffer": {
          "description": "Buffer is the maximum amount of bytes that tokens can be available for instantaneously.",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "limit": {
          "description": "Limit is the number of bytes that can be queued waiting for tokens to become available.",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "minburst": {
          "description": "Minburst specifies the size of the peakrate bucket. For perfect accuracy, should be set to the MTU of the interface.  If a peakrate is needed, but some burstiness is acceptable, this size can be raised. A 3000 byte minburst allows around 3mbit/s of peakrate, given 1000 byte packets.",
          "type": "integer",
          "format": "int64"
        },
        "peakrate": {
          "description": "Peakrate is the maximum depletion rate of the bucket. The peakrate does not need to be set, it is only necessary if perfect millisecond timescale shaping is required.",
          "type": "integer",
          "format": "int64"
        },
        "rate": {
          "description": "Rate is the speed knob. Allows bit, kbit, mbit, gbit, tbit, bps, kbps, mbps, gbps, tbps unit. bps means bytes per second.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "BandwidthSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.BlockChaos": {
      "description": "BlockChaos is the Schema for the blockchaos API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BlockChaosSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BlockChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "BlockChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.BlockChaosList": {
      "description": "BlockChaosList contains a list of BlockChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BlockChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "BlockChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.BlockChaosSpec": {
      "description": "BlockChaosSpec is the content of the specification for a BlockChaos",
      "type": "object",
      "required": [
        "action",
        "selector",
        "mode",
        "volumeName"
      ],
      "properties": {
        "action": {
          "description": "Action defines the specific block chaos action. Supported action: delay",
          "type": "string",
          "default": ""
        },
        "containerNames": {
          "description": "ContainerNames indicates list of the name of affected container. If not set, the first container will be injected",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "delay": {
          "description": "Delay defines the delay distribution.",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BlockDelaySpec"
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action.",
          "type": "string"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        },
        "volumeName": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "BlockChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.BlockChaosStatus": {
      "description": "BlockChaosStatus represents the status of a BlockChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        },
        "ids": {
          "description": "InjectionIds always specifies the number of injected chaos action",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "BlockChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.BlockDelaySpec": {
      "description": "BlockDelaySpec describes the block delay specification",
      "type": "object",
      "properties": {
        "correlation": {
          "type": "string"
        },
        "jitter": {
          "type": "string"
        },
        "latency": {
          "description": "Latency defines the latency of every io request.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "BlockDelaySpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.CPUStressor": {
      "description": "CPUStressor defines how to stress CPU out",
      "type": "object",
      "required": [
        "workers"
      ],
      "properties": {
        "load": {
          "description": "Load specifies P percent loading per CPU worker. 0 is effectively a sleep (no load) and 100 is full loading.",
          "type": "integer",
          "format": "int32"
        },
        "options": {
          "description": "extend stress-ng options",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "workers": {
          "description": "Workers specifies N workers to apply the stressor. Maximum 8192 workers can run by stress-ng",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "CPUStressor",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ChaosCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ChaosCondition",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ChaosKind": {
      "description": "ChaosKind includes one kind of chaos and its list type",
      "type": "object",
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ChaosKind",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ChaosOnlyScheduleSpec": {
      "description": "ChaosOnlyScheduleSpec is very similar with ScheduleSpec, but it could not schedule Workflow because we could not resolve nested CRD now",
      "type": "object",
      "required": [
        "schedule",
        "type"
      ],
      "properties": {
        "awsChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AWSChaosSpec"
        },
        "azureChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AzureChaosSpec"
        },
        "blockChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BlockChaosSpec"
        },
        "concurrencyPolicy": {
          "type": "string",
          "default": ""
        },
        "dnsChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DNSChaosSpec"
        },
        "gcpChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.GCPChaosSpec"
        },
        "historyLimit": {
          "type": "integer",
          "format": "int32"
        },
        "httpChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPChaosSpec"
        },
        "ioChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.IOChaosSpec"
        },
        "jvmChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMChaosSpec"
        },
        "kernelChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KernelChaosSpec"
        },
        "networkChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkChaosSpec"
        },
        "physicalmachineChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachineChaosSpec"
        },
        "podChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodChaosSpec"
        },
        "schedule": {
          "type": "string",
          "default": ""
        },
        "startingDeadlineSeconds": {
          "type": "integer",
          "format": "int64"
        },
        "stressChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressChaosSpec"
        },
        "timeChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.TimeChaosSpec"
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ChaosOnlyScheduleSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ChaosStatus": {
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.CidrAndPort": {
      "description": "CidrAndPort represents CIDR and port pair",
      "type": "object",
      "required": [
        "cidr",
        "port"
      ],
      "properties": {
        "cidr": {
          "type": "string",
          "default": ""
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "CidrAndPort",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ClockSpec": {
      "type": "object",
      "properties": {
        "clock-ids-slice": {
          "description": "the identifier of the particular clock on which to act. More clock description in linux kernel can be found in man page of clock_getres, clock_gettime, clock_settime. Muti clock ids should be split with \",\"",
          "type": "string"
        },
        "pid": {
          "description": "the pid of target program.",
          "type": "integer",
          "format": "int32"
        },
        "time-offset": {
          "description": "specifies the length of time offset.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ClockSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ConditionalBranch": {
      "type": "object",
      "required": [
        "target"
      ],
      "properties": {
        "expression": {
          "description": "Expression is the expression for this conditional branch, expected type of result is boolean. If expression is empty, this branch will always be selected/the template will be spawned.",
          "type": "string"
        },
        "target": {
          "description": "Target is the name of other template, if expression is evaluated as true, this template will be spawned.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ConditionalBranch",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ConditionalBranchStatus": {
      "type": "object",
      "required": [
        "target",
        "evaluationResult"
      ],
      "properties": {
        "evaluationResult": {
          "type": "string",
          "default": ""
        },
        "target": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ConditionalBranchStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ConditionalBranchesStatus": {
      "type": "object",
      "properties": {
        "branches": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ConditionalBranchStatus"
          }
        },
        "context": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ConditionalBranchesStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ContainerNodeVolumePathSelector": {
      "description": "ContainerNodeVolumePathSelector is the selector to select a node and a PV on it",
      "type": "object",
      "required": [
        "selector",
        "mode",
        "volumeName"
      ],
      "properties": {
        "containerNames": {
          "description": "ContainerNames indicates list of the name of affected container. If not set, the first container will be injected",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        },
        "volumeName": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ContainerNodeVolumePathSelector",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ContainerSelector": {
      "type": "object",
      "required": [
        "selector",
        "mode"
      ],
      "properties": {
        "containerNames": {
          "description": "ContainerNames indicates list of the name of affected container. If not set, the first container will be injected",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ContainerSelector",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.CorruptSpec": {
      "description": "CorruptSpec defines detail of a corrupt action",
      "type": "object",
      "required": [
        "corrupt"
      ],
      "properties": {
        "correlation": {
          "type": "string"
        },
        "corrupt": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "CorruptSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.DNSChaos": {
      "description": "DNSChaos is the Schema for the networkchaos API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a pod chaos experiment",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DNSChaosSpec"
        },
        "status": {
          "description": "Most recently observed status of the chaos experiment about pods",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DNSChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "DNSChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.DNSChaosList": {
      "description": "DNSChaosList contains a list of DNSChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DNSChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "DNSChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.DNSChaosSpec": {
      "description": "DNSChaosSpec defines the desired state of DNSChaos",
      "type": "object",
      "required": [
        "action",
        "selector",
        "mode"
      ],
      "properties": {
        "action": {
          "description": "Action defines the specific DNS chaos action. Supported action: error, random Default action: error",
          "type": "string",
          "default": ""
        },
        "containerNames": {
          "description": "ContainerNames indicates list of the name of affected container. If not set, the first container will be injected",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action",
          "type": "string"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "patterns": {
          "description": "Choose which domain names to take effect, support the placeholder ? and wildcard *, or the Specified domain name. Note:\n     1. The wildcard * must be at the end of the string. For example, chaos-*.org is invalid.\n     2. if the patterns is empty, will take effect on all the domain names.\nFor example:\n\t\tThe value is [\"google.com\", \"github.*\", \"chaos-mes?.org\"],\n\t\twill take effect on \"google.com\", \"github.com\" and \"chaos-mesh.org\"",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "DNSChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.DNSChaosStatus": {
      "description": "DNSChaosStatus defines the observed state of DNSChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "DNSChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.DelaySpec": {
      "description": "DelaySpec defines detail of a delay action",
      "type": "object",
      "required": [
        "latency"
      ],
      "properties": {
        "correlation": {
          "type": "string"
        },
        "jitter": {
          "type": "string"
        },
        "latency": {
          "type": "string",
          "default": ""
        },
        "reorder": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ReorderSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "DelaySpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.DiskFileSpec": {
      "type": "object",
      "properties": {
        "path": {
          "description": "specifies the location to fill data in. if path not provided, payload will read/write from/into a temp file, temp file will be deleted after writing",
          "type": "string"
        },
        "size": {
          "description": "specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "DiskFileSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.DiskFillSpec": {
      "type": "object",
      "properties": {
        "fill-by-fallocate": {
          "description": "fill disk by fallocate",
          "type": "boolean"
        },
        "path": {
          "description": "specifies the location to fill data in. if path not provided, payload will read/write from/into a temp file, temp file will be deleted after writing",
          "type": "string"
        },
        "size": {
          "description": "specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "DiskFillSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.DiskPayloadSpec": {
      "type": "object",
      "properties": {
        "path": {
          "description": "specifies the location to fill data in. if path not provided, payload will read/write from/into a temp file, temp file will be deleted after writing",
          "type": "string"
        },
        "payload-process-num": {
          "description": "specifies the number of process work on writing, default 1, only 1-255 is valid value",
          "type": "integer",
          "format": "byte"
        },
        "size": {
          "description": "specifies how many units of data will write into the file path. support unit: c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, GB=1000*1000*1000, G=1024*1024*1024 BYTES. example : 1M | 512kB",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "DiskPayloadSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.DuplicateSpec": {
      "description": "DuplicateSpec defines detail of a duplicate action",
      "type": "object",
      "required": [
        "duplicate"
      ],
      "properties": {
        "correlation": {
          "type": "string"
        },
        "duplicate": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "DuplicateSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.EmbedChaos": {
      "type": "object",
      "properties": {
        "awsChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AWSChaosSpec"
        },
        "azureChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AzureChaosSpec"
        },
        "blockChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BlockChaosSpec"
        },
        "dnsChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DNSChaosSpec"
        },
        "gcpChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.GCPChaosSpec"
        },
        "httpChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPChaosSpec"
        },
        "ioChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.IOChaosSpec"
        },
        "jvmChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMChaosSpec"
        },
        "kernelChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KernelChaosSpec"
        },
        "networkChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkChaosSpec"
        },
        "physicalmachineChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachineChaosSpec"
        },
        "podChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodChaosSpec"
        },
        "stressChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressChaosSpec"
        },
        "timeChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.TimeChaosSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "EmbedChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.EmbedStatusCheck": {
      "type": "object",
      "properties": {
        "http": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPStatusCheck"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "EmbedStatusCheck",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ExpInfo": {
      "type": "object",
      "properties": {
        "clock": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ClockSpec"
        },
        "disk-fill": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DiskFillSpec"
        },
        "disk-read-payload": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DiskPayloadSpec"
        },
        "disk-write-payload": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DiskPayloadSpec"
        },
        "file-append": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FileAppendSpec"
        },
        "file-create": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FileCreateSpec"
        },
        "file-delete": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FileDeleteSpec"
        },
        "file-modify": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FileModifyPrivilegeSpec"
        },
        "file-rename": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FileRenameSpec"
        },
        "file-replace": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FileReplaceSpec"
        },
        "http-abort": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPAbortSpec"
        },
        "http-config": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPConfigSpec"
        },
        "http-delay": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPDelaySpec"
        },
        "http-request": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPRequestSpec"
        },
        "jvm-exception": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMExceptionSpec"
        },
        "jvm-gc": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMGCSpec"
        },
        "jvm-latency": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMLatencySpec"
        },
        "jvm-mysql": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PMJVMMySQLSpec"
        },
        "jvm-return": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMReturnSpec"
        },
        "jvm-rule-data": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMRuleDataSpec"
        },
        "jvm-stress": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMStressSpec"
        },
        "kafka-fill": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KafkaFillSpec"
        },
        "kafka-flood": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KafkaFloodSpec"
        },
        "kafka-io": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KafkaIOSpec"
        },
        "network-bandwidth": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkBandwidthSpec"
        },
        "network-corrupt": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkCorruptSpec"
        },
        "network-delay": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkDelaySpec"
        },
        "network-dns": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkDNSSpec"
        },
        "network-down": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkDownSpec"
        },
        "network-duplicate": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkDuplicateSpec"
        },
        "network-flood": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkFloodSpec"
        },
        "network-loss": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkLossSpec"
        },
        "network-partition": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkPartitionSpec"
        },
        "process": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ProcessSpec"
        },
        "redis-cacheLimit": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RedisCacheLimitSpec"
        },
        "redis-expiration": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RedisExpirationSpec"
        },
        "redis-penetration": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RedisPenetrationSpec"
        },
        "redis-restart": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RedisSentinelRestartSpec"
        },
        "redis-stop": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RedisSentinelStopSpec"
        },
        "stress-cpu": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressCPUSpec"
        },
        "stress-mem": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressMemorySpec"
        },
        "user_defined": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.UserDefinedSpec"
        },
        "vm": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.VMSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ExpInfo",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ExperimentStatus": {
      "type": "object",
      "properties": {
        "containerRecords": {
          "description": "Records are used to track the running status",
          "type": "array",
          "items": {
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Record"
          }
        },
        "desiredPhase": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ExperimentStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.FailKernRequest": {
      "description": "FailKernRequest defines the injection conditions",
      "type": "object",
      "required": [
        "failtype"
      ],
      "properties": {
        "callchain": {
          "description": "Callchain indicate a special call chain, such as:\n    ext4_mount\n      -\u003e mount_subtree\n         -\u003e ...\n            -\u003e should_failslab\nWith an optional set of predicates and an optional set of parameters, which used with predicates. You can read call chan and predicate examples from https://github.com/chaos-mesh/bpfki/tree/develop/examples to learn more. If no special call chain, just keep Callchain empty, which means it will fail at any call chain with slab alloc (eg: kmalloc).",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Frame"
          }
        },
        "failtype": {
          "description": "FailType indicates what to fail, can be set to '0' / '1' / '2' If `0`, indicates slab to fail (should_failslab) If `1`, indicates alloc_page to fail (should_fail_alloc_page) If `2`, indicates bio to fail (should_fail_bio) You can read:\n  1. https://www.kernel.org/doc/html/latest/fault-injection/fault-injection.html\n  2. http://github.com/iovisor/bcc/blob/master/tools/inject_example.txt\nto learn more",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "headers": {
          "description": "Headers indicates the appropriate kernel headers you need. Eg: \"linux/mmzone.h\", \"linux/blkdev.h\" and so on",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "probability": {
          "description": "Probability indicates the fails with probability. If you want 1%, please set this field with 1.",
          "type": "integer",
          "format": "int64"
        },
        "times": {
          "description": "Times indicates the max times of fails.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "FailKernRequest",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.FileAppendSpec": {
      "type": "object",
      "properties": {
        "count": {
          "description": "Count is the number of times to append the data.",
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "description": "Data is the data for append.",
          "type": "string"
        },
        "file-name": {
          "description": "FileName is the name of the file to be created, modified, deleted, renamed, or appended.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "FileAppendSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.FileCreateSpec": {
      "type": "object",
      "properties": {
        "dir-name": {
          "description": "DirName is the directory name to create or delete.",
          "type": "string"
        },
        "file-name": {
          "description": "FileName is the name of the file to be created, modified, deleted, renamed, or appended.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "FileCreateSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.FileDeleteSpec": {
      "type": "object",
      "properties": {
        "dir-name": {
          "description": "DirName is the directory name to create or delete.",
          "type": "string"
        },
        "file-name": {
          "description": "FileName is the name of the file to be created, modified, deleted, renamed, or appended.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "FileDeleteSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.FileModifyPrivilegeSpec": {
      "type": "object",
      "properties": {
        "file-name": {
          "description": "FileName is the name of the file to be created, modified, deleted, renamed, or appended.",
          "type": "string"
        },
        "privilege": {
          "description": "Privilege is the file privilege to be set.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "FileModifyPrivilegeSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.FileRenameSpec": {
      "type": "object",
      "properties": {
        "dest-file": {
          "description": "DestFile is the name to be renamed.",
          "type": "string"
        },
        "source-file": {
          "description": "SourceFile is the name need to be renamed.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "FileRenameSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.FileReplaceSpec": {
      "type": "object",
      "properties": {
        "dest-string": {
          "description": "DestStr is the destination string of the file.",
          "type": "string"
        },
        "file-name": {
          "description": "FileName is the name of the file to be created, modified, deleted, renamed, or appended.",
          "type": "string"
        },
        "line": {
          "description": "Line is the line number of the file to be replaced.",
          "type": "integer",
          "format": "int32"
        },
        "origin-string": {
          "description": "OriginStr is the origin string of the file.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "FileReplaceSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.Filter": {
      "description": "Filter represents a filter of IOChaos action, which will define the scope of an IOChaosAction",
      "type": "object",
      "required": [
        "path",
        "percent"
      ],
      "properties": {
        "methods": {
          "description": "Methods represents the method that the action will inject in",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "path": {
          "description": "Path represents a glob of injecting path",
          "type": "string",
          "default": ""
        },
        "percent": {
          "description": "Percent represents the percent probability of injecting this action",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "Filter",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.Frame": {
      "description": "Frame defines the function signature and predicate in function's body",
      "type": "object",
      "properties": {
        "funcname": {
          "description": "Funcname can be find from kernel source or `/proc/kallsyms`, such as `ext4_mount`",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters is used with predicate, for example, if you want to inject slab error in `d_alloc_parallel(struct dentry *parent, const struct qstr *name)` with a special name `bananas`, you need to set it to `struct dentry *parent, const struct qstr *name` otherwise omit it.",
          "type": "string"
        },
        "predicate": {
          "description": "Predicate will access the arguments of this Frame, example with Parameters's, you can set it to `STRNCMP(name-\u003ename, \"bananas\", 8)` to make inject only with it, or omit it to inject for all d_alloc_parallel call chain.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "Frame",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.GCPChaos": {
      "description": "GCPChaos is the Schema for the gcpchaos API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.GCPChaosSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.GCPChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "GCPChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.GCPChaosList": {
      "description": "GCPChaosList contains a list of GCPChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.GCPChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "GCPChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.GCPChaosSpec": {
      "description": "GCPChaosSpec is the content of the specification for a GCPChaos",
      "type": "object",
      "required": [
        "action",
        "project",
        "zone",
        "instance"
      ],
      "properties": {
        "action": {
          "description": "Action defines the specific gcp chaos action. Supported action: node-stop / node-reset / disk-loss Default action: node-stop",
          "type": "string",
          "default": ""
        },
        "deviceNames": {
          "description": "The device name of disks to detach. Needed in disk-loss.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action.",
          "type": "string"
        },
        "instance": {
          "description": "Instance defines the name of the instance",
          "type": "string",
          "default": ""
        },
        "project": {
          "description": "Project defines the ID of gcp project.",
          "type": "string",
          "default": ""
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "secretName": {
          "description": "SecretName defines the name of kubernetes secret. It is used for GCP credentials.",
          "type": "string"
        },
        "zone": {
          "description": "Zone defines the zone of gcp project.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "GCPChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.GCPChaosStatus": {
      "description": "GCPChaosStatus represents the status of a GCPChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "attachedDiskStrings": {
          "description": "The attached disk info strings. Needed in disk-loss.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "GCPChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.GCPSelector": {
      "type": "object",
      "required": [
        "project",
        "zone",
        "instance"
      ],
      "properties": {
        "deviceNames": {
          "description": "The device name of disks to detach. Needed in disk-loss.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "instance": {
          "description": "Instance defines the name of the instance",
          "type": "string",
          "default": ""
        },
        "project": {
          "description": "Project defines the ID of gcp project.",
          "type": "string",
          "default": ""
        },
        "zone": {
          "description": "Zone defines the zone of gcp project.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "GCPSelector",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.GenericSelectorSpec": {
      "description": "GenericSelectorSpec defines some selectors to select objects.",
      "type": "object",
      "properties": {
        "annotationSelectors": {
          "description": "Map of string keys and values that can be used to select objects. A selector based on annotations.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "fieldSelectors": {
          "description": "Map of string keys and values that can be used to select objects. A selector based on fields.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "labelSelectors": {
          "description": "Map of string keys and values that can be used to select objects. A selector based on labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "namespaces": {
          "description": "Namespaces is a set of namespace to which objects belong.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "GenericSelectorSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.HTTPAbortSpec": {
      "type": "object",
      "required": [
        "proxy_ports",
        "target"
      ],
      "properties": {
        "code": {
          "description": "Code is a rule to select target by http status code in response",
          "type": "string"
        },
        "method": {
          "description": "HTTP method",
          "type": "string"
        },
        "path": {
          "description": "Match path of Uri with wildcard matches",
          "type": "string"
        },
        "port": {
          "description": "The TCP port that the target service listens on",
          "type": "integer",
          "format": "int32"
        },
        "proxy_ports": {
          "description": "Composed with one of the port of HTTP connection, we will only attack HTTP connection with port inside proxy_ports",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        },
        "target": {
          "description": "HTTP target: Request or Response",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "HTTPAbortSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.HTTPChaos": {
      "description": "HTTPChaos is the Schema for the HTTPchaos API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPChaosSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "HTTPChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.HTTPChaosList": {
      "description": "HTTPChaosList contains a list of HTTPChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "HTTPChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.HTTPChaosSpec": {
      "type": "object",
      "required": [
        "selector",
        "mode",
        "target"
      ],
      "properties": {
        "abort": {
          "description": "Abort is a rule to abort a http session.",
          "type": "boolean"
        },
        "code": {
          "description": "Code is a rule to select target by http status code in response.",
          "type": "integer",
          "format": "int32"
        },
        "delay": {
          "description": "Delay represents the delay of the target request/response. A duration string is a possibly unsigned sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".",
          "type": "string"
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action.",
          "type": "string"
        },
        "method": {
          "description": "Method is a rule to select target by http method in request.",
          "type": "string"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "patch": {
          "description": "Patch is a rule to patch some contents in target.",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosPatchActions"
        },
        "path": {
          "description": "Path is a rule to select target by uri path in http request.",
          "type": "string"
        },
        "port": {
          "description": "Port represents the target port to be proxy of.",
          "type": "integer",
          "format": "int32"
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "replace": {
          "description": "Replace is a rule to replace some contents in target.",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosReplaceActions"
        },
        "request_headers": {
          "description": "RequestHeaders is a rule to select target by http headers in request. The key-value pairs represent header name and header value pairs.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "response_headers": {
          "description": "ResponseHeaders is a rule to select target by http headers in response. The key-value pairs represent header name and header value pairs.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "target": {
          "description": "Target is the object to be selected and injected.",
          "type": "string",
          "default": ""
        },
        "tls": {
          "description": "TLS is the tls config, will override PodHttpChaos if there are multiple HTTPChaos experiments are applied",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosTLS"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "HTTPChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.HTTPChaosStatus": {
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        },
        "instances": {
          "description": "Instances always specifies podhttpchaos generation or empty",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "HTTPChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.HTTPCommonSpec": {
      "type": "object",
      "required": [
        "proxy_ports",
        "target"
      ],
      "properties": {
        "code": {
          "description": "Code is a rule to select target by http status code in response",
          "type": "string"
        },
        "method": {
          "description": "HTTP method",
          "type": "string"
        },
        "path": {
          "description": "Match path of Uri with wildcard matches",
          "type": "string"
        },
        "port": {
          "description": "The TCP port that the target service listens on",
          "type": "integer",
          "format": "int32"
        },
        "proxy_ports": {
          "description": "Composed with one of the port of HTTP connection, we will only attack HTTP connection with port inside proxy_ports",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        },
        "target": {
          "description": "HTTP target: Request or Response",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "HTTPCommonSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.HTTPConfigSpec": {
      "type": "object",
      "properties": {
        "file_path": {
          "description": "The config file path",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "HTTPConfigSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.HTTPCriteria": {
      "type": "object",
      "required": [
        "statusCode"
      ],
      "properties": {
        "statusCode": {
          "description": "StatusCode defines the expected http status code for the request. A statusCode string could be a single code (e.g. 200), or an inclusive range (e.g. 200-400, both `200` and `400` are included).",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "HTTPCriteria",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.HTTPDelaySpec": {
      "type": "object",
      "required": [
        "proxy_ports",
        "target",
        "delay"
      ],
      "properties": {
        "code": {
          "description": "Code is a rule to select target by http status code in response",
          "type": "string"
        },
        "delay": {
          "description": "Delay represents the delay of the target request/response",
          "type": "string",
          "default": ""
        },
        "method": {
          "description": "HTTP method",
          "type": "string"
        },
        "path": {
          "description": "Match path of Uri with wildcard matches",
          "type": "string"
        },
        "port": {
          "description": "The TCP port that the target service listens on",
          "type": "integer",
          "format": "int32"
        },
        "proxy_ports": {
          "description": "Composed with one of the port of HTTP connection, we will only attack HTTP connection with port inside proxy_ports",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        },
        "target": {
          "description": "HTTP target: Request or Response",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "HTTPDelaySpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.HTTPRequestSpec": {
      "description": "used for HTTP request, now only support GET",
      "type": "object",
      "properties": {
        "count": {
          "description": "The number of requests to send",
          "type": "integer",
          "format": "int32"
        },
        "enable-conn-pool": {
          "description": "Enable connection pool",
          "type": "boolean"
        },
        "url": {
          "description": "Request to send\"",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "HTTPRequestSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.HTTPStatusCheck": {
      "type": "object",
      "required": [
        "url",
        "criteria"
      ],
      "properties": {
        "body": {
          "type": "string"
        },
        "criteria": {
          "description": "Criteria defines how to determine the result of the status check.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPCriteria"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string",
              "default": ""
            }
          }
        },
        "method": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "HTTPStatusCheck",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.IOChaos": {
      "description": "IOChaos is the Schema for the iochaos API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.IOChaosSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.IOChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "IOChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.IOChaosAction": {
      "description": "IOChaosAction defines a possible action of IOChaos",
      "type": "object",
      "required": [
        "type",
        "path",
        "percent"
      ],
      "properties": {
        "atime": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Timespec"
        },
        "blocks": {
          "type": "integer",
          "format": "int64"
        },
        "ctime": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Timespec"
        },
        "faults": {
          "description": "Faults represents the fault to inject",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.IoFault"
          }
        },
        "gid": {
          "type": "integer",
          "format": "int64"
        },
        "ino": {
          "type": "integer",
          "format": "int64"
        },
        "kind": {
          "type": "string"
        },
        "latency": {
          "description": "Latency represents the latency to inject",
          "type": "string"
        },
        "methods": {
          "description": "Methods represents the method that the action will inject in",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "mistake": {
          "description": "MistakeSpec represents the mistake to inject",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.MistakeSpec"
        },
        "mtime": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Timespec"
        },
        "nlink": {
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "description": "Path represents a glob of injecting path",
          "type": "string",
          "default": ""
        },
        "percent": {
          "description": "Percent represents the percent probability of injecting this action",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "perm": {
          "type": "integer",
          "format": "int32"
        },
        "rdev": {
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "source": {
          "description": "Source represents the source of current rules",
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": ""
        },
        "uid": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "IOChaosAction",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.IOChaosList": {
      "description": "IOChaosList contains a list of IOChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.IOChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "IOChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.IOChaosSpec": {
      "description": "IOChaosSpec defines the desired state of IOChaos",
      "type": "object",
      "required": [
        "selector",
        "mode",
        "action",
        "volumePath"
      ],
      "properties": {
        "action": {
          "description": "Action defines the specific pod chaos action. Supported action: latency / fault / attrOverride / mistake",
          "type": "string",
          "default": ""
        },
        "attr": {
          "description": "Attr defines the overrided attribution",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AttrOverrideSpec"
        },
        "containerNames": {
          "description": "ContainerNames indicates list of the name of affected container. If not set, the first container will be injected",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "delay": {
          "description": "Delay defines the value of I/O chaos action delay. A delay string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".",
          "type": "string"
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action. It is required when the action is `PodFailureAction`. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".",
          "type": "string"
        },
        "errno": {
          "description": "Errno defines the error code that returned by I/O action. refer to: https://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Errors/unix_system_errors.html",
          "type": "integer",
          "format": "int64"
        },
        "methods": {
          "description": "Methods defines the I/O methods for injecting I/O chaos action. default: all I/O methods.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "mistake": {
          "description": "Mistake defines what types of incorrectness are injected to IO operations",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.MistakeSpec"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "path": {
          "description": "Path defines the path of files for injecting I/O chaos action.",
          "type": "string"
        },
        "percent": {
          "description": "Percent defines the percentage of injection errors and provides a number from 0-100. default: 100.",
          "type": "integer",
          "format": "int32"
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        },
        "volumePath": {
          "description": "VolumePath represents the mount path of injected volume",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "IOChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.IOChaosStatus": {
      "description": "IOChaosStatus defines the observed state of IOChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        },
        "instances": {
          "description": "Instances always specifies podiochaos generation or empty",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "IOChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.IoFault": {
      "description": "IoFault represents the fault to inject and their weight",
      "type": "object",
      "required": [
        "errno",
        "weight"
      ],
      "properties": {
        "errno": {
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "weight": {
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "IoFault",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMChaos": {
      "description": "JVMChaos is the Schema for the jvmchaos API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMChaosSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMChaosList": {
      "description": "JVMChaosList contains a list of JVMChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMChaosSpec": {
      "description": "JVMChaosSpec defines the desired state of JVMChaos",
      "type": "object",
      "required": [
        "selector",
        "mode",
        "action"
      ],
      "properties": {
        "action": {
          "description": "Action defines the specific jvm chaos action. Supported action: latency;return;exception;stress;gc;ruleData",
          "type": "string",
          "default": ""
        },
        "class": {
          "description": "Java class",
          "type": "string"
        },
        "containerNames": {
          "description": "ContainerNames indicates list of the name of affected container. If not set, the first container will be injected",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "cpuCount": {
          "description": "the CPU core number needs to use, only set it when action is stress",
          "type": "integer",
          "format": "int32"
        },
        "database": {
          "description": "the match database default value is \"\", means match all database",
          "type": "string"
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action",
          "type": "string"
        },
        "exception": {
          "description": "the exception which needs to throw for action `exception` or the exception message needs to throw in action `mysql`",
          "type": "string",
          "default": ""
        },
        "latency": {
          "description": "the latency duration for action 'latency', unit ms or the latency duration in action `mysql`",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "memType": {
          "description": "the memory type needs to locate, only set it when action is stress, the value can be 'stack' or 'heap'",
          "type": "string"
        },
        "method": {
          "description": "the method in Java class",
          "type": "string"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "mysqlConnectorVersion": {
          "description": "the version of mysql-connector-java, only support 5.X.X(set to \"5\") and 8.X.X(set to \"8\") now",
          "type": "string"
        },
        "name": {
          "description": "byteman rule name, should be unique, and will generate one if not set",
          "type": "string",
          "default": ""
        },
        "pid": {
          "description": "the pid of Java process which needs to attach",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "the port of agent server, default 9277",
          "type": "integer",
          "format": "int32"
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "returnValue": {
          "description": "the return value for action 'return'",
          "type": "string",
          "default": ""
        },
        "ruleData": {
          "description": "the byteman rule's data for action 'ruleData'",
          "type": "string",
          "default": ""
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "sqlType": {
          "description": "the match sql type default value is \"\", means match all SQL type. The value can be 'select', 'insert', 'update', 'delete', 'replace'.",
          "type": "string"
        },
        "table": {
          "description": "the match table default value is \"\", means match all table",
          "type": "string"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMChaosStatus": {
      "description": "JVMChaosStatus defines the observed state of JVMChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMClassMethodSpec": {
      "description": "JVMClassMethodSpec is the specification for class and method",
      "type": "object",
      "properties": {
        "class": {
          "description": "Java class",
          "type": "string"
        },
        "method": {
          "description": "the method in Java class",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMClassMethodSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMCommonSpec": {
      "description": "JVMCommonSpec is the common specification for JVMChaos",
      "type": "object",
      "properties": {
        "pid": {
          "description": "the pid of Java process which needs to attach",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "the port of agent server, default 9277",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMCommonSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMExceptionSpec": {
      "type": "object",
      "properties": {
        "class": {
          "description": "Java class",
          "type": "string"
        },
        "exception": {
          "description": "the exception which needs to throw for action `exception`",
          "type": "string"
        },
        "method": {
          "description": "the method in Java class",
          "type": "string"
        },
        "pid": {
          "description": "the pid of Java process which needs to attach",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "the port of agent server, default 9277",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMExceptionSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMGCSpec": {
      "type": "object",
      "properties": {
        "pid": {
          "description": "the pid of Java process which needs to attach",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "the port of agent server, default 9277",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMGCSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMLatencySpec": {
      "type": "object",
      "properties": {
        "class": {
          "description": "Java class",
          "type": "string"
        },
        "latency": {
          "description": "the latency duration for action 'latency', unit ms",
          "type": "integer",
          "format": "int32"
        },
        "method": {
          "description": "the method in Java class",
          "type": "string"
        },
        "pid": {
          "description": "the pid of Java process which needs to attach",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "the port of agent server, default 9277",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMLatencySpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMMySQLSpec": {
      "description": "JVMMySQLSpec is the specification of MySQL fault injection in JVM only when SQL match the Database, Table and SQLType, JVMChaos mesh will inject fault for examle:\n\n\tSQL is \"select * from test.t1\",\n\tonly when ((Database == \"test\" || Database == \"\") \u0026\u0026 (Table == \"t1\" || Table == \"\") \u0026\u0026 (SQLType == \"select\" || SQLType == \"\")) is true, JVMChaos will inject fault",
      "type": "object",
      "properties": {
        "database": {
          "description": "the match database default value is \"\", means match all database",
          "type": "string"
        },
        "mysqlConnectorVersion": {
          "description": "the version of mysql-connector-java, only support 5.X.X(set to \"5\") and 8.X.X(set to \"8\") now",
          "type": "string"
        },
        "sqlType": {
          "description": "the match sql type default value is \"\", means match all SQL type. The value can be 'select', 'insert', 'update', 'delete', 'replace'.",
          "type": "string"
        },
        "table": {
          "description": "the match table default value is \"\", means match all table",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMMySQLSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMParameter": {
      "description": "JVMParameter represents the detail about jvm chaos action definition",
      "type": "object",
      "properties": {
        "class": {
          "description": "Java class",
          "type": "string"
        },
        "cpuCount": {
          "description": "the CPU core number needs to use, only set it when action is stress",
          "type": "integer",
          "format": "int32"
        },
        "database": {
          "description": "the match database default value is \"\", means match all database",
          "type": "string"
        },
        "exception": {
          "description": "the exception which needs to throw for action `exception` or the exception message needs to throw in action `mysql`",
          "type": "string",
          "default": ""
        },
        "latency": {
          "description": "the latency duration for action 'latency', unit ms or the latency duration in action `mysql`",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "memType": {
          "description": "the memory type needs to locate, only set it when action is stress, the value can be 'stack' or 'heap'",
          "type": "string"
        },
        "method": {
          "description": "the method in Java class",
          "type": "string"
        },
        "mysqlConnectorVersion": {
          "description": "the version of mysql-connector-java, only support 5.X.X(set to \"5\") and 8.X.X(set to \"8\") now",
          "type": "string"
        },
        "name": {
          "description": "byteman rule name, should be unique, and will generate one if not set",
          "type": "string",
          "default": ""
        },
        "pid": {
          "description": "the pid of Java process which needs to attach",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "the port of agent server, default 9277",
          "type": "integer",
          "format": "int32"
        },
        "returnValue": {
          "description": "the return value for action 'return'",
          "type": "string",
          "default": ""
        },
        "ruleData": {
          "description": "the byteman rule's data for action 'ruleData'",
          "type": "string",
          "default": ""
        },
        "sqlType": {
          "description": "the match sql type default value is \"\", means match all SQL type. The value can be 'select', 'insert', 'update', 'delete', 'replace'.",
          "type": "string"
        },
        "table": {
          "description": "the match table default value is \"\", means match all table",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMParameter",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMReturnSpec": {
      "type": "object",
      "properties": {
        "class": {
          "description": "Java class",
          "type": "string"
        },
        "method": {
          "description": "the method in Java class",
          "type": "string"
        },
        "pid": {
          "description": "the pid of Java process which needs to attach",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "the port of agent server, default 9277",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "the return value for action 'return'",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMReturnSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMRuleDataSpec": {
      "type": "object",
      "properties": {
        "pid": {
          "description": "the pid of Java process which needs to attach",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "the port of agent server, default 9277",
          "type": "integer",
          "format": "int32"
        },
        "rule-data": {
          "description": "RuleData used to save the rule file's data, will use it when recover",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMRuleDataSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMStressCfgSpec": {
      "description": "JVMStressSpec is the specification for stress",
      "type": "object",
      "properties": {
        "cpuCount": {
          "description": "the CPU core number needs to use, only set it when action is stress",
          "type": "integer",
          "format": "int32"
        },
        "memType": {
          "description": "the memory type needs to locate, only set it when action is stress, the value can be 'stack' or 'heap'",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMStressCfgSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.JVMStressSpec": {
      "type": "object",
      "properties": {
        "cpu-count": {
          "description": "the CPU core number need to use, only set it when action is stress",
          "type": "integer",
          "format": "int32"
        },
        "mem-type": {
          "description": "the memory type need to locate, only set it when action is stress, the value can be 'stack' or 'heap'",
          "type": "string"
        },
        "pid": {
          "description": "the pid of Java process which needs to attach",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "the port of agent server, default 9277",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "JVMStressSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.KafkaCommonSpec": {
      "type": "object",
      "properties": {
        "host": {
          "description": "The host of kafka server",
          "type": "string"
        },
        "password": {
          "description": "The password of kafka client",
          "type": "string"
        },
        "port": {
          "description": "The port of kafka server",
          "type": "integer",
          "format": "int32"
        },
        "topic": {
          "description": "The topic to attack",
          "type": "string"
        },
        "username": {
          "description": "The username of kafka client",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "KafkaCommonSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.KafkaFillSpec": {
      "type": "object",
      "properties": {
        "host": {
          "description": "The host of kafka server",
          "type": "string"
        },
        "maxBytes": {
          "description": "The max bytes to fill",
          "type": "integer",
          "format": "int64"
        },
        "messageSize": {
          "description": "The size of each message",
          "type": "integer",
          "format": "int32"
        },
        "password": {
          "description": "The password of kafka client",
          "type": "string"
        },
        "port": {
          "description": "The port of kafka server",
          "type": "integer",
          "format": "int32"
        },
        "reloadCommand": {
          "description": "The command to reload kafka config",
          "type": "string"
        },
        "topic": {
          "description": "The topic to attack",
          "type": "string"
        },
        "username": {
          "description": "The username of kafka client",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "KafkaFillSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.KafkaFloodSpec": {
      "type": "object",
      "properties": {
        "host": {
          "description": "The host of kafka server",
          "type": "string"
        },
        "messageSize": {
          "description": "The size of each message",
          "type": "integer",
          "format": "int32"
        },
        "password": {
          "description": "The password of kafka client",
          "type": "string"
        },
        "port": {
          "description": "The port of kafka server",
          "type": "integer",
          "format": "int32"
        },
        "threads": {
          "description": "The number of worker threads",
          "type": "integer",
          "format": "int32"
        },
        "topic": {
          "description": "The topic to attack",
          "type": "string"
        },
        "username": {
          "description": "The username of kafka client",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "KafkaFloodSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.KafkaIOSpec": {
      "type": "object",
      "properties": {
        "configFile": {
          "description": "The path of server config",
          "type": "string"
        },
        "nonReadable": {
          "description": "Make kafka cluster non-readable",
          "type": "boolean"
        },
        "nonWritable": {
          "description": "Make kafka cluster non-writable",
          "type": "boolean"
        },
        "topic": {
          "description": "The topic to attack",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "KafkaIOSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.KernelChaos": {
      "description": "KernelChaos is the Schema for the kernelchaos API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a kernel chaos experiment",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KernelChaosSpec"
        },
        "status": {
          "description": "Most recently observed status of the kernel chaos experiment",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KernelChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "KernelChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.KernelChaosList": {
      "description": "KernelChaosList contains a list of KernelChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KernelChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "KernelChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.KernelChaosSpec": {
      "description": "KernelChaosSpec defines the desired state of KernelChaos",
      "type": "object",
      "required": [
        "selector",
        "mode",
        "failKernRequest"
      ],
      "properties": {
        "containerNames": {
          "description": "ContainerNames indicates list of the name of affected container. If not set, the first container will be injected",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action",
          "type": "string"
        },
        "failKernRequest": {
          "description": "FailKernRequest defines the request of kernel injection",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FailKernRequest"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "KernelChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.KernelChaosStatus": {
      "description": "KernelChaosStatus defines the observed state of KernelChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "KernelChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.LossSpec": {
      "description": "LossSpec defines detail of a loss action",
      "type": "object",
      "required": [
        "loss"
      ],
      "properties": {
        "correlation": {
          "type": "string"
        },
        "loss": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "LossSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.MemoryStressor": {
      "description": "MemoryStressor defines how to stress memory out",
      "type": "object",
      "required": [
        "workers"
      ],
      "properties": {
        "oomScoreAdj": {
          "description": "OOMScoreAdj sets the oom_score_adj of the stress process. See `man 5 proc` to know more about this option.",
          "type": "integer",
          "format": "int32"
        },
        "options": {
          "description": "extend stress-ng options",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "size": {
          "description": "Size specifies N bytes consumed per vm worker, default is the total available memory. One can specify the size as % of total available memory or in units of B, KB/KiB, MB/MiB, GB/GiB, TB/TiB.",
          "type": "string"
        },
        "workers": {
          "description": "Workers specifies N workers to apply the stressor. Maximum 8192 workers can run by stress-ng",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "MemoryStressor",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.MistakeSpec": {
      "description": "MistakeSpec represents one type of mistake",
      "type": "object",
      "properties": {
        "filling": {
          "description": "Filling determines what is filled in the mistake data.",
          "type": "string"
        },
        "maxLength": {
          "description": "Max length of each wrong data segment in bytes",
          "type": "integer",
          "format": "int64"
        },
        "maxOccurrences": {
          "description": "There will be [1, MaxOccurrences] segments of wrong data.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "MistakeSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkBandwidthSpec": {
      "type": "object",
      "required": [
        "rate",
        "limit",
        "buffer"
      ],
      "properties": {
        "buffer": {
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "device": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "ip-address": {
          "type": "string"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "minburst": {
          "type": "integer",
          "format": "int64"
        },
        "peakrate": {
          "type": "integer",
          "format": "int64"
        },
        "rate": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkBandwidthSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkChaos": {
      "description": "NetworkChaos is the Schema for the networkchaos API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a pod chaos experiment",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkChaosSpec"
        },
        "status": {
          "description": "Most recently observed status of the chaos experiment about pods",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkChaosList": {
      "description": "NetworkChaosList contains a list of NetworkChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkChaosSpec": {
      "description": "NetworkChaosSpec defines the desired state of NetworkChaos",
      "type": "object",
      "required": [
        "selector",
        "mode",
        "action"
      ],
      "properties": {
        "action": {
          "description": "Action defines the specific network chaos action. Supported action: partition, netem, delay, loss, duplicate, corrupt Default action: delay",
          "type": "string",
          "default": ""
        },
        "bandwidth": {
          "description": "Bandwidth represents the detail about bandwidth control action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BandwidthSpec"
        },
        "corrupt": {
          "description": "Corrupt represents the detail about corrupt action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.CorruptSpec"
        },
        "delay": {
          "description": "Delay represents the detail about delay action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DelaySpec"
        },
        "device": {
          "description": "Device represents the network device to be affected.",
          "type": "string"
        },
        "direction": {
          "description": "Direction represents the direction, this applies on netem and network partition action",
          "type": "string"
        },
        "duplicate": {
          "description": "DuplicateSpec represents the detail about loss action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DuplicateSpec"
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action",
          "type": "string"
        },
        "externalTargets": {
          "description": "ExternalTargets represents network targets outside k8s",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "loss": {
          "description": "Loss represents the detail about loss action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.LossSpec"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "rate": {
          "description": "Rate represents the detail about rate control action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RateSpec"
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "target": {
          "description": "Target represents network target, this applies on netem and network partition action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelector"
        },
        "targetDevice": {
          "description": "TargetDevice represents the network device to be affected in target scope.",
          "type": "string"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkChaosStatus": {
      "description": "NetworkChaosStatus defines the observed state of NetworkChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        },
        "instances": {
          "description": "Instances always specifies podnetworkchaos generation or empty",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkCommonSpec": {
      "type": "object",
      "properties": {
        "correlation": {
          "description": "correlation is percentage (10 is 10%)",
          "type": "string"
        },
        "device": {
          "description": "the network interface to impact",
          "type": "string"
        },
        "egress-port": {
          "description": "only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp",
          "type": "string"
        },
        "hostname": {
          "description": "only impact traffic to these hostnames",
          "type": "string"
        },
        "ip-address": {
          "description": "only impact egress traffic to these IP addresses",
          "type": "string"
        },
        "ip-protocol": {
          "description": "only impact traffic using this IP protocol, supported: tcp, udp, icmp, all",
          "type": "string"
        },
        "source-port": {
          "description": "only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkCommonSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkCorruptSpec": {
      "type": "object",
      "properties": {
        "correlation": {
          "description": "correlation is percentage (10 is 10%)",
          "type": "string"
        },
        "device": {
          "description": "the network interface to impact",
          "type": "string"
        },
        "egress-port": {
          "description": "only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp",
          "type": "string"
        },
        "hostname": {
          "description": "only impact traffic to these hostnames",
          "type": "string"
        },
        "ip-address": {
          "description": "only impact egress traffic to these IP addresses",
          "type": "string"
        },
        "ip-protocol": {
          "description": "only impact traffic using this IP protocol, supported: tcp, udp, icmp, all",
          "type": "string"
        },
        "percent": {
          "description": "percentage of packets to corrupt (10 is 10%)",
          "type": "string"
        },
        "source-port": {
          "description": "only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkCorruptSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkDNSSpec": {
      "type": "object",
      "properties": {
        "dns-domain-name": {
          "description": "map this host to specified IP",
          "type": "string"
        },
        "dns-ip": {
          "description": "map specified host to this IP address",
          "type": "string"
        },
        "dns-server": {
          "description": "update the DNS server in /etc/resolv.conf with this value",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkDNSSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkDelaySpec": {
      "type": "object",
      "properties": {
        "accept-tcp-flags": {
          "description": "only the packet which match the tcp flag can be accepted, others will be dropped. only set when the IPProtocol is tcp, used for partition.",
          "type": "string"
        },
        "correlation": {
          "description": "correlation is percentage (10 is 10%)",
          "type": "string"
        },
        "device": {
          "description": "the network interface to impact",
          "type": "string"
        },
        "egress-port": {
          "description": "only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp",
          "type": "string"
        },
        "hostname": {
          "description": "only impact traffic to these hostnames",
          "type": "string"
        },
        "ip-address": {
          "description": "only impact egress traffic to these IP addresses",
          "type": "string"
        },
        "ip-protocol": {
          "description": "only impact traffic using this IP protocol, supported: tcp, udp, icmp, all",
          "type": "string"
        },
        "jitter": {
          "description": "jitter time, time units: ns, us (or µs), ms, s, m, h.",
          "type": "string"
        },
        "latency": {
          "description": "delay egress time, time units: ns, us (or µs), ms, s, m, h.",
          "type": "string"
        },
        "source-port": {
          "description": "only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkDelaySpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkDownSpec": {
      "type": "object",
      "properties": {
        "device": {
          "description": "The network interface to impact",
          "type": "string"
        },
        "duration": {
          "description": "NIC down time, time units: ns, us (or µs), ms, s, m, h.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkDownSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkDuplicateSpec": {
      "type": "object",
      "properties": {
        "correlation": {
          "description": "correlation is percentage (10 is 10%)",
          "type": "string"
        },
        "device": {
          "description": "the network interface to impact",
          "type": "string"
        },
        "egress-port": {
          "description": "only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp",
          "type": "string"
        },
        "hostname": {
          "description": "only impact traffic to these hostnames",
          "type": "string"
        },
        "ip-address": {
          "description": "only impact egress traffic to these IP addresses",
          "type": "string"
        },
        "ip-protocol": {
          "description": "only impact traffic using this IP protocol, supported: tcp, udp, icmp, all",
          "type": "string"
        },
        "percent": {
          "description": "percentage of packets to duplicate (10 is 10%)",
          "type": "string"
        },
        "source-port": {
          "description": "only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkDuplicateSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkFloodSpec": {
      "type": "object",
      "required": [
        "rate",
        "duration"
      ],
      "properties": {
        "duration": {
          "description": "The number of seconds to run the iperf test",
          "type": "string",
          "default": ""
        },
        "ip-address": {
          "description": "Generate traffic to this IP address",
          "type": "string"
        },
        "parallel": {
          "description": "The number of iperf parallel client threads to run",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "Generate traffic to this port on the IP address",
          "type": "string"
        },
        "rate": {
          "description": "The speed of network traffic, allows bps, kbps, mbps, gbps, tbps unit. bps means bytes per second",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkFloodSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkLossSpec": {
      "type": "object",
      "properties": {
        "correlation": {
          "description": "correlation is percentage (10 is 10%)",
          "type": "string"
        },
        "device": {
          "description": "the network interface to impact",
          "type": "string"
        },
        "egress-port": {
          "description": "only impact egress traffic to these destination ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp",
          "type": "string"
        },
        "hostname": {
          "description": "only impact traffic to these hostnames",
          "type": "string"
        },
        "ip-address": {
          "description": "only impact egress traffic to these IP addresses",
          "type": "string"
        },
        "ip-protocol": {
          "description": "only impact traffic using this IP protocol, supported: tcp, udp, icmp, all",
          "type": "string"
        },
        "percent": {
          "description": "percentage of packets to loss (10 is 10%)",
          "type": "string"
        },
        "source-port": {
          "description": "only impact egress traffic from these source ports, use a ',' to separate or to indicate the range, such as 80, 8001:8010. it can only be used in conjunction with -p tcp or -p udp",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkLossSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.NetworkPartitionSpec": {
      "type": "object",
      "properties": {
        "accept-tcp-flags": {
          "description": "only the packet which match the tcp flag can be accepted, others will be dropped. only set when the IPProtocol is tcp, used for partition.",
          "type": "string"
        },
        "device": {
          "description": "the network interface to impact",
          "type": "string"
        },
        "direction": {
          "description": "specifies the partition direction, values can be 'from', 'to'. 'from' means packets coming from the 'IPAddress' or 'Hostname' and going to your server, 'to' means packets originating from your server and going to the 'IPAddress' or 'Hostname'.",
          "type": "string"
        },
        "hostname": {
          "description": "only impact traffic to these hostnames",
          "type": "string"
        },
        "ip-address": {
          "description": "only impact egress traffic to these IP addresses",
          "type": "string"
        },
        "ip-protocol": {
          "description": "only impact egress traffic to these IP addresses",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "NetworkPartitionSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PMJVMMySQLSpec": {
      "type": "object",
      "properties": {
        "database": {
          "description": "the match database default value is \"\", means match all database",
          "type": "string"
        },
        "exception": {
          "description": "The exception which needs to throw for action `exception` or the exception message needs to throw in action `mysql`",
          "type": "string"
        },
        "latency": {
          "description": "The latency duration for action 'latency' or the latency duration in action `mysql`",
          "type": "integer",
          "format": "int32"
        },
        "mysqlConnectorVersion": {
          "description": "the version of mysql-connector-java, only support 5.X.X(set to \"5\") and 8.X.X(set to \"8\") now",
          "type": "string"
        },
        "pid": {
          "description": "the pid of Java process which needs to attach",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "the port of agent server, default 9277",
          "type": "integer",
          "format": "int32"
        },
        "sqlType": {
          "description": "the match sql type default value is \"\", means match all SQL type. The value can be 'select', 'insert', 'update', 'delete', 'replace'.",
          "type": "string"
        },
        "table": {
          "description": "the match table default value is \"\", means match all table",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PMJVMMySQLSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PhysicalMachine": {
      "description": "PhysicalMachine is the Schema for the physical machine API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a physical machine",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachineSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PhysicalMachine",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PhysicalMachineChaos": {
      "description": "PhysicalMachineChaos is the Schema for the physical machine chaos API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a physical machine chaos experiment",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachineChaosSpec"
        },
        "status": {
          "description": "Most recently observed status of the chaos experiment",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachineChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PhysicalMachineChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PhysicalMachineChaosList": {
      "description": "PhysicalMachineChaosList contains a list of PhysicalMachineChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachineChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PhysicalMachineChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PhysicalMachineChaosSpec": {
      "description": "PhysicalMachineChaosSpec defines the desired state of PhysicalMachineChaos",
      "type": "object",
      "required": [
        "action",
        "mode"
      ],
      "properties": {
        "action": {
          "type": "string",
          "default": ""
        },
        "address": {
          "description": "DEPRECATED: Use Selector instead. Only one of Address and Selector could be specified.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "clock": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ClockSpec"
        },
        "disk-fill": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DiskFillSpec"
        },
        "disk-read-payload": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DiskPayloadSpec"
        },
        "disk-write-payload": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DiskPayloadSpec"
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action",
          "type": "string"
        },
        "file-append": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FileAppendSpec"
        },
        "file-create": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FileCreateSpec"
        },
        "file-delete": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FileDeleteSpec"
        },
        "file-modify": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FileModifyPrivilegeSpec"
        },
        "file-rename": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FileRenameSpec"
        },
        "file-replace": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.FileReplaceSpec"
        },
        "http-abort": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPAbortSpec"
        },
        "http-config": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPConfigSpec"
        },
        "http-delay": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPDelaySpec"
        },
        "http-request": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPRequestSpec"
        },
        "jvm-exception": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMExceptionSpec"
        },
        "jvm-gc": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMGCSpec"
        },
        "jvm-latency": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMLatencySpec"
        },
        "jvm-mysql": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PMJVMMySQLSpec"
        },
        "jvm-return": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMReturnSpec"
        },
        "jvm-rule-data": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMRuleDataSpec"
        },
        "jvm-stress": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMStressSpec"
        },
        "kafka-fill": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KafkaFillSpec"
        },
        "kafka-flood": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KafkaFloodSpec"
        },
        "kafka-io": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KafkaIOSpec"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "network-bandwidth": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkBandwidthSpec"
        },
        "network-corrupt": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkCorruptSpec"
        },
        "network-delay": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkDelaySpec"
        },
        "network-dns": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkDNSSpec"
        },
        "network-down": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkDownSpec"
        },
        "network-duplicate": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkDuplicateSpec"
        },
        "network-flood": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkFloodSpec"
        },
        "network-loss": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkLossSpec"
        },
        "network-partition": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkPartitionSpec"
        },
        "process": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ProcessSpec"
        },
        "redis-cacheLimit": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RedisCacheLimitSpec"
        },
        "redis-expiration": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RedisExpirationSpec"
        },
        "redis-penetration": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RedisPenetrationSpec"
        },
        "redis-restart": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RedisSentinelRestartSpec"
        },
        "redis-stop": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RedisSentinelStopSpec"
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "selector": {
          "description": "Selector is used to select physical machines that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachineSelectorSpec"
        },
        "stress-cpu": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressCPUSpec"
        },
        "stress-mem": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressMemorySpec"
        },
        "user_defined": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.UserDefinedSpec"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of physical machines to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of physical machines the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        },
        "vm": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.VMSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PhysicalMachineChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PhysicalMachineChaosStatus": {
      "description": "PhysicalMachineChaosStatus defines the observed state of PhysicalMachineChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PhysicalMachineChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PhysicalMachineList": {
      "description": "PhysicalMachineList contains a list of PhysicalMachine",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachine"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PhysicalMachineList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PhysicalMachineSelector": {
      "type": "object",
      "required": [
        "mode"
      ],
      "properties": {
        "address": {
          "description": "DEPRECATED: Use Selector instead. Only one of Address and Selector could be specified.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "selector": {
          "description": "Selector is used to select physical machines that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachineSelectorSpec"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of physical machines to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of physical machines the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PhysicalMachineSelector",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PhysicalMachineSelectorSpec": {
      "description": "PhysicalMachineSelectorSpec defines some selectors to select objects. If the all selectors are empty, all objects will be used in chaos experiment.",
      "type": "object",
      "properties": {
        "annotationSelectors": {
          "description": "Map of string keys and values that can be used to select objects. A selector based on annotations.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "fieldSelectors": {
          "description": "Map of string keys and values that can be used to select objects. A selector based on fields.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "labelSelectors": {
          "description": "Map of string keys and values that can be used to select objects. A selector based on labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "namespaces": {
          "description": "Namespaces is a set of namespace to which objects belong.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "physicalMachines": {
          "description": "PhysicalMachines is a map of string keys and a set values that used to select physical machines. The key defines the namespace which physical machine belong, and each value is a set of physical machine names.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string",
              "default": ""
            }
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PhysicalMachineSelectorSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PhysicalMachineSpec": {
      "description": "PhysicalMachineSpec defines the desired state of PhysicalMachine",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "Address represents the address of the physical machine",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PhysicalMachineSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodChaos": {
      "description": "PodChaos is the control script`s spec.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a pod chaos experiment",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodChaosSpec"
        },
        "status": {
          "description": "Most recently observed status of the chaos experiment about pods",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodChaosList": {
      "description": "PodChaosList contains a list of PodChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodChaosSpec": {
      "description": "PodChaosSpec defines the attributes that a user creates on a chaos experiment about pods.",
      "type": "object",
      "required": [
        "selector",
        "mode",
        "action"
      ],
      "properties": {
        "action": {
          "description": "Action defines the specific pod chaos action. Supported action: pod-kill / pod-failure / container-kill Default action: pod-kill",
          "type": "string",
          "default": ""
        },
        "containerNames": {
          "description": "ContainerNames indicates list of the name of affected container. If not set, the first container will be injected",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action. It is required when the action is `PodFailureAction`. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".",
          "type": "string"
        },
        "gracePeriod": {
          "description": "GracePeriod is used in pod-kill action. It represents the duration in seconds before the pod should be deleted. Value must be non-negative integer. The default value is zero that indicates delete immediately.",
          "type": "integer",
          "format": "int64"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodChaosStatus": {
      "description": "PodChaosStatus represents the current status of the chaos experiment about pods.",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodHttpChaos": {
      "description": "PodHttpChaos is the Schema for the podhttpchaos API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodHttpChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodHttpChaosActions": {
      "description": "PodHttpChaosActions defines possible actions of HttpChaos.",
      "type": "object",
      "properties": {
        "abort": {
          "description": "Abort is a rule to abort a http session.",
          "type": "boolean"
        },
        "delay": {
          "description": "Delay represents the delay of the target request/response. A duration string is a possibly unsigned sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".",
          "type": "string"
        },
        "patch": {
          "description": "Patch is a rule to patch some contents in target.",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosPatchActions"
        },
        "replace": {
          "description": "Replace is a rule to replace some contents in target.",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosReplaceActions"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodHttpChaosActions",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodHttpChaosBaseRule": {
      "description": "PodHttpChaosBaseRule defines the injection rule without source and port.",
      "type": "object",
      "required": [
        "target",
        "selector",
        "actions"
      ],
      "properties": {
        "actions": {
          "description": "Actions contains rules to inject target.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosActions"
        },
        "selector": {
          "description": "Selector contains the rules to select target.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosSelector"
        },
        "target": {
          "description": "Target is the object to be selected and injected, \u003cRequest|Response\u003e.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodHttpChaosBaseRule",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodHttpChaosList": {
      "description": "PodHttpChaosList contains a list of PodHttpChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodHttpChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodHttpChaosPatchActions": {
      "description": "PodHttpChaosPatchActions defines possible patch-actions of HttpChaos.",
      "type": "object",
      "properties": {
        "body": {
          "description": "Body is a rule to patch message body of target.",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosPatchBodyAction"
        },
        "headers": {
          "description": "Headers is a rule to append http headers of target. For example: `[[\"Set-Cookie\", \"\u003cone cookie\u003e\"], [\"Set-Cookie\", \"\u003canother cookie\u003e\"]]`.",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "default": ""
            }
          }
        },
        "queries": {
          "description": "Queries is a rule to append uri queries of target(Request only). For example: `[[\"foo\", \"bar\"], [\"foo\", \"unknown\"]]`.",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "default": ""
            }
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodHttpChaosPatchActions",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodHttpChaosPatchBodyAction": {
      "description": "PodHttpChaosPatchBodyAction defines patch body action of HttpChaos.",
      "type": "object",
      "required": [
        "type",
        "value"
      ],
      "properties": {
        "type": {
          "description": "Type represents the patch type, only support `JSON` as [merge patch json](https://tools.ietf.org/html/rfc7396) currently.",
          "type": "string",
          "default": ""
        },
        "value": {
          "description": "Value is the patch contents.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodHttpChaosPatchBodyAction",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodHttpChaosReplaceActions": {
      "description": "PodHttpChaosReplaceActions defines possible replace-actions of HttpChaos.",
      "type": "object",
      "properties": {
        "body": {
          "description": "Body is a rule to replace http message body in target.",
          "type": "string",
          "format": "byte"
        },
        "code": {
          "description": "Code is a rule to replace http status code in response.",
          "type": "integer",
          "format": "int32"
        },
        "headers": {
          "description": "Headers is a rule to replace http headers of target. The key-value pairs represent header name and header value pairs.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "method": {
          "description": "Method is a rule to replace http method in request.",
          "type": "string"
        },
        "path": {
          "description": "Path is rule to to replace uri path in http request.",
          "type": "string"
        },
        "queries": {
          "description": "Queries is a rule to replace uri queries in http request. For example, with value `{ \"foo\": \"unknown\" }`, the `/?foo=bar` will be altered to `/?foo=unknown`,",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodHttpChaosReplaceActions",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodHttpChaosRule": {
      "description": "PodHttpChaosRule defines the injection rule for http.",
      "type": "object",
      "required": [
        "target",
        "selector",
        "actions",
        "port"
      ],
      "properties": {
        "actions": {
          "description": "Actions contains rules to inject target.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosActions"
        },
        "port": {
          "description": "Port represents the target port to be proxy of.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "selector": {
          "description": "Selector contains the rules to select target.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosSelector"
        },
        "source": {
          "description": "Source represents the source of current rules",
          "type": "string"
        },
        "target": {
          "description": "Target is the object to be selected and injected, \u003cRequest|Response\u003e.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodHttpChaosRule",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodHttpChaosSelector": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Code is a rule to select target by http status code in response.",
          "type": "integer",
          "format": "int32"
        },
        "method": {
          "description": "Method is a rule to select target by http method in request.",
          "type": "string"
        },
        "path": {
          "description": "Path is a rule to select target by uri path in http request.",
          "type": "string"
        },
        "port": {
          "description": "Port is a rule to select server listening on specific port.",
          "type": "integer",
          "format": "int32"
        },
        "request_headers": {
          "description": "RequestHeaders is a rule to select target by http headers in request. The key-value pairs represent header name and header value pairs.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "response_headers": {
          "description": "ResponseHeaders is a rule to select target by http headers in response. The key-value pairs represent header name and header value pairs.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodHttpChaosSelector",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodHttpChaosSpec": {
      "description": "PodHttpChaosSpec defines the desired state of PodHttpChaos.",
      "type": "object",
      "properties": {
        "rules": {
          "description": "Rules are a list of injection rule for http request.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosRule"
          }
        },
        "tls": {
          "description": "TLS is the tls config, will be override if there are multiple HTTPChaos experiments are applied",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodHttpChaosTLS"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodHttpChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodHttpChaosStatus": {
      "description": "PodHttpChaosStatus defines the actual state of PodHttpChaos.",
      "type": "object",
      "properties": {
        "failedMessage": {
          "type": "string"
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64"
        },
        "pid": {
          "description": "Pid represents a running tproxy process id.",
          "type": "integer",
          "format": "int64"
        },
        "startTime": {
          "description": "StartTime represents the start time of a tproxy process.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodHttpChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodHttpChaosTLS": {
      "description": "PodHttpChaosTLS contains the tls config for HTTPChaos",
      "type": "object",
      "required": [
        "secretName",
        "secretNamespace",
        "certName",
        "keyName"
      ],
      "properties": {
        "caName": {
          "description": "CAName represents the data name of ca file in secret, `ca.crt` for example",
          "type": "string"
        },
        "certName": {
          "description": "CertName represents the data name of cert file in secret, `tls.crt` for example",
          "type": "string",
          "default": ""
        },
        "keyName": {
          "description": "KeyName represents the data name of key file in secret, `tls.key` for example",
          "type": "string",
          "default": ""
        },
        "secretName": {
          "description": "SecretName represents the name of required secret resource",
          "type": "string",
          "default": ""
        },
        "secretNamespace": {
          "description": "SecretNamespace represents the namespace of required secret resource",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodHttpChaosTLS",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodIOChaos": {
      "description": "PodIOChaos is the Schema for the podiochaos API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodIOChaosSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodIOChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodIOChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodIOChaosList": {
      "description": "PodIOChaosList contains a list of PodIOChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodIOChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodIOChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodIOChaosSpec": {
      "description": "PodIOChaosSpec defines the desired state of IOChaos",
      "type": "object",
      "required": [
        "volumeMountPath"
      ],
      "properties": {
        "actions": {
          "description": "Actions are a list of IOChaos actions",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.IOChaosAction"
          }
        },
        "container": {
          "type": "string"
        },
        "volumeMountPath": {
          "description": "VolumeMountPath represents the target mount path It must be a root of mount path now.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodIOChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodIOChaosStatus": {
      "type": "object",
      "properties": {
        "failedMessage": {
          "type": "string"
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64"
        },
        "pid": {
          "description": "Pid represents a running toda process id",
          "type": "integer",
          "format": "int64"
        },
        "startTime": {
          "description": "StartTime represents the start time of a toda process",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodIOChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodNetworkChaos": {
      "description": "PodNetworkChaos is the Schema for the PodNetworkChaos API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a pod chaos experiment",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodNetworkChaosSpec"
        },
        "status": {
          "description": "Most recently observed status of the chaos experiment about pods",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodNetworkChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodNetworkChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodNetworkChaosList": {
      "description": "PodNetworkChaosList contains a list of PodNetworkChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodNetworkChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodNetworkChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodNetworkChaosSpec": {
      "description": "PodNetworkChaosSpec defines the desired state of PodNetworkChaos",
      "type": "object",
      "properties": {
        "ipsets": {
          "description": "The ipset on the pod",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RawIPSet"
          }
        },
        "iptables": {
          "description": "The iptables rules on the pod",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RawIptables"
          }
        },
        "tcs": {
          "description": "The tc rules on the pod",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RawTrafficControl"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodNetworkChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodNetworkChaosStatus": {
      "description": "PodNetworkChaosStatus defines the observed state of PodNetworkChaos",
      "type": "object",
      "properties": {
        "failedMessage": {
          "type": "string"
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodNetworkChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodSelector": {
      "type": "object",
      "required": [
        "selector",
        "mode"
      ],
      "properties": {
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodSelector",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.PodSelectorSpec": {
      "description": "PodSelectorSpec defines the some selectors to select objects. If the all selectors are empty, all objects will be used in chaos experiment.",
      "type": "object",
      "properties": {
        "annotationSelectors": {
          "description": "Map of string keys and values that can be used to select objects. A selector based on annotations.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "fieldSelectors": {
          "description": "Map of string keys and values that can be used to select objects. A selector based on fields.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "labelSelectors": {
          "description": "Map of string keys and values that can be used to select objects. A selector based on labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "namespaces": {
          "description": "Namespaces is a set of namespace to which objects belong.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "nodeSelectors": {
          "description": "Map of string keys and values that can be used to select nodes. Selector which must match a node's labels, and objects must belong to these selected nodes.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "nodes": {
          "description": "Nodes is a set of node name and objects must belong to these nodes.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "podPhaseSelectors": {
          "description": "PodPhaseSelectors is a set of condition of a pod at the current time. supported value: Pending / Running / Succeeded / Failed / Unknown",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "pods": {
          "description": "Pods is a map of string keys and a set values that used to select pods. The key defines the namespace which pods belong, and the each values is a set of pod names.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string",
              "default": ""
            }
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "PodSelectorSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ProcessSpec": {
      "type": "object",
      "properties": {
        "process": {
          "description": "the process name or the process ID",
          "type": "string"
        },
        "recoverCmd": {
          "description": "the command to be run when recovering experiment",
          "type": "string"
        },
        "signal": {
          "description": "the signal number to send",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ProcessSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RateSpec": {
      "description": "RateSpec defines details of rate limit.",
      "type": "object",
      "required": [
        "rate"
      ],
      "properties": {
        "rate": {
          "description": "Rate is the speed knob. Allows bit, kbit, mbit, gbit, tbit, bps, kbps, mbps, gbps, tbps unit. bps means bytes per second.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RateSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RawIPSet": {
      "description": "RawIPSet represents an ipset on specific pod",
      "type": "object",
      "required": [
        "name",
        "ipsetType",
        "source"
      ],
      "properties": {
        "cidrAndPorts": {
          "description": "The contents of ipset. Only available when IPSetType is NetPortIPSet.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.CidrAndPort"
          }
        },
        "cidrs": {
          "description": "The contents of ipset. Only available when IPSetType is NetIPSet.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "ipsetType": {
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "The name of ipset",
          "type": "string",
          "default": ""
        },
        "setNames": {
          "description": "The contents of ipset. Only available when IPSetType is SetIPSet.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "source": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RawIPSet",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RawIptables": {
      "description": "RawIptables represents the iptables rules on specific pod",
      "type": "object",
      "required": [
        "name",
        "direction",
        "source"
      ],
      "properties": {
        "device": {
          "description": "Device represents the network device to be affected.",
          "type": "string"
        },
        "direction": {
          "description": "The block direction of this iptables rule",
          "type": "string",
          "default": ""
        },
        "ipsets": {
          "description": "The name of related ipset",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "name": {
          "description": "The name of iptables chain",
          "type": "string",
          "default": ""
        },
        "source": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RawIptables",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RawRuleSource": {
      "description": "RawRuleSource represents the name and namespace of the source network chaos",
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RawRuleSource",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RawTrafficControl": {
      "description": "RawTrafficControl represents the traffic control chaos on specific pod",
      "type": "object",
      "required": [
        "type",
        "source"
      ],
      "properties": {
        "bandwidth": {
          "description": "Bandwidth represents the detail about bandwidth control action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BandwidthSpec"
        },
        "corrupt": {
          "description": "Corrupt represents the detail about corrupt action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.CorruptSpec"
        },
        "delay": {
          "description": "Delay represents the detail about delay action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DelaySpec"
        },
        "device": {
          "description": "Device represents the network device to be affected.",
          "type": "string"
        },
        "duplicate": {
          "description": "DuplicateSpec represents the detail about loss action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DuplicateSpec"
        },
        "ipset": {
          "description": "The name of target ipset",
          "type": "string"
        },
        "loss": {
          "description": "Loss represents the detail about loss action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.LossSpec"
        },
        "rate": {
          "description": "Rate represents the detail about rate control action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RateSpec"
        },
        "source": {
          "description": "The name and namespace of the source network chaos",
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "The type of traffic control",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RawTrafficControl",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.Record": {
      "type": "object",
      "required": [
        "id",
        "selectorKey",
        "phase",
        "injectedCount",
        "recoveredCount"
      ],
      "properties": {
        "events": {
          "description": "Events are the essential details about the injections and recoveries",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RecordEvent"
          }
        },
        "id": {
          "type": "string",
          "default": ""
        },
        "injectedCount": {
          "description": "InjectedCount is a counter to record the sum of successful injections",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "phase": {
          "type": "string",
          "default": ""
        },
        "recoveredCount": {
          "description": "RecoveredCount is a counter to record the sum of successful recoveries",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "selectorKey": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "Record",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RecordEvent": {
      "type": "object",
      "required": [
        "type",
        "operation",
        "timestamp"
      ],
      "properties": {
        "message": {
          "description": "Message is the detail message, e.g. the reason why we failed to inject the chaos",
          "type": "string"
        },
        "operation": {
          "description": "Operation represents the operation we are doing, when we crate this event",
          "type": "string",
          "default": ""
        },
        "timestamp": {
          "description": "Timestamp is time when we create this event",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "type": {
          "description": "Type means the stage of this event",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RecordEvent",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RedisCacheLimitSpec": {
      "type": "object",
      "properties": {
        "addr": {
          "description": "The adress of Redis server",
          "type": "string"
        },
        "cacheSize": {
          "description": "The size of `maxmemory`",
          "type": "string"
        },
        "password": {
          "description": "The password of Redis server",
          "type": "string"
        },
        "percent": {
          "description": "Specifies maxmemory as a percentage of the original value",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RedisCacheLimitSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RedisCommonSpec": {
      "type": "object",
      "properties": {
        "addr": {
          "description": "The adress of Redis server",
          "type": "string"
        },
        "password": {
          "description": "The password of Redis server",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RedisCommonSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RedisExpirationSpec": {
      "type": "object",
      "properties": {
        "addr": {
          "description": "The adress of Redis server",
          "type": "string"
        },
        "expiration": {
          "description": "The expiration of the keys",
          "type": "string"
        },
        "key": {
          "description": "The keys to be expired",
          "type": "string"
        },
        "option": {
          "description": "Additional options for `expiration`",
          "type": "string"
        },
        "password": {
          "description": "The password of Redis server",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RedisExpirationSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RedisPenetrationSpec": {
      "type": "object",
      "properties": {
        "addr": {
          "description": "The adress of Redis server",
          "type": "string"
        },
        "password": {
          "description": "The password of Redis server",
          "type": "string"
        },
        "requestNum": {
          "description": "The number of requests to be sent",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RedisPenetrationSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RedisSentinelRestartSpec": {
      "type": "object",
      "properties": {
        "addr": {
          "description": "The adress of Redis server",
          "type": "string"
        },
        "conf": {
          "description": "The path of Sentinel conf",
          "type": "string"
        },
        "flushConfig": {
          "description": "The control flag determines whether to flush config",
          "type": "boolean"
        },
        "password": {
          "description": "The password of Redis server",
          "type": "string"
        },
        "redisPath": {
          "description": "The path of `redis-server` command-line tool",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RedisSentinelRestartSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RedisSentinelStopSpec": {
      "type": "object",
      "properties": {
        "addr": {
          "description": "The adress of Redis server",
          "type": "string"
        },
        "conf": {
          "description": "The path of Sentinel conf",
          "type": "string"
        },
        "flushConfig": {
          "description": "The control flag determines whether to flush config",
          "type": "boolean"
        },
        "password": {
          "description": "The password of Redis server",
          "type": "string"
        },
        "redisPath": {
          "description": "The path of `redis-server` command-line tool",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RedisSentinelStopSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RemoteCluster": {
      "description": "RemoteCluster defines a remote cluster",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RemoteClusterSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RemoteClusterStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RemoteCluster",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RemoteClusterCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "reason": {
          "type": "string",
          "default": ""
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RemoteClusterCondition",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RemoteClusterKubeConfig": {
      "description": "RemoteClusterKubeConfig refers to a secret by which we'll use to connect remote cluster",
      "type": "object",
      "required": [
        "secretRef"
      ],
      "properties": {
        "secretRef": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RemoteClusterSecretRef"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RemoteClusterKubeConfig",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RemoteClusterList": {
      "description": "RemoteClusterList contains a list of RemoteCluster",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RemoteCluster"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RemoteClusterList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RemoteClusterSecretRef": {
      "description": "RemoteClusterSecretRef refers to a secret in any namespaces",
      "type": "object",
      "required": [
        "namespace",
        "name",
        "key"
      ],
      "properties": {
        "key": {
          "type": "string",
          "default": ""
        },
        "name": {
          "type": "string",
          "default": ""
        },
        "namespace": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RemoteClusterSecretRef",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RemoteClusterSpec": {
      "description": "RemoteClusterSpec defines the specification of a remote cluster",
      "type": "object",
      "required": [
        "namespace",
        "version",
        "kubeConfig"
      ],
      "properties": {
        "configOverride": {
          "type": "string",
          "format": "byte"
        },
        "kubeConfig": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RemoteClusterKubeConfig"
        },
        "namespace": {
          "type": "string",
          "default": ""
        },
        "version": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RemoteClusterSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.RemoteClusterStatus": {
      "type": "object",
      "required": [
        "currentVersion"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current condition of the remote cluster",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RemoteClusterCondition"
          }
        },
        "currentVersion": {
          "type": "string",
          "default": ""
        },
        "observedGeneration": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "RemoteClusterStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ReorderSpec": {
      "description": "ReorderSpec defines details of packet reorder.",
      "type": "object",
      "required": [
        "reorder",
        "gap"
      ],
      "properties": {
        "correlation": {
          "type": "string"
        },
        "gap": {
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "reorder": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ReorderSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.Schedule": {
      "description": "Schedule is the cronly schedule object",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ScheduleSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ScheduleStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "Schedule",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ScheduleItem": {
      "type": "object",
      "properties": {
        "awsChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AWSChaosSpec"
        },
        "azureChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AzureChaosSpec"
        },
        "blockChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BlockChaosSpec"
        },
        "dnsChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DNSChaosSpec"
        },
        "gcpChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.GCPChaosSpec"
        },
        "httpChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPChaosSpec"
        },
        "ioChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.IOChaosSpec"
        },
        "jvmChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMChaosSpec"
        },
        "kernelChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KernelChaosSpec"
        },
        "networkChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkChaosSpec"
        },
        "physicalmachineChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachineChaosSpec"
        },
        "podChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodChaosSpec"
        },
        "stressChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressChaosSpec"
        },
        "timeChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.TimeChaosSpec"
        },
        "workflow": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.WorkflowSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ScheduleItem",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ScheduleList": {
      "description": "ScheduleList contains a list of Schedule",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Schedule"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ScheduleList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ScheduleSpec": {
      "description": "ScheduleSpec is the specification of a schedule object",
      "type": "object",
      "required": [
        "schedule",
        "type"
      ],
      "properties": {
        "awsChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AWSChaosSpec"
        },
        "azureChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AzureChaosSpec"
        },
        "blockChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BlockChaosSpec"
        },
        "concurrencyPolicy": {
          "type": "string",
          "default": ""
        },
        "dnsChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DNSChaosSpec"
        },
        "gcpChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.GCPChaosSpec"
        },
        "historyLimit": {
          "type": "integer",
          "format": "int32"
        },
        "httpChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPChaosSpec"
        },
        "ioChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.IOChaosSpec"
        },
        "jvmChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMChaosSpec"
        },
        "kernelChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KernelChaosSpec"
        },
        "networkChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkChaosSpec"
        },
        "physicalmachineChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachineChaosSpec"
        },
        "podChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodChaosSpec"
        },
        "schedule": {
          "type": "string",
          "default": ""
        },
        "startingDeadlineSeconds": {
          "type": "integer",
          "format": "int64"
        },
        "stressChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressChaosSpec"
        },
        "timeChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.TimeChaosSpec"
        },
        "type": {
          "type": "string",
          "default": ""
        },
        "workflow": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.WorkflowSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ScheduleSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.ScheduleStatus": {
      "description": "ScheduleStatus is the status of a schedule object",
      "type": "object",
      "properties": {
        "active": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          }
        },
        "time": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "ScheduleStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StatusCheck": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a status check",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StatusCheckSpec"
        },
        "status": {
          "description": "Most recently observed status of status check",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StatusCheckStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StatusCheck",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StatusCheckCondition": {
      "type": "object",
      "required": [
        "type",
        "status",
        "reason",
        "lastProbeTime",
        "lastTransitionTime"
      ],
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "reason": {
          "type": "string",
          "default": ""
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StatusCheckCondition",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StatusCheckList": {
      "description": "StatusCheckList contains a list of StatusCheck",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StatusCheck"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StatusCheckList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StatusCheckRecord": {
      "type": "object",
      "required": [
        "startTime",
        "outcome"
      ],
      "properties": {
        "outcome": {
          "type": "string",
          "default": ""
        },
        "startTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StatusCheckRecord",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StatusCheckSpec": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "duration": {
          "description": "Duration defines the duration of the whole status check if the number of failed execution does not exceed the failure threshold. Duration is available to both `Synchronous` and `Continuous` mode. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".",
          "type": "string"
        },
        "failureThreshold": {
          "description": "FailureThreshold defines the minimum consecutive failure for the status check to be considered failed.",
          "type": "integer",
          "format": "int32"
        },
        "http": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPStatusCheck"
        },
        "intervalSeconds": {
          "description": "IntervalSeconds defines how often (in seconds) to perform an execution of status check.",
          "type": "integer",
          "format": "int32"
        },
        "mode": {
          "description": "Mode defines the execution mode of the status check. Support type: Synchronous / Continuous",
          "type": "string"
        },
        "recordsHistoryLimit": {
          "description": "RecordsHistoryLimit defines the number of record to retain.",
          "type": "integer",
          "format": "int32"
        },
        "successThreshold": {
          "description": "SuccessThreshold defines the minimum consecutive successes for the status check to be considered successful. SuccessThreshold only works for `Synchronous` mode.",
          "type": "integer",
          "format": "int32"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds defines the number of seconds after which an execution of status check times out.",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "Type defines the specific status check type. Support type: HTTP",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StatusCheckSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StatusCheckStatus": {
      "type": "object",
      "properties": {
        "completionTime": {
          "description": "CompletionTime represents time when the status check was completed.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "conditions": {
          "description": "Conditions represents the latest available observations of a StatusCheck's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StatusCheckCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "count": {
          "description": "Count represents the total number of the status check executed.",
          "type": "integer",
          "format": "int64"
        },
        "records": {
          "description": "Records contains the history of the execution of StatusCheck.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StatusCheckRecord"
          }
        },
        "startTime": {
          "description": "StartTime represents time when the status check started to execute.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StatusCheckStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StatusCheckTemplate": {
      "description": "StatusCheckTemplate represents a template of status check. A statusCheckTemplate would save in the ConfigMap named `template-status-check-\u003ctemplate-name\u003e`.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "duration": {
          "description": "Duration defines the duration of the whole status check if the number of failed execution does not exceed the failure threshold. Duration is available to both `Synchronous` and `Continuous` mode. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".",
          "type": "string"
        },
        "failureThreshold": {
          "description": "FailureThreshold defines the minimum consecutive failure for the status check to be considered failed.",
          "type": "integer",
          "format": "int32"
        },
        "http": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPStatusCheck"
        },
        "intervalSeconds": {
          "description": "IntervalSeconds defines how often (in seconds) to perform an execution of status check.",
          "type": "integer",
          "format": "int32"
        },
        "mode": {
          "description": "Mode defines the execution mode of the status check. Support type: Synchronous / Continuous",
          "type": "string"
        },
        "recordsHistoryLimit": {
          "description": "RecordsHistoryLimit defines the number of record to retain.",
          "type": "integer",
          "format": "int32"
        },
        "successThreshold": {
          "description": "SuccessThreshold defines the minimum consecutive successes for the status check to be considered successful. SuccessThreshold only works for `Synchronous` mode.",
          "type": "integer",
          "format": "int32"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds defines the number of seconds after which an execution of status check times out.",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "Type defines the specific status check type. Support type: HTTP",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StatusCheckTemplate",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StressCPUSpec": {
      "type": "object",
      "properties": {
        "load": {
          "description": "specifies P percent loading per CPU worker. 0 is effectively a sleep (no load) and 100 is full loading.",
          "type": "integer",
          "format": "int32"
        },
        "options": {
          "description": "extend stress-ng options",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "workers": {
          "description": "specifies N workers to apply the stressor.",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StressCPUSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StressChaos": {
      "description": "StressChaos is the Schema for the stresschaos API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a time chaos experiment",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressChaosSpec"
        },
        "status": {
          "description": "Most recently observed status of the time chaos experiment",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StressChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StressChaosList": {
      "description": "StressChaosList contains a list of StressChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StressChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StressChaosSpec": {
      "description": "StressChaosSpec defines the desired state of StressChaos",
      "type": "object",
      "required": [
        "selector",
        "mode"
      ],
      "properties": {
        "containerNames": {
          "description": "ContainerNames indicates list of the name of affected container. If not set, the first container will be injected",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action",
          "type": "string"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "stressngStressors": {
          "description": "StressngStressors defines plenty of stressors just like `Stressors` except that it's an experimental feature and more powerful. You can define stressors in `stress-ng` (see also `man stress-ng`) dialect, however not all of the supported stressors are well tested. It maybe retired in later releases. You should always use `Stressors` to define the stressors and use this only when you want more stressors unsupported by `Stressors`. When both `StressngStressors` and `Stressors` are defined, `StressngStressors` wins.",
          "type": "string"
        },
        "stressors": {
          "description": "Stressors defines plenty of stressors supported to stress system components out. You can use one or more of them to make up various kinds of stresses. At least one of the stressors should be specified.",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Stressors"
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StressChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StressChaosStatus": {
      "description": "StressChaosStatus defines the observed state of StressChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        },
        "instances": {
          "description": "Instances always specifies stressing instances",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressInstance"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StressChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StressInstance": {
      "description": "StressInstance is an instance generates stresses",
      "type": "object",
      "properties": {
        "memoryStartTime": {
          "description": "MemoryStartTime specifies when the memStress starts",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "memoryUid": {
          "description": "MemoryUID is the memStress identifier",
          "type": "string"
        },
        "startTime": {
          "description": "StartTime specifies when the stress-ng starts",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "uid": {
          "description": "UID is the stress-ng identifier",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StressInstance",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.StressMemorySpec": {
      "type": "object",
      "properties": {
        "options": {
          "description": "extend stress-ng options",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "size": {
          "description": "specifies N bytes consumed per vm worker, default is the total available memory. One can specify the size as % of total available memory or in units of B, KB/KiB, MB/MiB, GB/GiB, TB/TiB..",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "StressMemorySpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.Stressor": {
      "description": "Stressor defines common configurations of a stressor",
      "type": "object",
      "required": [
        "workers"
      ],
      "properties": {
        "workers": {
          "description": "Workers specifies N workers to apply the stressor. Maximum 8192 workers can run by stress-ng",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "Stressor",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.Stressors": {
      "description": "Stressors defines plenty of stressors supported to stress system components out. You can use one or more of them to make up various kinds of stresses",
      "type": "object",
      "properties": {
        "cpu": {
          "description": "CPUStressor stresses CPU out",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.CPUStressor"
        },
        "memory": {
          "description": "MemoryStressor stresses virtual memory out",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.MemoryStressor"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "Stressors",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.Task": {
      "type": "object",
      "properties": {
        "container": {
          "description": "Container is the main container image to run in the pod",
          "$ref": "#/definitions/io.k8s.api.core.v1.Container"
        },
        "volumes": {
          "description": "Volumes is a list of volumes that can be mounted by containers in a template.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "Task",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.TcParameter": {
      "description": "TcParameter represents the parameters for a traffic control chaos",
      "type": "object",
      "properties": {
        "bandwidth": {
          "description": "Bandwidth represents the detail about bandwidth control action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BandwidthSpec"
        },
        "corrupt": {
          "description": "Corrupt represents the detail about corrupt action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.CorruptSpec"
        },
        "delay": {
          "description": "Delay represents the detail about delay action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DelaySpec"
        },
        "duplicate": {
          "description": "DuplicateSpec represents the detail about loss action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DuplicateSpec"
        },
        "loss": {
          "description": "Loss represents the detail about loss action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.LossSpec"
        },
        "rate": {
          "description": "Rate represents the detail about rate control action",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.RateSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "TcParameter",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.Template": {
      "type": "object",
      "required": [
        "name",
        "templateType"
      ],
      "properties": {
        "abortWithStatusCheck": {
          "description": "AbortWithStatusCheck describe whether to abort the workflow when the failure threshold of StatusCheck is exceeded. Only used when Type is TypeStatusCheck.",
          "type": "boolean"
        },
        "awsChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AWSChaosSpec"
        },
        "azureChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AzureChaosSpec"
        },
        "blockChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BlockChaosSpec"
        },
        "children": {
          "description": "Children describes the children steps of serial or parallel node. Only used when Type is TypeSerial or TypeParallel.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "conditionalBranches": {
          "description": "ConditionalBranches describes the conditional branches of custom tasks. Only used when Type is TypeTask.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ConditionalBranch"
          }
        },
        "deadline": {
          "type": "string"
        },
        "dnsChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DNSChaosSpec"
        },
        "gcpChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.GCPChaosSpec"
        },
        "httpChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPChaosSpec"
        },
        "ioChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.IOChaosSpec"
        },
        "jvmChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMChaosSpec"
        },
        "kernelChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KernelChaosSpec"
        },
        "name": {
          "type": "string",
          "default": ""
        },
        "networkChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkChaosSpec"
        },
        "physicalmachineChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachineChaosSpec"
        },
        "podChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodChaosSpec"
        },
        "schedule": {
          "description": "Schedule describe the Schedule(describing scheduled chaos) to be injected with chaos nodes. Only used when Type is TypeSchedule.",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosOnlyScheduleSpec"
        },
        "statusCheck": {
          "description": "StatusCheck describe the behavior of StatusCheck. Only used when Type is TypeStatusCheck.",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StatusCheckSpec"
        },
        "stressChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressChaosSpec"
        },
        "task": {
          "description": "Task describes the behavior of the custom task. Only used when Type is TypeTask.",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Task"
        },
        "templateType": {
          "type": "string",
          "default": ""
        },
        "timeChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.TimeChaosSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "Template",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.TimeChaos": {
      "description": "TimeChaos is the Schema for the timechaos API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a time chaos experiment",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.TimeChaosSpec"
        },
        "status": {
          "description": "Most recently observed status of the time chaos experiment",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.TimeChaosStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "TimeChaos",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.TimeChaosList": {
      "description": "TimeChaosList contains a list of TimeChaos",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.TimeChaos"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "TimeChaosList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.TimeChaosSpec": {
      "description": "TimeChaosSpec defines the desired state of TimeChaos",
      "type": "object",
      "required": [
        "selector",
        "mode",
        "timeOffset"
      ],
      "properties": {
        "clockIds": {
          "description": "ClockIds defines all affected clock id All available options are [\"CLOCK_REALTIME\",\"CLOCK_MONOTONIC\",\"CLOCK_PROCESS_CPUTIME_ID\",\"CLOCK_THREAD_CPUTIME_ID\", \"CLOCK_MONOTONIC_RAW\",\"CLOCK_REALTIME_COARSE\",\"CLOCK_MONOTONIC_COARSE\",\"CLOCK_BOOTTIME\",\"CLOCK_REALTIME_ALARM\", \"CLOCK_BOOTTIME_ALARM\"] Default value is [\"CLOCK_REALTIME\"]",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "containerNames": {
          "description": "ContainerNames indicates list of the name of affected container. If not set, the first container will be injected",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "duration": {
          "description": "Duration represents the duration of the chaos action",
          "type": "string"
        },
        "mode": {
          "description": "Mode defines the mode to run chaos action. Supported mode: one / all / fixed / fixed-percent / random-max-percent",
          "type": "string",
          "default": ""
        },
        "remoteCluster": {
          "description": "RemoteCluster represents the remote cluster where the chaos will be deployed",
          "type": "string"
        },
        "selector": {
          "description": "Selector is used to select pods that are used to inject chaos action.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodSelectorSpec"
        },
        "timeOffset": {
          "description": "TimeOffset defines the delta time of injected program. It's a possibly signed sequence of decimal numbers, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".",
          "type": "string",
          "default": ""
        },
        "value": {
          "description": "Value is required when the mode is set to `FixedMode` / `FixedPercentMode` / `RandomMaxPercentMode`. If `FixedMode`, provide an integer of pods to do chaos action. If `FixedPercentMode`, provide a number from 0-100 to specify the percent of pods the server can do chaos action. IF `RandomMaxPercentMode`,  provide a number from 0-100 to specify the max percent of pods to do chaos action",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "TimeChaosSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.TimeChaosStatus": {
      "description": "TimeChaosStatus defines the observed state of TimeChaos",
      "type": "object",
      "required": [
        "experiment"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the current global condition of the chaos",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ChaosCondition"
          }
        },
        "experiment": {
          "description": "Experiment records the last experiment state.",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ExperimentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "TimeChaosStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.Timespec": {
      "description": "Timespec represents a time",
      "type": "object",
      "required": [
        "sec",
        "nsec"
      ],
      "properties": {
        "nsec": {
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "sec": {
          "type": "integer",
          "format": "int64",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "Timespec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.UserDefinedSpec": {
      "type": "object",
      "properties": {
        "attackCmd": {
          "description": "The command to be executed when attack",
          "type": "string"
        },
        "recoverCmd": {
          "description": "The command to be executed when recover",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "UserDefinedSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.VMSpec": {
      "type": "object",
      "properties": {
        "vm-name": {
          "description": "The name of the VM to be injected",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "VMSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.Workflow": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a workflow",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.WorkflowSpec"
        },
        "status": {
          "description": "Most recently observed status of the workflow",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.WorkflowStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "Workflow",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.WorkflowCondition": {
      "type": "object",
      "required": [
        "type",
        "status",
        "reason"
      ],
      "properties": {
        "reason": {
          "type": "string",
          "default": ""
        },
        "startTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "WorkflowCondition",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.WorkflowList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Workflow"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "WorkflowList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.WorkflowNode": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a node of workflow",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.WorkflowNodeSpec"
        },
        "status": {
          "description": "Most recently observed status of the workflow node",
          "default": {},
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.WorkflowNodeStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "WorkflowNode",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.WorkflowNodeCondition": {
      "type": "object",
      "required": [
        "type",
        "status",
        "reason"
      ],
      "properties": {
        "reason": {
          "type": "string",
          "default": ""
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "WorkflowNodeCondition",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.WorkflowNodeList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.WorkflowNode"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "WorkflowNodeList",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.WorkflowNodeSpec": {
      "type": "object",
      "required": [
        "templateName",
        "workflowName",
        "type",
        "startTime"
      ],
      "properties": {
        "abortWithStatusCheck": {
          "description": "AbortWithStatusCheck describe whether to abort the workflow when the failure threshold of StatusCheck is exceeded. Only used when Type is TypeStatusCheck.",
          "type": "boolean"
        },
        "awsChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AWSChaosSpec"
        },
        "azureChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.AzureChaosSpec"
        },
        "blockChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.BlockChaosSpec"
        },
        "children": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "conditionalBranches": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ConditionalBranch"
          }
        },
        "deadline": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "dnsChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.DNSChaosSpec"
        },
        "gcpChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.GCPChaosSpec"
        },
        "httpChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.HTTPChaosSpec"
        },
        "ioChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.IOChaosSpec"
        },
        "jvmChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.JVMChaosSpec"
        },
        "kernelChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.KernelChaosSpec"
        },
        "networkChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.NetworkChaosSpec"
        },
        "physicalmachineChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PhysicalMachineChaosSpec"
        },
        "podChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.PodChaosSpec"
        },
        "schedule": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ScheduleSpec"
        },
        "startTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "statusCheck": {
          "description": "StatusCheck describe the behavior of StatusCheck. Only used when Type is TypeStatusCheck.",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StatusCheckSpec"
        },
        "stressChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.StressChaosSpec"
        },
        "task": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Task"
        },
        "templateName": {
          "type": "string",
          "default": ""
        },
        "timeChaos": {
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.TimeChaosSpec"
        },
        "type": {
          "type": "string",
          "default": ""
        },
        "workflowName": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "WorkflowNodeSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.WorkflowNodeStatus": {
      "type": "object",
      "properties": {
        "activeChildren": {
          "description": "ActiveChildren means the created children node",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          }
        },
        "chaosResource": {
          "description": "ChaosResource refs to the real chaos CR object.",
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
        },
        "conditionalBranchesStatus": {
          "description": "ConditionalBranchesStatus records the evaluation result of each ConditionalBranch",
          "$ref": "#/definitions/org.chaos-mesh.v1alpha1.ConditionalBranchesStatus"
        },
        "conditions": {
          "description": "Represents the latest available observations of a workflow node's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.WorkflowNodeCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "finishedChildren": {
          "description": "Children is necessary for representing the order when replicated child template references by parent template.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "WorkflowNodeStatus",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.WorkflowSpec": {
      "type": "object",
      "required": [
        "entry",
        "templates"
      ],
      "properties": {
        "entry": {
          "type": "string",
          "default": ""
        },
        "templates": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.Template"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "WorkflowSpec",
        "Scope": "Namespaced"
      }
    },
    "org.chaos-mesh.v1alpha1.WorkflowStatus": {
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Represents the latest available observations of a workflow's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/org.chaos-mesh.v1alpha1.WorkflowCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "endTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "entryNode": {
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "chaos-mesh.org",
        "Version": "v1alpha1",
        "Kind": "WorkflowStatus",
        "Scope": "Namespaced"
      }
    }
  }
}