{
  "swagger": "2.0",
  "info": {
    "title": "Kubernetes",
    "version": "0.0.0"
  },
  "paths": null,
  "definitions": {
    "com.github.stolostron.multicluster-observability-operator.operators.multiclusterobservability.api.shared.Condition": {
      "description": "Condition is from metav1.Condition. Cannot use it directly because the upgrade issue. Have to mark LastTransitionTime and Status as optional.",
      "type": "object",
      "required": [
        "type",
        "reason",
        "message"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
          "type": "string",
          "default": ""
        },
        "observedGeneration": {
          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
          "type": "integer",
          "format": "int64"
        },
        "reason": {
          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
          "type": "string",
          "default": ""
        },
        "status": {
          "description": "status of the condition, one of True, False, Unknown.",
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "",
        "Version": "shared",
        "Kind": "Condition",
        "Scope": "Namespaced"
      }
    },
    "com.github.stolostron.multicluster-observability-operator.operators.multiclusterobservability.api.shared.ObservabilityAddonSpec": {
      "description": "ObservabilityAddonSpec is the spec of observability addon.",
      "type": "object",
      "properties": {
        "enableMetrics": {
          "description": "EnableMetrics indicates the observability addon push metrics to hub server.",
          "type": "boolean",
          "default": false
        },
        "interval": {
          "description": "Interval for the observability addon push metrics to hub server.",
          "type": "integer",
          "format": "int32"
        },
        "resources": {
          "description": "Resource requirement for metrics-collector",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "scrapeSizeLimitBytes": {
          "description": "ScrapeSizeLimitBytes is the max size in bytes for a single metrics scrape from in-cluster Prometheus. Default is 1 GiB.",
          "type": "integer",
          "format": "int32"
        },
        "workers": {
          "description": "Workers is the number of workers in metrics-collector that work in parallel to push metrics to hub server. If set to \u003e 1, metrics-collector will shard /federate calls to Prometheus, based on matcher rules provided by allowlist. Ensure that number of matchers exceeds number of workers.",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "",
        "Version": "shared",
        "Kind": "ObservabilityAddonSpec",
        "Scope": "Namespaced"
      }
    },
    "com.github.stolostron.multicluster-observability-operator.operators.multiclusterobservability.api.shared.PreConfiguredStorage": {
      "type": "object",
      "required": [
        "key",
        "name"
      ],
      "properties": {
        "key": {
          "description": "The key of the secret to select from. Must be a valid secret key. Refer to https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage for a valid content of key.",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string",
          "default": ""
        },
        "serviceAccountProjection": {
          "description": "serviceAccountProjection indicates whether mount service account token to thanos pods. Default is false.",
          "type": "boolean"
        },
        "tlsSecretMountPath": {
          "description": "TLS secret mount path for the custom certificate for the object store",
          "type": "string"
        },
        "tlsSecretName": {
          "description": "TLS secret contains the custom certificate for the object store",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "",
        "Version": "shared",
        "Kind": "PreConfiguredStorage",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1",
        "Kind": "MutatingWebhookConfiguration",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of MutatingWebhookConfiguration.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1",
        "Kind": "MutatingWebhookConfigurationList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the ValidatingAdmissionPolicy.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicySpec"
        },
        "status": {
          "description": "The status of the ValidatingAdmissionPolicy, including warnings that are useful to determine if the policy behaves in the expected way. Populated by the system. Read-only.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1",
        "Kind": "ValidatingAdmissionPolicy",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBindingSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1",
        "Kind": "ValidatingAdmissionPolicyBinding",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBindingList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of PolicyBinding.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1",
        "Kind": "ValidatingAdmissionPolicyBindingList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of ValidatingAdmissionPolicy.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1",
        "Kind": "ValidatingAdmissionPolicyList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1",
        "Kind": "ValidatingWebhookConfiguration",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of ValidatingWebhookConfiguration.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1",
        "Kind": "ValidatingWebhookConfigurationList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicy": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the MutatingAdmissionPolicy.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicySpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1alpha1",
        "Kind": "MutatingAdmissionPolicy",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicyBinding": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the MutatingAdmissionPolicyBinding.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicyBindingSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1alpha1",
        "Kind": "MutatingAdmissionPolicyBinding",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicyBindingList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of PolicyBinding.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicyBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1alpha1",
        "Kind": "MutatingAdmissionPolicyBindingList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicyList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of ValidatingAdmissionPolicy.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1alpha1",
        "Kind": "MutatingAdmissionPolicyList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the ValidatingAdmissionPolicy.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicySpec"
        },
        "status": {
          "description": "The status of the ValidatingAdmissionPolicy, including warnings that are useful to determine if the policy behaves in the expected way. Populated by the system. Read-only.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1alpha1",
        "Kind": "ValidatingAdmissionPolicy",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBindingSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1alpha1",
        "Kind": "ValidatingAdmissionPolicyBinding",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBindingList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of PolicyBinding.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1alpha1",
        "Kind": "ValidatingAdmissionPolicyBindingList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of ValidatingAdmissionPolicy.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1alpha1",
        "Kind": "ValidatingAdmissionPolicyList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhook"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1beta1",
        "Kind": "MutatingWebhookConfiguration",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of MutatingWebhookConfiguration.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1beta1",
        "Kind": "MutatingWebhookConfigurationList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the ValidatingAdmissionPolicy.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicySpec"
        },
        "status": {
          "description": "The status of the ValidatingAdmissionPolicy, including warnings that are useful to determine if the policy behaves in the expected way. Populated by the system. Read-only.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1beta1",
        "Kind": "ValidatingAdmissionPolicy",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBindingSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1beta1",
        "Kind": "ValidatingAdmissionPolicyBinding",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBindingList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of PolicyBinding.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1beta1",
        "Kind": "ValidatingAdmissionPolicyBindingList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of ValidatingAdmissionPolicy.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1beta1",
        "Kind": "ValidatingAdmissionPolicyList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1beta1",
        "Kind": "ValidatingWebhookConfiguration",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of ValidatingWebhookConfiguration.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "admissionregistration.k8s.io",
        "Version": "v1beta1",
        "Kind": "ValidatingWebhookConfigurationList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apiserverinternal.v1alpha1.StorageVersion": {
      "type": "object",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "The name is \u003cgroup\u003e.\u003cresource\u003e.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is an empty spec. It is here to comply with Kubernetes API style.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec"
        },
        "status": {
          "description": "API server instances report the version they can decode and the version they encode objects to when persisting objects in the backend.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "internal.apiserver.k8s.io",
        "Version": "v1alpha1",
        "Kind": "StorageVersion",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items holds a list of StorageVersion",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "internal.apiserver.k8s.io",
        "Version": "v1alpha1",
        "Kind": "StorageVersionList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1.ControllerRevision": {
      "type": "object",
      "required": [
        "revision"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "data": {
          "description": "Data is the serialized representation of the state.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "revision": {
          "description": "Revision indicates the revision of the state represented by Data.",
          "type": "integer",
          "format": "int64",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "ControllerRevision",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1.ControllerRevisionList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of ControllerRevisions",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "ControllerRevisionList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1.DaemonSet": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetSpec"
        },
        "status": {
          "description": "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "DaemonSet",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1.DaemonSetList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "A list of daemon sets.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "DaemonSetList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1.Deployment": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the Deployment.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec"
        },
        "status": {
          "description": "Most recently observed status of the Deployment.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Deployment",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1.DeploymentList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of Deployments.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "DeploymentList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1.ReplicaSet": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec"
        },
        "status": {
          "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "ReplicaSet",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1.ReplicaSetList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "ReplicaSetList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1.StatefulSet": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired identities of pods in this set.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec"
        },
        "status": {
          "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "StatefulSet",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1.StatefulSetList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of stateful sets.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "StatefulSetList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta1.ControllerRevision": {
      "type": "object",
      "required": [
        "revision"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "data": {
          "description": "data is the serialized representation of the state.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "revision": {
          "description": "revision indicates the revision of the state represented by Data.",
          "type": "integer",
          "format": "int64",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "ControllerRevision",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta1.ControllerRevisionList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of ControllerRevisions",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1beta1.ControllerRevision"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "ControllerRevisionList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta1.Deployment": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the Deployment.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentSpec"
        },
        "status": {
          "description": "Most recently observed status of the Deployment.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.DeploymentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "Deployment",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta1.DeploymentList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of Deployments.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1beta1.Deployment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "DeploymentList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta1.StatefulSet": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired identities of pods in this set.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetSpec"
        },
        "status": {
          "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "StatefulSet",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta1.StatefulSetList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1beta1.StatefulSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "StatefulSetList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta2.ControllerRevision": {
      "type": "object",
      "required": [
        "revision"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "data": {
          "description": "Data is the serialized representation of the state.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "revision": {
          "description": "Revision indicates the revision of the state represented by Data.",
          "type": "integer",
          "format": "int64",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta2",
        "Kind": "ControllerRevision",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta2.ControllerRevisionList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of ControllerRevisions",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ControllerRevision"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta2",
        "Kind": "ControllerRevisionList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta2.DaemonSet": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSetSpec"
        },
        "status": {
          "description": "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta2",
        "Kind": "DaemonSet",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta2.DaemonSetList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "A list of daemon sets.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DaemonSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta2",
        "Kind": "DaemonSetList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta2.Deployment": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the Deployment.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DeploymentSpec"
        },
        "status": {
          "description": "Most recently observed status of the Deployment.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.DeploymentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta2",
        "Kind": "Deployment",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta2.DeploymentList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of Deployments.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.Deployment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta2",
        "Kind": "DeploymentList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta2.ReplicaSet": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSetSpec"
        },
        "status": {
          "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta2",
        "Kind": "ReplicaSet",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta2.ReplicaSetList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ReplicaSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta2",
        "Kind": "ReplicaSetList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta2.Scale": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ScaleSpec"
        },
        "status": {
          "description": "current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.ScaleStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta2",
        "Kind": "Scale",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta2.StatefulSet": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired identities of pods in this set.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetSpec"
        },
        "status": {
          "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta2",
        "Kind": "StatefulSet",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1beta2.StatefulSetList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.apps.v1beta2.StatefulSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta2",
        "Kind": "StatefulSetList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.authentication.v1.SelfSubjectReview": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "description": "Status is filled in by the server with the user attributes.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authentication.v1.SelfSubjectReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authentication.k8s.io",
        "Version": "v1",
        "Kind": "SelfSubjectReview",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.authentication.v1.TokenRequest": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the token can be authenticated.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authentication.k8s.io",
        "Version": "v1",
        "Kind": "TokenRequest",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.authentication.v1.TokenReview": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request can be authenticated.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authentication.k8s.io",
        "Version": "v1",
        "Kind": "TokenReview",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.authentication.v1alpha1.SelfSubjectReview": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "description": "Status is filled in by the server with the user attributes.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authentication.v1alpha1.SelfSubjectReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authentication.k8s.io",
        "Version": "v1alpha1",
        "Kind": "SelfSubjectReview",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.authentication.v1beta1.SelfSubjectReview": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "description": "Status is filled in by the server with the user attributes.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.SelfSubjectReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authentication.k8s.io",
        "Version": "v1beta1",
        "Kind": "SelfSubjectReview",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.authentication.v1beta1.TokenReview": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the token can be authenticated.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authentication.k8s.io",
        "Version": "v1beta1",
        "Kind": "TokenReview",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.authorization.v1.LocalSubjectAccessReview": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authorization.k8s.io",
        "Version": "v1",
        "Kind": "LocalSubjectAccessReview",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.authorization.v1.SelfSubjectAccessReview": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.  user and groups must be empty",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authorization.k8s.io",
        "Version": "v1",
        "Kind": "SelfSubjectAccessReview",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.authorization.v1.SelfSubjectRulesReview": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates the set of actions a user can perform.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectRulesReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authorization.k8s.io",
        "Version": "v1",
        "Kind": "SelfSubjectRulesReview",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.authorization.v1.SubjectAccessReview": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authorization.k8s.io",
        "Version": "v1",
        "Kind": "SubjectAccessReview",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authorization.k8s.io",
        "Version": "v1beta1",
        "Kind": "LocalSubjectAccessReview",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.  user and groups must be empty",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authorization.k8s.io",
        "Version": "v1beta1",
        "Kind": "SelfSubjectAccessReview",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates the set of actions a user can perform.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectRulesReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authorization.k8s.io",
        "Version": "v1beta1",
        "Kind": "SelfSubjectRulesReview",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.authorization.v1beta1.SubjectAccessReview": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds information about the request being evaluated",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec"
        },
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "authorization.k8s.io",
        "Version": "v1beta1",
        "Kind": "SubjectAccessReview",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec defines the behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec"
        },
        "status": {
          "description": "status is the current information about the autoscaler.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "HorizontalPodAutoscaler",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of horizontal pod autoscaler objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "HorizontalPodAutoscalerList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.autoscaling.v1.Scale": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleSpec"
        },
        "status": {
          "description": "status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Scale",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerSpec"
        },
        "status": {
          "description": "status is the current information about the autoscaler.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v2",
        "Kind": "HorizontalPodAutoscaler",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of horizontal pod autoscaler objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "metadata is the standard list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v2",
        "Kind": "HorizontalPodAutoscalerList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec"
        },
        "status": {
          "description": "status is the current information about the autoscaler.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v2beta1",
        "Kind": "HorizontalPodAutoscaler",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of horizontal pod autoscaler objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "metadata is the standard list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v2beta1",
        "Kind": "HorizontalPodAutoscalerList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec"
        },
        "status": {
          "description": "status is the current information about the autoscaler.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v2beta2",
        "Kind": "HorizontalPodAutoscaler",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of horizontal pod autoscaler objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "metadata is the standard list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v2beta2",
        "Kind": "HorizontalPodAutoscalerList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.batch.v1.CronJob": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.batch.v1.CronJobSpec"
        },
        "status": {
          "description": "Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.batch.v1.CronJobStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "CronJob",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.batch.v1.CronJobList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of CronJobs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.batch.v1.CronJob"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "CronJobList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.batch.v1.Job": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec"
        },
        "status": {
          "description": "Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Job",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.batch.v1.JobList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of Jobs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.batch.v1.Job"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "JobList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.batch.v1beta1.CronJob": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobSpec"
        },
        "status": {
          "description": "Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "CronJob",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.batch.v1beta1.CronJobList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of CronJobs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "CronJobList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequest": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec contains the certificate request, and is immutable after creation. Only the request, signerName, expirationSeconds, and usages fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestSpec"
        },
        "status": {
          "description": "status contains information about whether the request is approved or denied, and the certificate issued by the signer, or the failure condition indicating signer failure.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "certificates.k8s.io",
        "Version": "v1",
        "Kind": "CertificateSigningRequest",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a collection of CertificateSigningRequest objects",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "certificates.k8s.io",
        "Version": "v1",
        "Kind": "CertificateSigningRequestList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.certificates.v1alpha1.ClusterTrustBundle": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "metadata contains the object metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec contains the signer (if any) and trust anchors.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundleSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "certificates.k8s.io",
        "Version": "v1alpha1",
        "Kind": "ClusterTrustBundle",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.certificates.v1alpha1.ClusterTrustBundleList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a collection of ClusterTrustBundle objects",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "metadata contains the list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "certificates.k8s.io",
        "Version": "v1alpha1",
        "Kind": "ClusterTrustBundleList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequest": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec contains the certificate request, and is immutable after creation. Only the request, signerName, expirationSeconds, and usages fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec"
        },
        "status": {
          "description": "Derived information about the request.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "certificates.k8s.io",
        "Version": "v1beta1",
        "Kind": "CertificateSigningRequest",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "certificates.k8s.io",
        "Version": "v1beta1",
        "Kind": "CertificateSigningRequestList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.certificates.v1beta1.ClusterTrustBundle": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "metadata contains the object metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec contains the signer (if any) and trust anchors.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.ClusterTrustBundleSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "certificates.k8s.io",
        "Version": "v1beta1",
        "Kind": "ClusterTrustBundle",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.certificates.v1beta1.ClusterTrustBundleList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a collection of ClusterTrustBundle objects",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.ClusterTrustBundle"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "metadata contains the list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "certificates.k8s.io",
        "Version": "v1beta1",
        "Kind": "ClusterTrustBundleList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.coordination.v1.Lease": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "coordination.k8s.io",
        "Version": "v1",
        "Kind": "Lease",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.coordination.v1.LeaseList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "coordination.k8s.io",
        "Version": "v1",
        "Kind": "LeaseList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.coordination.v1alpha2.LeaseCandidate": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.coordination.v1alpha2.LeaseCandidateSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "coordination.k8s.io",
        "Version": "v1alpha2",
        "Kind": "LeaseCandidate",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.coordination.v1alpha2.LeaseCandidateList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.coordination.v1alpha2.LeaseCandidate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "coordination.k8s.io",
        "Version": "v1alpha2",
        "Kind": "LeaseCandidateList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.coordination.v1beta1.Lease": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "coordination.k8s.io",
        "Version": "v1beta1",
        "Kind": "Lease",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.coordination.v1beta1.LeaseCandidate": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseCandidateSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "coordination.k8s.io",
        "Version": "v1beta1",
        "Kind": "LeaseCandidate",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.coordination.v1beta1.LeaseCandidateList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseCandidate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "coordination.k8s.io",
        "Version": "v1beta1",
        "Kind": "LeaseCandidateList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.coordination.v1beta1.LeaseList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "coordination.k8s.io",
        "Version": "v1beta1",
        "Kind": "LeaseList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.Binding": {
      "type": "object",
      "required": [
        "target"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "target": {
          "description": "The target object that you want to bind to the standard object.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Binding",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.ComponentStatus": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "conditions": {
          "description": "List of component conditions observed",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.ComponentCondition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "ComponentStatus",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.core.v1.ComponentStatusList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of ComponentStatus objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatus"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "ComponentStatusList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.ConfigMap": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "binaryData": {
          "description": "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "data": {
          "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "immutable": {
          "description": "Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "ConfigMap",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.ConfigMapList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of ConfigMaps.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "ConfigMapList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.Endpoints": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "subsets": {
          "description": "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointSubset"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Endpoints",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.EndpointsList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of endpoints.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "EndpointsList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.Event": {
      "type": "object",
      "required": [
        "metadata",
        "involvedObject"
      ],
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the Regarding object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "count": {
          "description": "The number of times this event has occurred.",
          "type": "integer",
          "format": "int32"
        },
        "eventTime": {
          "description": "Time when this Event was first observed.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "firstTimestamp": {
          "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "involvedObject": {
          "description": "The object that this event is about.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "lastTimestamp": {
          "description": "The time at which the most recent occurrence of this event was recorded.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "reason": {
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
          "type": "string"
        },
        "related": {
          "description": "Optional secondary object for more complex actions.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "reportingComponent": {
          "description": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
          "type": "string",
          "default": ""
        },
        "reportingInstance": {
          "description": "ID of the controller instance, e.g. `kubelet-xyzf`.",
          "type": "string",
          "default": ""
        },
        "series": {
          "description": "Data about the Event series this event represents or nil if it's a singleton Event.",
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSeries"
        },
        "source": {
          "description": "The component reporting this event. Should be a short machine understandable string.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource"
        },
        "type": {
          "description": "Type of this event (Normal, Warning), new types could be added in the future",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Event",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.EventList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of events",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Event"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "EventList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.LimitRange": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "LimitRange",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.LimitRangeList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "LimitRangeList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.Namespace": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceSpec"
        },
        "status": {
          "description": "Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Namespace",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.core.v1.NamespaceList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "NamespaceList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.Node": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSpec"
        },
        "status": {
          "description": "Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Node",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.core.v1.NodeList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of nodes",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Node"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "NodeList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.PersistentVolume": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec"
        },
        "status": {
          "description": "status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "PersistentVolume",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.core.v1.PersistentVolumeClaim": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec"
        },
        "status": {
          "description": "status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "PersistentVolumeClaim",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "PersistentVolumeClaimList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.PersistentVolumeList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a list of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "PersistentVolumeList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.Pod": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
        },
        "status": {
          "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.PodStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Pod",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.PodList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Pod"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "PodList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.PodLogOptions": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "container": {
          "description": "The container for which to stream logs. Defaults to only container if there is one container in the pod.",
          "type": "string"
        },
        "follow": {
          "description": "Follow the log stream of the pod. Defaults to false.",
          "type": "boolean"
        },
        "insecureSkipTLSVerifyBackend": {
          "description": "insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet).",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "limitBytes": {
          "description": "If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.",
          "type": "integer",
          "format": "int64"
        },
        "previous": {
          "description": "Return previous terminated container logs. Defaults to false.",
          "type": "boolean"
        },
        "sinceSeconds": {
          "description": "A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
          "type": "integer",
          "format": "int64"
        },
        "sinceTime": {
          "description": "An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "stream": {
          "description": "Specify which container log stream to return to the client. Acceptable values are \"All\", \"Stdout\" and \"Stderr\". If not specified, \"All\" is used, and both stdout and stderr are returned interleaved. Note that when \"TailLines\" is specified, \"Stream\" can only be set to nil or \"All\".",
          "type": "string"
        },
        "tailLines": {
          "description": "If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime. Note that when \"TailLines\" is specified, \"Stream\" can only be set to nil or \"All\".",
          "type": "integer",
          "format": "int64"
        },
        "timestamps": {
          "description": "If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "PodLogOptions",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.PodTemplate": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "template": {
          "description": "Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "PodTemplate",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.PodTemplateList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of pod templates",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "PodTemplateList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.ReplicationController": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec"
        },
        "status": {
          "description": "Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "ReplicationController",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.ReplicationControllerList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "ReplicationControllerList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.ResourceQuota": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec"
        },
        "status": {
          "description": "Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "ResourceQuota",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.ResourceQuotaList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "ResourceQuotaList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.Secret": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "data": {
          "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "immutable": {
          "description": "Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "stringData": {
          "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "type": {
          "description": "Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Secret",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.SecretList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Secret"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "SecretList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.Service": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec"
        },
        "status": {
          "description": "Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Service",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.ServiceAccount": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "secrets": {
          "description": "Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a \"kubernetes.io/enforce-mountable-secrets\" annotation set to \"true\". The \"kubernetes.io/enforce-mountable-secrets\" annotation is deprecated since v1.32. Prefer separate namespaces to isolate access to mounted secrets. This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "ServiceAccount",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.ServiceAccountList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "ServiceAccountList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.ServiceList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of services",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Service"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "ServiceList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.discovery.v1.EndpointSlice": {
      "type": "object",
      "required": [
        "addressType",
        "endpoints"
      ],
      "properties": {
        "addressType": {
          "description": "addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name. (Deprecated) The EndpointSlice controller only generates, and kube-proxy only processes, slices of addressType \"IPv4\" and \"IPv6\". No semantics are defined for the \"FQDN\" type.",
          "type": "string",
          "default": ""
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "endpoints": {
          "description": "endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.discovery.v1.Endpoint"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "ports": {
          "description": "ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. Each slice may include a maximum of 100 ports. Services always have at least 1 port, so EndpointSlices generated by the EndpointSlice controller will likewise always have at least 1 port. EndpointSlices used for other purposes may have an empty ports list.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.discovery.v1.EndpointPort"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "discovery.k8s.io",
        "Version": "v1",
        "Kind": "EndpointSlice",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.discovery.v1.EndpointSliceList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of endpoint slices",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.discovery.v1.EndpointSlice"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "discovery.k8s.io",
        "Version": "v1",
        "Kind": "EndpointSliceList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.discovery.v1beta1.EndpointSlice": {
      "type": "object",
      "required": [
        "addressType",
        "endpoints"
      ],
      "properties": {
        "addressType": {
          "description": "addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.",
          "type": "string",
          "default": ""
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "endpoints": {
          "description": "endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.Endpoint"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "ports": {
          "description": "ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates \"all ports\". Each slice may include a maximum of 100 ports.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointPort"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "discovery.k8s.io",
        "Version": "v1beta1",
        "Kind": "EndpointSlice",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.discovery.v1beta1.EndpointSliceList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of endpoint slices",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSlice"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "discovery.k8s.io",
        "Version": "v1beta1",
        "Kind": "EndpointSliceList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.events.v1.Event": {
      "type": "object",
      "required": [
        "eventTime"
      ],
      "properties": {
        "action": {
          "description": "action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "deprecatedCount": {
          "description": "deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "type": "integer",
          "format": "int32"
        },
        "deprecatedFirstTimestamp": {
          "description": "deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deprecatedLastTimestamp": {
          "description": "deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deprecatedSource": {
          "description": "deprecatedSource is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource"
        },
        "eventTime": {
          "description": "eventTime is the time when this Event was first observed. It is required.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "note": {
          "description": "note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "reason is why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "type": "string"
        },
        "regarding": {
          "description": "regarding contains the object this Event is about. In most cases it's an Object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "related": {
          "description": "related is the optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "reportingController": {
          "description": "reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.",
          "type": "string"
        },
        "series": {
          "description": "series is data about the Event series this event represents or nil if it's a singleton Event.",
          "$ref": "#/definitions/io.k8s.api.events.v1.EventSeries"
        },
        "type": {
          "description": "type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "events.k8s.io",
        "Version": "v1",
        "Kind": "Event",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.events.v1.EventList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.events.v1.Event"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "events.k8s.io",
        "Version": "v1",
        "Kind": "EventList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.events.v1beta1.Event": {
      "type": "object",
      "required": [
        "eventTime"
      ],
      "properties": {
        "action": {
          "description": "action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field can have at most 128 characters.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "deprecatedCount": {
          "description": "deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "type": "integer",
          "format": "int32"
        },
        "deprecatedFirstTimestamp": {
          "description": "deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deprecatedLastTimestamp": {
          "description": "deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "deprecatedSource": {
          "description": "deprecatedSource is the deprecated field assuring backward compatibility with core.v1 Event type.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource"
        },
        "eventTime": {
          "description": "eventTime is the time when this Event was first observed. It is required.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "note": {
          "description": "note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "reason is why the action was taken. It is human-readable. This field can have at most 128 characters.",
          "type": "string"
        },
        "regarding": {
          "description": "regarding contains the object this Event is about. In most cases it's an Object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "related": {
          "description": "related is the optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "reportingController": {
          "description": "reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.",
          "type": "string"
        },
        "series": {
          "description": "series is data about the Event series this event represents or nil if it's a singleton Event.",
          "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventSeries"
        },
        "type": {
          "description": "type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "events.k8s.io",
        "Version": "v1beta1",
        "Kind": "Event",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.events.v1beta1.EventList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "events.k8s.io",
        "Version": "v1beta1",
        "Kind": "EventList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.extensions.v1beta1.DaemonSet": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSetSpec"
        },
        "status": {
          "description": "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "DaemonSet",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.extensions.v1beta1.DaemonSetList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "A list of daemon sets.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DaemonSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "DaemonSetList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.extensions.v1beta1.Deployment": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the Deployment.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentSpec"
        },
        "status": {
          "description": "Most recently observed status of the Deployment.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.DeploymentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "Deployment",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.extensions.v1beta1.DeploymentList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of Deployments.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Deployment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "DeploymentList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.extensions.v1beta1.DeploymentRollback": {
      "type": "object",
      "required": [
        "name",
        "rollbackTo"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Required: This must match the Name of a deployment.",
          "type": "string",
          "default": ""
        },
        "rollbackTo": {
          "description": "The config of this deployment rollback.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.RollbackConfig"
        },
        "updatedAnnotations": {
          "description": "The annotations to be updated to a deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "DeploymentRollback",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.extensions.v1beta1.Ingress": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressSpec"
        },
        "status": {
          "description": "Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "Ingress",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.extensions.v1beta1.IngressList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of Ingress.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "IngressList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.extensions.v1beta1.NetworkPolicy": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior for this NetworkPolicy.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicySpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "NetworkPolicy",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.extensions.v1beta1.NetworkPolicyList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of schema objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.NetworkPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "NetworkPolicyList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.extensions.v1beta1.ReplicaSet": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSetSpec"
        },
        "status": {
          "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "ReplicaSet",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.extensions.v1beta1.ReplicaSetList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ReplicaSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "ReplicaSetList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.extensions.v1beta1.Scale": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ScaleSpec"
        },
        "status": {
          "description": "current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.ScaleStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "Scale",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.flowcontrol.v1.FlowSchema": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "`spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.FlowSchemaSpec"
        },
        "status": {
          "description": "`status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.FlowSchemaStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1",
        "Kind": "FlowSchema",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.flowcontrol.v1.FlowSchemaList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "`items` is a list of FlowSchemas.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1",
        "Kind": "FlowSchemaList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "`spec` is the specification of the desired behavior of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationSpec"
        },
        "status": {
          "description": "`status` is the current status of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1",
        "Kind": "PriorityLevelConfiguration",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "`items` is a list of request-priorities.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1",
        "Kind": "PriorityLevelConfigurationList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.flowcontrol.v1beta1.FlowSchema": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "`spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta1.FlowSchemaSpec"
        },
        "status": {
          "description": "`status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta1.FlowSchemaStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1beta1",
        "Kind": "FlowSchema",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.flowcontrol.v1beta1.FlowSchemaList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "`items` is a list of FlowSchemas.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta1.FlowSchema"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1beta1",
        "Kind": "FlowSchemaList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "`spec` is the specification of the desired behavior of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationSpec"
        },
        "status": {
          "description": "`status` is the current status of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1beta1",
        "Kind": "PriorityLevelConfiguration",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "`items` is a list of request-priorities.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1beta1",
        "Kind": "PriorityLevelConfigurationList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.flowcontrol.v1beta2.FlowSchema": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "`spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta2.FlowSchemaSpec"
        },
        "status": {
          "description": "`status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta2.FlowSchemaStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1beta2",
        "Kind": "FlowSchema",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.flowcontrol.v1beta2.FlowSchemaList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "`items` is a list of FlowSchemas.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta2.FlowSchema"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1beta2",
        "Kind": "FlowSchemaList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfiguration": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "`spec` is the specification of the desired behavior of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationSpec"
        },
        "status": {
          "description": "`status` is the current status of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1beta2",
        "Kind": "PriorityLevelConfiguration",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "`items` is a list of request-priorities.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1beta2",
        "Kind": "PriorityLevelConfigurationList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.flowcontrol.v1beta3.FlowSchema": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "`spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchemaSpec"
        },
        "status": {
          "description": "`status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchemaStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1beta3",
        "Kind": "FlowSchema",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.flowcontrol.v1beta3.FlowSchemaList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "`items` is a list of FlowSchemas.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1beta3",
        "Kind": "FlowSchemaList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "`spec` is the specification of the desired behavior of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationSpec"
        },
        "status": {
          "description": "`status` is the current status of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1beta3",
        "Kind": "PriorityLevelConfiguration",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "`items` is a list of request-priorities.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "flowcontrol.apiserver.k8s.io",
        "Version": "v1beta3",
        "Kind": "PriorityLevelConfigurationList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1.IPAddress": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1.IPAddressSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.k8s.io",
        "Version": "v1",
        "Kind": "IPAddress",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.networking.v1.IPAddressList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of IPAddresses.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1.IPAddress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.k8s.io",
        "Version": "v1",
        "Kind": "IPAddressList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1.Ingress": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressSpec"
        },
        "status": {
          "description": "status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.k8s.io",
        "Version": "v1",
        "Kind": "Ingress",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1.IngressClass": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClassSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.k8s.io",
        "Version": "v1",
        "Kind": "IngressClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.networking.v1.IngressClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of IngressClasses.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.k8s.io",
        "Version": "v1",
        "Kind": "IngressClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1.IngressList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of Ingress.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.k8s.io",
        "Version": "v1",
        "Kind": "IngressList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1.NetworkPolicy": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec represents the specification of the desired behavior for this NetworkPolicy.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.k8s.io",
        "Version": "v1",
        "Kind": "NetworkPolicy",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1.NetworkPolicyList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.k8s.io",
        "Version": "v1",
        "Kind": "NetworkPolicyList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1.ServiceCIDR": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1.ServiceCIDRSpec"
        },
        "status": {
          "description": "status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1.ServiceCIDRStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.k8s.io",
        "Version": "v1",
        "Kind": "ServiceCIDR",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.networking.v1.ServiceCIDRList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of ServiceCIDRs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1.ServiceCIDR"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.k8s.io",
        "Version": "v1",
        "Kind": "ServiceCIDRList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1alpha1.IPAddress": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1alpha1.IPAddressSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.k8s.io",
        "Version": "v1alpha1",
        "Kind": "IPAddress",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.networking.v1alpha1.IPAddressList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of IPAddresses.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1alpha1.IPAddress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.k8s.io",
        "Version": "v1alpha1",
        "Kind": "IPAddressList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1alpha1.ServiceCIDR": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDRSpec"
        },
        "status": {
          "description": "status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDRStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.k8s.io",
        "Version": "v1alpha1",
        "Kind": "ServiceCIDR",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.networking.v1alpha1.ServiceCIDRList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of ServiceCIDRs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.k8s.io",
        "Version": "v1alpha1",
        "Kind": "ServiceCIDRList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1beta1.IPAddress": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IPAddressSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.k8s.io",
        "Version": "v1beta1",
        "Kind": "IPAddress",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.networking.v1beta1.IPAddressList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of IPAddresses.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IPAddress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.k8s.io",
        "Version": "v1beta1",
        "Kind": "IPAddressList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1beta1.Ingress": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressSpec"
        },
        "status": {
          "description": "status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.k8s.io",
        "Version": "v1beta1",
        "Kind": "Ingress",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1beta1.IngressClass": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClassSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.k8s.io",
        "Version": "v1beta1",
        "Kind": "IngressClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.networking.v1beta1.IngressClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of IngressClasses.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.k8s.io",
        "Version": "v1beta1",
        "Kind": "IngressClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1beta1.IngressList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of Ingress.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.k8s.io",
        "Version": "v1beta1",
        "Kind": "IngressList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.networking.v1beta1.ServiceCIDR": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.ServiceCIDRSpec"
        },
        "status": {
          "description": "status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.ServiceCIDRStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.k8s.io",
        "Version": "v1beta1",
        "Kind": "ServiceCIDR",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.networking.v1beta1.ServiceCIDRList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of ServiceCIDRs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.ServiceCIDR"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.k8s.io",
        "Version": "v1beta1",
        "Kind": "ServiceCIDRList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.node.v1.RuntimeClass": {
      "type": "object",
      "required": [
        "handler"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "handler": {
          "description": "handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node \u0026 CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "overhead": {
          "description": "overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see\n https://kubernetes.io/docs/concepts/scheduling-eviction/pod-overhead/",
          "$ref": "#/definitions/io.k8s.api.node.v1.Overhead"
        },
        "scheduling": {
          "description": "scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.",
          "$ref": "#/definitions/io.k8s.api.node.v1.Scheduling"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "node.k8s.io",
        "Version": "v1",
        "Kind": "RuntimeClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.node.v1.RuntimeClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.node.v1.RuntimeClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "node.k8s.io",
        "Version": "v1",
        "Kind": "RuntimeClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.node.v1alpha1.RuntimeClass": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec represents specification of the RuntimeClass More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClassSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "node.k8s.io",
        "Version": "v1alpha1",
        "Kind": "RuntimeClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.node.v1alpha1.RuntimeClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "node.k8s.io",
        "Version": "v1alpha1",
        "Kind": "RuntimeClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.node.v1beta1.RuntimeClass": {
      "type": "object",
      "required": [
        "handler"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "handler": {
          "description": "handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node \u0026 CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "overhead": {
          "description": "overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md",
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Overhead"
        },
        "scheduling": {
          "description": "scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.",
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Scheduling"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "node.k8s.io",
        "Version": "v1beta1",
        "Kind": "RuntimeClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.node.v1beta1.RuntimeClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is a list of schema objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "node.k8s.io",
        "Version": "v1beta1",
        "Kind": "RuntimeClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.policy.v1.Eviction": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "deleteOptions": {
          "description": "DeleteOptions may be provided",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ObjectMeta describes the pod that is being evicted.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Eviction",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.policy.v1.PodDisruptionBudget": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the PodDisruptionBudget.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetSpec"
        },
        "status": {
          "description": "Most recently observed status of the PodDisruptionBudget.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "PodDisruptionBudget",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.policy.v1.PodDisruptionBudgetList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of PodDisruptionBudgets",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1",
        "Kind": "PodDisruptionBudgetList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.policy.v1beta1.Eviction": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "deleteOptions": {
          "description": "DeleteOptions may be provided",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "ObjectMeta describes the pod that is being evicted.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "Eviction",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudget": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the PodDisruptionBudget.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec"
        },
        "status": {
          "description": "Most recently observed status of the PodDisruptionBudget.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "PodDisruptionBudget",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items list individual PodDisruptionBudget objects",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "",
        "Version": "v1beta1",
        "Kind": "PodDisruptionBudgetList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1.ClusterRole": {
      "type": "object",
      "properties": {
        "aggregationRule": {
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1",
        "Kind": "ClusterRole",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.rbac.v1.ClusterRoleBinding": {
      "type": "object",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1",
        "Kind": "ClusterRoleBinding",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.rbac.v1.ClusterRoleBindingList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of ClusterRoleBindings",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1",
        "Kind": "ClusterRoleBindingList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1.ClusterRoleList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of ClusterRoles",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1",
        "Kind": "ClusterRoleList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1.Role": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this Role",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1",
        "Kind": "Role",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1.RoleBinding": {
      "type": "object",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1",
        "Kind": "RoleBinding",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1.RoleBindingList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of RoleBindings",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1",
        "Kind": "RoleBindingList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1.RoleList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of Roles",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1",
        "Kind": "RoleList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1alpha1.ClusterRole": {
      "type": "object",
      "properties": {
        "aggregationRule": {
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.AggregationRule"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.PolicyRule"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1alpha1",
        "Kind": "ClusterRole",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.rbac.v1alpha1.ClusterRoleBinding": {
      "type": "object",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Subject"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1alpha1",
        "Kind": "ClusterRoleBinding",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of ClusterRoleBindings",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1alpha1",
        "Kind": "ClusterRoleBindingList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1alpha1.ClusterRoleList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of ClusterRoles",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRole"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1alpha1",
        "Kind": "ClusterRoleList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1alpha1.Role": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this Role",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.PolicyRule"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1alpha1",
        "Kind": "Role",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1alpha1.RoleBinding": {
      "type": "object",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Subject"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1alpha1",
        "Kind": "RoleBinding",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1alpha1.RoleBindingList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of RoleBindings",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1alpha1",
        "Kind": "RoleBindingList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1alpha1.RoleList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of Roles",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Role"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1alpha1",
        "Kind": "RoleList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1beta1.ClusterRole": {
      "type": "object",
      "properties": {
        "aggregationRule": {
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.",
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.AggregationRule"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.PolicyRule"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1beta1",
        "Kind": "ClusterRole",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleBinding": {
      "type": "object",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Subject"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1beta1",
        "Kind": "ClusterRoleBinding",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleBindingList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of ClusterRoleBindings",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1beta1",
        "Kind": "ClusterRoleBindingList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of ClusterRoles",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1beta1",
        "Kind": "ClusterRoleList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1beta1.Role": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this Role",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.PolicyRule"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1beta1",
        "Kind": "Role",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1beta1.RoleBinding": {
      "type": "object",
      "required": [
        "roleRef"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "description": "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleRef"
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Subject"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1beta1",
        "Kind": "RoleBinding",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1beta1.RoleBindingList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of RoleBindings",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1beta1",
        "Kind": "RoleBindingList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.rbac.v1beta1.RoleList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of Roles",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "rbac.authorization.k8s.io",
        "Version": "v1beta1",
        "Kind": "RoleList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1alpha3.DeviceClass": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines what can be allocated and how to configure it.\n\nThis is mutable. Consumers have to be prepared for classes changing at any time, either because they get updated or replaced. Claim allocations are done once based on whatever was set in classes at the time of allocation.\n\nChanging the spec automatically increments the metadata.generation number.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.DeviceClassSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1alpha3",
        "Kind": "DeviceClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.resource.v1alpha3.DeviceClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of resource classes.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.DeviceClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1alpha3",
        "Kind": "DeviceClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1alpha3.DeviceTaintRule": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec specifies the selector and one taint.\n\nChanging the spec automatically increments the metadata.generation number.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.DeviceTaintRuleSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1alpha3",
        "Kind": "DeviceTaintRule",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.resource.v1alpha3.DeviceTaintRuleList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of DeviceTaintRules.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.DeviceTaintRule"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1alpha3",
        "Kind": "DeviceTaintRuleList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1alpha3.ResourceClaim": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec describes what is being requested and how to configure it. The spec is immutable.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.ResourceClaimSpec"
        },
        "status": {
          "description": "Status describes whether the claim is ready to use and what has been allocated.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.ResourceClaimStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1alpha3",
        "Kind": "ResourceClaim",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1alpha3.ResourceClaimList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of resource claims.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.ResourceClaim"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1alpha3",
        "Kind": "ResourceClaimList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1alpha3.ResourceClaimTemplate": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Describes the ResourceClaim that is to be generated.\n\nThis field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.ResourceClaimTemplateSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1alpha3",
        "Kind": "ResourceClaimTemplate",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1alpha3.ResourceClaimTemplateList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of resource claim templates.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.ResourceClaimTemplate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1alpha3",
        "Kind": "ResourceClaimTemplateList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1alpha3.ResourceSlice": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Contains the information published by the driver.\n\nChanging the spec automatically increments the metadata.generation number.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.ResourceSliceSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1alpha3",
        "Kind": "ResourceSlice",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.resource.v1alpha3.ResourceSliceList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of resource ResourceSlices.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.ResourceSlice"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1alpha3",
        "Kind": "ResourceSliceList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1beta1.DeviceClass": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines what can be allocated and how to configure it.\n\nThis is mutable. Consumers have to be prepared for classes changing at any time, either because they get updated or replaced. Claim allocations are done once based on whatever was set in classes at the time of allocation.\n\nChanging the spec automatically increments the metadata.generation number.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceClassSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1beta1",
        "Kind": "DeviceClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.resource.v1beta1.DeviceClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of resource classes.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1beta1",
        "Kind": "DeviceClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1beta1.ResourceClaim": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec describes what is being requested and how to configure it. The spec is immutable.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceClaimSpec"
        },
        "status": {
          "description": "Status describes whether the claim is ready to use and what has been allocated.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceClaimStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1beta1",
        "Kind": "ResourceClaim",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1beta1.ResourceClaimList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of resource claims.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceClaim"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1beta1",
        "Kind": "ResourceClaimList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1beta1.ResourceClaimTemplate": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Describes the ResourceClaim that is to be generated.\n\nThis field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceClaimTemplateSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1beta1",
        "Kind": "ResourceClaimTemplate",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1beta1.ResourceClaimTemplateList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of resource claim templates.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceClaimTemplate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1beta1",
        "Kind": "ResourceClaimTemplateList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1beta1.ResourceSlice": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Contains the information published by the driver.\n\nChanging the spec automatically increments the metadata.generation number.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceSliceSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1beta1",
        "Kind": "ResourceSlice",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.resource.v1beta1.ResourceSliceList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of resource ResourceSlices.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceSlice"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1beta1",
        "Kind": "ResourceSliceList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1beta2.DeviceClass": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines what can be allocated and how to configure it.\n\nThis is mutable. Consumers have to be prepared for classes changing at any time, either because they get updated or replaced. Claim allocations are done once based on whatever was set in classes at the time of allocation.\n\nChanging the spec automatically increments the metadata.generation number.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceClassSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1beta2",
        "Kind": "DeviceClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.resource.v1beta2.DeviceClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of resource classes.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1beta2",
        "Kind": "DeviceClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1beta2.ResourceClaim": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec describes what is being requested and how to configure it. The spec is immutable.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceClaimSpec"
        },
        "status": {
          "description": "Status describes whether the claim is ready to use and what has been allocated.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceClaimStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1beta2",
        "Kind": "ResourceClaim",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1beta2.ResourceClaimList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of resource claims.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceClaim"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1beta2",
        "Kind": "ResourceClaimList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1beta2.ResourceClaimTemplate": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Describes the ResourceClaim that is to be generated.\n\nThis field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceClaimTemplateSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1beta2",
        "Kind": "ResourceClaimTemplate",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1beta2.ResourceClaimTemplateList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of resource claim templates.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceClaimTemplate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1beta2",
        "Kind": "ResourceClaimTemplateList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.resource.v1beta2.ResourceSlice": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Contains the information published by the driver.\n\nChanging the spec automatically increments the metadata.generation number.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceSliceSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "resource.k8s.io",
        "Version": "v1beta2",
        "Kind": "ResourceSlice",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.resource.v1beta2.ResourceSliceList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of resource ResourceSlices.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceSlice"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "resource.k8s.io",
        "Version": "v1beta2",
        "Kind": "ResourceSliceList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.scheduling.v1.PriorityClass": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "description": {
          "description": "description is an arbitrary string that usually provides guidelines on when this priority class should be used.",
          "type": "string"
        },
        "globalDefault": {
          "description": "globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "preemptionPolicy": {
          "description": "preemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.",
          "type": "string"
        },
        "value": {
          "description": "value represents the integer value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "scheduling.k8s.io",
        "Version": "v1",
        "Kind": "PriorityClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.scheduling.v1.PriorityClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of PriorityClasses",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "scheduling.k8s.io",
        "Version": "v1",
        "Kind": "PriorityClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.scheduling.v1alpha1.PriorityClass": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "description": {
          "description": "description is an arbitrary string that usually provides guidelines on when this priority class should be used.",
          "type": "string"
        },
        "globalDefault": {
          "description": "globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "preemptionPolicy": {
          "description": "preemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.",
          "type": "string"
        },
        "value": {
          "description": "value represents the integer value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "scheduling.k8s.io",
        "Version": "v1alpha1",
        "Kind": "PriorityClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.scheduling.v1alpha1.PriorityClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of PriorityClasses",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.scheduling.v1alpha1.PriorityClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "scheduling.k8s.io",
        "Version": "v1alpha1",
        "Kind": "PriorityClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.scheduling.v1beta1.PriorityClass": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "description": {
          "description": "description is an arbitrary string that usually provides guidelines on when this priority class should be used.",
          "type": "string"
        },
        "globalDefault": {
          "description": "globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "preemptionPolicy": {
          "description": "preemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.",
          "type": "string"
        },
        "value": {
          "description": "value represents the integer value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "scheduling.k8s.io",
        "Version": "v1beta1",
        "Kind": "PriorityClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.scheduling.v1beta1.PriorityClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of PriorityClasses",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "scheduling.k8s.io",
        "Version": "v1beta1",
        "Kind": "PriorityClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1.CSIDriver": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec represents the specification of the CSI Driver.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriverSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1",
        "Kind": "CSIDriver",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.storage.v1.CSIDriverList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of CSIDriver",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1",
        "Kind": "CSIDriverList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1.CSINode": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. metadata.name must be the Kubernetes node name.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of CSINode",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.storage.v1.CSINodeSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1",
        "Kind": "CSINode",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.storage.v1.CSINodeList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of CSINode",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1",
        "Kind": "CSINodeList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1.CSIStorageCapacity": {
      "type": "object",
      "required": [
        "storageClassName"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "capacity": {
          "description": "capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThe semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "maximumVolumeSize": {
          "description": "maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThis is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "metadata": {
          "description": "Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-\u003cuuid\u003e, a generated name, or a reverse-domain name which ends with the unique CSI driver name.\n\nObjects are namespaced.\n\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "nodeTopology": {
          "description": "nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "storageClassName": {
          "description": "storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1",
        "Kind": "CSIStorageCapacity",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1.CSIStorageCapacityList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of CSIStorageCapacity objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1",
        "Kind": "CSIStorageCapacityList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1.StorageClass": {
      "type": "object",
      "required": [
        "provisioner"
      ],
      "properties": {
        "allowVolumeExpansion": {
          "description": "allowVolumeExpansion shows whether the storage class allow volume expand.",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "mountOptions": {
          "description": "mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-list-type": "atomic"
        },
        "parameters": {
          "description": "parameters holds the parameters for the provisioner that should create volumes of this storage class.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "provisioner": {
          "description": "provisioner indicates the type of the provisioner.",
          "type": "string",
          "default": ""
        },
        "reclaimPolicy": {
          "description": "reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.",
          "type": "string"
        },
        "volumeBindingMode": {
          "description": "volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1",
        "Kind": "StorageClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.storage.v1.StorageClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of StorageClasses",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1",
        "Kind": "StorageClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1.VolumeAttachment": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSpec"
        },
        "status": {
          "description": "status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1",
        "Kind": "VolumeAttachment",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.storage.v1.VolumeAttachmentList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of VolumeAttachments",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1",
        "Kind": "VolumeAttachmentList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1alpha1.CSIStorageCapacity": {
      "type": "object",
      "required": [
        "storageClassName"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "capacity": {
          "description": "capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThe semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "maximumVolumeSize": {
          "description": "maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThis is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "metadata": {
          "description": "Standard object's metadata. The name has no particular meaning. It must be be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-\u003cuuid\u003e, a generated name, or a reverse-domain name which ends with the unique CSI driver name.\n\nObjects are namespaced.\n\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "nodeTopology": {
          "description": "nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "storageClassName": {
          "description": "storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1alpha1",
        "Kind": "CSIStorageCapacity",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1alpha1.CSIStorageCapacityList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of CSIStorageCapacity objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.CSIStorageCapacity"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1alpha1",
        "Kind": "CSIStorageCapacityList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1alpha1.VolumeAttachment": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec"
        },
        "status": {
          "description": "status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachmentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1alpha1",
        "Kind": "VolumeAttachment",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.storage.v1alpha1.VolumeAttachmentList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of VolumeAttachments",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1alpha1",
        "Kind": "VolumeAttachmentList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1alpha1.VolumeAttributesClass": {
      "type": "object",
      "required": [
        "driverName"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "driverName": {
          "description": "Name of the CSI driver This field is immutable.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "parameters": {
          "description": "parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.\n\nThis field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an \"Infeasible\" state in the modifyVolumeStatus field.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1alpha1",
        "Kind": "VolumeAttributesClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.storage.v1alpha1.VolumeAttributesClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of VolumeAttributesClass objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1alpha1",
        "Kind": "VolumeAttributesClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1beta1.CSIDriver": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec represents the specification of the CSI Driver.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriverSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1beta1",
        "Kind": "CSIDriver",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.storage.v1beta1.CSIDriverList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of CSIDriver",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1beta1",
        "Kind": "CSIDriverList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1beta1.CSINode": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "metadata.name must be the Kubernetes node name.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec is the specification of CSINode",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1beta1",
        "Kind": "CSINode",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.storage.v1beta1.CSINodeList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of CSINode",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1beta1",
        "Kind": "CSINodeList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1beta1.CSIStorageCapacity": {
      "type": "object",
      "required": [
        "storageClassName"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "capacity": {
          "description": "capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThe semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "maximumVolumeSize": {
          "description": "maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThis is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "metadata": {
          "description": "Standard object's metadata. The name has no particular meaning. It must be be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-\u003cuuid\u003e, a generated name, or a reverse-domain name which ends with the unique CSI driver name.\n\nObjects are namespaced.\n\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "nodeTopology": {
          "description": "nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "storageClassName": {
          "description": "storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1beta1",
        "Kind": "CSIStorageCapacity",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1beta1.CSIStorageCapacityList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of CSIStorageCapacity objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIStorageCapacity"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1beta1",
        "Kind": "CSIStorageCapacityList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1beta1.StorageClass": {
      "type": "object",
      "required": [
        "provisioner"
      ],
      "properties": {
        "allowVolumeExpansion": {
          "description": "allowVolumeExpansion shows whether the storage class allow volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "mountOptions": {
          "description": "mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-list-type": "atomic"
        },
        "parameters": {
          "description": "parameters holds the parameters for the provisioner that should create volumes of this storage class.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "provisioner": {
          "description": "provisioner indicates the type of the provisioner.",
          "type": "string",
          "default": ""
        },
        "reclaimPolicy": {
          "description": "reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.",
          "type": "string"
        },
        "volumeBindingMode": {
          "description": "volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1beta1",
        "Kind": "StorageClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.storage.v1beta1.StorageClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of StorageClasses",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1beta1",
        "Kind": "StorageClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachment": {
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSpec"
        },
        "status": {
          "description": "status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1beta1",
        "Kind": "VolumeAttachment",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of VolumeAttachments",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1beta1",
        "Kind": "VolumeAttachmentList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storage.v1beta1.VolumeAttributesClass": {
      "type": "object",
      "required": [
        "driverName"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "driverName": {
          "description": "Name of the CSI driver This field is immutable.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "parameters": {
          "description": "parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.\n\nThis field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an \"Infeasible\" state in the modifyVolumeStatus field.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storage.k8s.io",
        "Version": "v1beta1",
        "Kind": "VolumeAttributesClass",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.storage.v1beta1.VolumeAttributesClassList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "items is the list of VolumeAttributesClass objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttributesClass"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storage.k8s.io",
        "Version": "v1beta1",
        "Kind": "VolumeAttributesClassList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the migration.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationSpec"
        },
        "status": {
          "description": "Status of the migration.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "storagemigration.k8s.io",
        "Version": "v1alpha1",
        "Kind": "StorageVersionMigration",
        "Scope": "Clustered"
      }
    },
    "io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of StorageVersionMigration",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "storagemigration.k8s.io",
        "Version": "v1alpha1",
        "Kind": "StorageVersionMigrationList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup": {
      "type": "object",
      "required": [
        "name",
        "versions"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "name is the name of the group.",
          "type": "string",
          "default": ""
        },
        "preferredVersion": {
          "description": "preferredVersion is the version preferred by the API server, which probably is the storage version.",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
        },
        "serverAddressByClientCIDRs": {
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "versions": {
          "description": "versions are the versions supported in this group.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "meta.k8s.io",
        "Version": "v1",
        "Kind": "APIGroup",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList": {
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "groups": {
          "description": "groups is a list of APIGroup.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "meta.k8s.io",
        "Version": "v1",
        "Kind": "APIGroupList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList": {
      "type": "object",
      "required": [
        "groupVersion",
        "resources"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "groupVersion": {
          "description": "groupVersion is the group and version this APIResourceList is for.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "resources": {
          "description": "resources contains the name of the resources and if they are namespaced.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "meta.k8s.io",
        "Version": "v1",
        "Kind": "APIResourceList",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ApplyOptions": {
      "type": "object",
      "required": [
        "force",
        "fieldManager"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-list-type": "atomic"
        },
        "fieldManager": {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required.",
          "type": "string",
          "default": ""
        },
        "force": {
          "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people.",
          "type": "boolean",
          "default": false
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "meta.k8s.io",
        "Version": "v1",
        "Kind": "ApplyOptions",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.CreateOptions": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-list-type": "atomic"
        },
        "fieldManager": {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
          "type": "string"
        },
        "fieldValidation": {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "meta.k8s.io",
        "Version": "v1",
        "Kind": "CreateOptions",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-list-type": "atomic"
        },
        "gracePeriodSeconds": {
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
          "type": "integer",
          "format": "int64"
        },
        "ignoreStoreReadErrorWithClusterBreakingPotential": {
          "description": "if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "orphanDependents": {
          "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
          "type": "boolean"
        },
        "preconditions": {
          "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions"
        },
        "propagationPolicy": {
          "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "meta.k8s.io",
        "Version": "v1",
        "Kind": "DeleteOptions",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.GetOptions": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "resourceVersion": {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "meta.k8s.io",
        "Version": "v1",
        "Kind": "GetOptions",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ListOptions": {
      "type": "object",
      "properties": {
        "allowWatchBookmarks": {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.",
          "type": "boolean"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "continue": {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "type": "string"
        },
        "fieldSelector": {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "labelSelector": {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "type": "string"
        },
        "limit": {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "type": "integer",
          "format": "int64"
        },
        "resourceVersion": {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "type": "string"
        },
        "resourceVersionMatch": {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "type": "string"
        },
        "sendInitialEvents": {
          "description": "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following: - `resourceVersionMatch` = NotOlderThan\n  is interpreted as \"data at least as new as the provided `resourceVersion`\"\n  and the bookmark event is send when the state is synced\n  to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n  If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n  bookmark event is send when the state is synced at least to the moment\n  when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n  Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise.",
          "type": "boolean"
        },
        "timeoutSeconds": {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "type": "integer",
          "format": "int64"
        },
        "watch": {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "meta.k8s.io",
        "Version": "v1",
        "Kind": "ListOptions",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.PatchOptions": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-list-type": "atomic"
        },
        "fieldManager": {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
          "type": "string"
        },
        "fieldValidation": {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "type": "string"
        },
        "force": {
          "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "meta.k8s.io",
        "Version": "v1",
        "Kind": "PatchOptions",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.UpdateOptions": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-list-type": "atomic"
        },
        "fieldManager": {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
          "type": "string"
        },
        "fieldValidation": {
          "description": "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "meta.k8s.io",
        "Version": "v1",
        "Kind": "UpdateOptions",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.agent.v1.AddonAgentConfig": {
      "description": "AddonAgentConfig is the configurations for addon agents.",
      "type": "object",
      "required": [
        "KlusterletAddonConfig",
        "ManagedCluster",
        "NodeSelector",
        "ImagePullSecret",
        "ImagePullSecretNamespace",
        "ImagePullPolicy"
      ],
      "properties": {
        "ImagePullPolicy": {
          "type": "string",
          "default": ""
        },
        "ImagePullSecret": {
          "type": "string",
          "default": ""
        },
        "ImagePullSecretNamespace": {
          "type": "string",
          "default": ""
        },
        "KlusterletAddonConfig": {
          "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
        },
        "ManagedCluster": {
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
        },
        "NodeSelector": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "agent.open-cluster-management.io",
        "Version": "v1",
        "Kind": "AddonAgentConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.agent.v1.GlobalValues": {
      "description": "GlobalValues defines the global values",
      "type": "object",
      "properties": {
        "imageOverrides": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "imagePullPolicy": {
          "type": "string"
        },
        "imagePullSecret": {
          "type": "string"
        },
        "nodeSelector": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "proxyConfig": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "agent.open-cluster-management.io",
        "Version": "v1",
        "Kind": "GlobalValues",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.agent.v1.KlusterletAddonAgentConfigSpec": {
      "description": "KlusterletAddonAgentConfigSpec defines configuration for each addon agent.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled is the flag to enable/disable the addon. default is false.",
          "type": "boolean",
          "default": false
        },
        "proxyPolicy": {
          "description": "ProxyPolicy defines the policy to set proxy for each addon agent. default is Disabled. Disabled means that the addon agent pods do not configure the proxy env variables. OCPGlobalProxy means that the addon agent pods use the cluster-wide proxy config of OCP cluster provisioned by ACM. CustomProxy means that the addon agent pods use the ProxyConfig specified in KlusterletAddonConfig.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "agent.open-cluster-management.io",
        "Version": "v1",
        "Kind": "KlusterletAddonAgentConfigSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.agent.v1.KlusterletAddonConfig": {
      "description": "KlusterletAddonConfig is the Schema for the klusterletaddonconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfigSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfigStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "agent.open-cluster-management.io",
        "Version": "v1",
        "Kind": "KlusterletAddonConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.agent.v1.KlusterletAddonConfigList": {
      "description": "KlusterletAddonConfigList contains a list of klusterletAddonConfig",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "agent.open-cluster-management.io",
        "Version": "v1",
        "Kind": "KlusterletAddonConfigList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.agent.v1.KlusterletAddonConfigSpec": {
      "description": "KlusterletAddonConfigSpec defines the desired state of KlusterletAddonConfig",
      "type": "object",
      "required": [
        "searchCollector",
        "policyController",
        "applicationManager",
        "certPolicyController"
      ],
      "properties": {
        "applicationManager": {
          "description": "ApplicationManagerConfig defines the configurations of ApplicationManager addon agent.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonAgentConfigSpec"
        },
        "certPolicyController": {
          "description": "CertPolicyControllerConfig defines the configurations of CertPolicyController addon agent.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonAgentConfigSpec"
        },
        "clusterLabels": {
          "description": "DEPRECATED in release 2.4 and will be removed in the future since not used anymore.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "clusterName": {
          "description": "DEPRECATED in release 2.4 and will be removed in the future since not used anymore.",
          "type": "string"
        },
        "clusterNamespace": {
          "description": "DEPRECATED in release 2.4 and will be removed in the future since not used anymore.",
          "type": "string"
        },
        "iamPolicyController": {
          "description": "DEPRECATED in release 2.11 and will be removed in the future since not used anymore.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonAgentConfigSpec"
        },
        "policyController": {
          "description": "PolicyController defines the configurations of PolicyController addon agent.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonAgentConfigSpec"
        },
        "proxyConfig": {
          "description": "ProxyConfig defines the cluster-wide proxy configuration of the OCP managed cluster.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.agent.v1.ProxyConfig"
        },
        "searchCollector": {
          "description": "SearchCollectorConfig defines the configurations of SearchCollector addon agent.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.agent.v1.KlusterletAddonAgentConfigSpec"
        },
        "version": {
          "description": "DEPRECATED in release 2.4 and will be removed in the future since not used anymore.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "agent.open-cluster-management.io",
        "Version": "v1",
        "Kind": "KlusterletAddonConfigSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.agent.v1.KlusterletAddonConfigStatus": {
      "description": "KlusterletAddonConfigStatus defines the observed state of KlusterletAddonConfig",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions contains condition information for the klusterletAddonConfig",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        },
        "ocpGlobalProxy": {
          "description": "OCPGlobalProxy is the cluster-wide proxy config of the OCP cluster provisioned by ACM",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.agent.v1.ProxyConfig"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "agent.open-cluster-management.io",
        "Version": "v1",
        "Kind": "KlusterletAddonConfigStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.agent.v1.ProxyConfig": {
      "description": "ProxyConfig defines the global proxy env for OCP cluster",
      "type": "object",
      "properties": {
        "httpProxy": {
          "description": "HTTPProxy is the URL of the proxy for HTTP requests.  Empty means unset and will not result in an env var.",
          "type": "string"
        },
        "httpsProxy": {
          "description": "HTTPSProxy is the URL of the proxy for HTTPS requests.  Empty means unset and will not result in an env var.",
          "type": "string"
        },
        "noProxy": {
          "description": "NoProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in an env var. The API Server of Hub cluster should be added here. And If you scale up workers that are not included in the network defined by the networking.machineNetwork[].cidr field from the installation configuration, you must add them to this list to prevent connection issues.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "agent.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ProxyConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.AllowDenyItem": {
      "description": "AllowDenyItem defines a group of resources allowed or denied for deployment",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion specifies the API version for the group of resources",
          "type": "string"
        },
        "kinds": {
          "description": "Kinds specifies a list of kinds under the same API version for the group of resources",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "AllowDenyItem",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.AnsibleJobsStatus": {
      "description": "AnsibleJobsStatus defines status of ansible jobs propagated by the subscription",
      "type": "object",
      "properties": {
        "lastposthookjob": {
          "description": "The lastly propagated posthook job",
          "type": "string"
        },
        "lastprehookjob": {
          "description": "The lastly propagated prehook job",
          "type": "string"
        },
        "posthookjobshistory": {
          "description": "reserved for backward compatibility",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "prehookjobshistory": {
          "description": "reserved for backward compatibility",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "AnsibleJobsStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.Channel": {
      "description": "Channel provides a repository containing application resources which can be deployed to clusters by subscriptions. The following 3 types of channels are supported: Git repository, Helm release registry, and Object storage repository.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.ChannelSpec"
        },
        "status": {
          "description": "The most recent observed status of the Channel.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.ChannelStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "Channel",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.ChannelGate": {
      "description": "ChannelGate defines a criteria for promoting a Deployable from the sourceNamespaces to Channel.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "The annotations for selecting the Deployables to be eligible for promotion.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "labelSelector": {
          "description": "A label selector for selecting the Deployables.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "name": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ChannelGate",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.ChannelList": {
      "description": "ChannelList provides a list of channels",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "A list of Channel objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
          },
          "x-kubernetes-list-type": "set"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ChannelList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.ChannelSpec": {
      "description": "ChannelSpec defines the desired state of Channel",
      "type": "object",
      "required": [
        "type",
        "pathname"
      ],
      "properties": {
        "configMapRef": {
          "description": "Reference to a ConfigMap which contains additional settings for accessing the channel. For example, the `insecureSkipVerify` option for accessing HTTPS endpoints can be set in the ConfigMap to indicate a insecure connection.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "gates": {
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.ChannelGate"
        },
        "insecureSkipVerify": {
          "description": "Skip server TLS certificate verification for Git or Helm channel.",
          "type": "boolean"
        },
        "pathname": {
          "description": "For a `helmrepo` or `github` channel, pathname is the repo URL. For a `objectbucket` channel, pathname is the Object store URL with the name of the bucket.",
          "type": "string",
          "default": ""
        },
        "secretRef": {
          "description": "For a `github` channel or a `helmrepo` channel on github, use this to reference a secret which contains the credentials for authentication, for example: `user` and `accessToken`. For a `objectbucket` channel, use this to reference a secret which contains the AWS credentials, for example: `AccessKeyID`,`SecretAccessKey` and `Region`.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "sourceNamespaces": {
          "description": "A list of namespace names from which Deployables can be promoted.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-list-type": "set"
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ChannelSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.ChannelStatus": {
      "description": "ChannelStatus defines the observed state of Channel",
      "type": "object",
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ChannelStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.ClusterConditionFilter": {
      "description": "ClusterConditionFilter defines filter to filter cluster condition",
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ClusterConditionFilter",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.ClusterOverride": {
      "description": "ClusterOverride defines the contents for override rules",
      "type": "object",
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ClusterOverride",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.ClusterOverrides": {
      "description": "ClusterOverrides defines a list of contents that will be overridden to a given cluster",
      "type": "object",
      "required": [
        "clusterName",
        "clusterOverrides"
      ],
      "properties": {
        "clusterName": {
          "description": "Cluster name",
          "type": "string",
          "default": ""
        },
        "clusterOverrides": {
          "description": "ClusterOverrides defines a list of content for override",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.ClusterOverride"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ClusterOverrides",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.GenericClusterReference": {
      "description": "GenericClusterReference - in alignment with kubefed",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "GenericClusterReference",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.GenericPlacementFields": {
      "description": "GenericPlacementFields - in alignment with kubefed",
      "type": "object",
      "properties": {
        "clusterSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "clusters": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.GenericClusterReference"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "GenericPlacementFields",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.HourRange": {
      "description": "HourRange defines the time format, refer to https://golang.org/pkg/time/#pkg-constants",
      "type": "object",
      "properties": {
        "end": {
          "description": "End time of the hour range",
          "type": "string"
        },
        "start": {
          "description": "Start time of the hour range",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "HourRange",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.Overrides": {
      "description": "Overrides defines a list of contents that will be overridden to a given resource",
      "type": "object",
      "required": [
        "packageName"
      ],
      "properties": {
        "packageAlias": {
          "description": "PackageAlias defines the alias of the package name that will be onverriden",
          "type": "string"
        },
        "packageName": {
          "description": "PackageName defines the package name that will be onverriden",
          "type": "string",
          "default": ""
        },
        "packageOverrides": {
          "description": "PackageOverrides defines a list of content for override",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.PackageOverride"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "Overrides",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.PackageFilter": {
      "description": "PackageFilter defines various types of filters for selecting resources",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations defines a type of filter for selecting resources by annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "filterRef": {
          "description": "FilterRef defines a type of filter for selecting resources by another resource reference",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "labelSelector": {
          "description": "LabelSelector defines a type of filter for selecting resources by label selector",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "version": {
          "description": "Version defines a type of filter for selecting resources by version",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PackageFilter",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.PackageOverride": {
      "description": "PackageOverride provides the contents for overriding a package",
      "type": "object",
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PackageOverride",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.Placement": {
      "description": "Placement field to be referenced in specs, align with Fedv2, add placementref",
      "type": "object",
      "properties": {
        "clusterSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "clusters": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.GenericClusterReference"
          }
        },
        "local": {
          "description": "It indicates a standalone subscription if the Local pointer is set to be true",
          "type": "boolean"
        },
        "placementRef": {
          "description": "Specify a placement reference for selecting clusters",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "Placement",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.PlacementDecision": {
      "description": "PlacementDecision defines the decision made by controller",
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "clusterNamespace": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PlacementDecision",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.PlacementRule": {
      "description": "PlacementRule is the Schema for the placementrules API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRuleSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRuleStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PlacementRule",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.PlacementRuleList": {
      "description": "PlacementRuleList contains a list of PlacementRule",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementRule"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PlacementRuleList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.PlacementRuleSpec": {
      "description": "PlacementRuleSpec defines the desired state of PlacementRule",
      "type": "object",
      "properties": {
        "clusterConditions": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.ClusterConditionFilter"
          }
        },
        "clusterReplicas": {
          "description": "number of replicas Application wants to",
          "type": "integer",
          "format": "int32"
        },
        "clusterSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "clusters": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.GenericClusterReference"
          }
        },
        "policies": {
          "description": "Set Policy Filters",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          }
        },
        "resourceHint": {
          "description": "Select Resource",
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.ResourceHint"
        },
        "schedulerName": {
          "description": "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"make\" to regenerate code after modifying this file schedulerName, default to use mcm controller",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PlacementRuleSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.PlacementRuleStatus": {
      "description": "PlacementRuleStatus defines the observed state of PlacementRule",
      "type": "object",
      "properties": {
        "decisions": {
          "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.PlacementDecision"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PlacementRuleStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.ResourceHint": {
      "description": "ResourceHint is used to sort the output",
      "type": "object",
      "properties": {
        "order": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ResourceHint",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.SubscriberItem": {
      "description": "SubscriberItem defines subscriber item to share subscribers with different channel types",
      "type": "object",
      "required": [
        "Subscription",
        "SubscriptionConfigMap",
        "Channel",
        "ChannelSecret",
        "ChannelConfigMap",
        "SecondaryChannel",
        "SecondaryChannelSecret",
        "SecondaryChannelConfigMap"
      ],
      "properties": {
        "Channel": {
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
        },
        "ChannelConfigMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
        },
        "ChannelSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Secret"
        },
        "SecondaryChannel": {
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.Channel"
        },
        "SecondaryChannelConfigMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
        },
        "SecondaryChannelSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Secret"
        },
        "Subscription": {
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
        },
        "SubscriptionConfigMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "SubscriberItem",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.Subscription": {
      "description": "Subscription is the Schema for the subscriptions API",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.SubscriptionSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.SubscriptionStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "Subscription",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.SubscriptionList": {
      "description": "SubscriptionList contains a list of Subscription",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.Subscription"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "SubscriptionList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.SubscriptionPerClusterStatus": {
      "description": "SubscriptionPerClusterStatus defines status of each subscription in a cluster, key is package name",
      "type": "object",
      "properties": {
        "packages": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.SubscriptionUnitStatus"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "SubscriptionPerClusterStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.SubscriptionSpec": {
      "description": "SubscriptionSpec defines the desired state of Subscription",
      "type": "object",
      "required": [
        "channel"
      ],
      "properties": {
        "allow": {
          "description": "Specify a list of resources allowed for deployment",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.AllowDenyItem"
          }
        },
        "channel": {
          "description": "The primary channel namespaced name used by the subscription. Its format is \"\u003cchannel NameSpace\u003e/\u003cchannel Name\u003e\"",
          "type": "string",
          "default": ""
        },
        "deny": {
          "description": "Specify a list of resources denied for deployment",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.AllowDenyItem"
          }
        },
        "hooksecretref": {
          "description": "Specify a secret reference used in Ansible job integration authentication",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "name": {
          "description": "Subscribe a package by its package name",
          "type": "string"
        },
        "overrides": {
          "description": "Specify overrides when applied to clusters. Hub use only",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.ClusterOverrides"
          }
        },
        "packageFilter": {
          "description": "Subscribe packages by a package filter",
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.PackageFilter"
        },
        "packageOverrides": {
          "description": "Override packages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.Overrides"
          }
        },
        "placement": {
          "description": "Specify a placement reference for selecting clusters. Hub use only",
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.Placement"
        },
        "secondaryChannel": {
          "description": "The secondary channel will be applied if the primary channel fails to connect",
          "type": "string"
        },
        "timewindow": {
          "description": "Specify a time window to indicate when the subscription is handled",
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.TimeWindow"
        },
        "watchHelmNamespaceScopedResources": {
          "description": "WatchHelmNamespaceScopedResources is used to enable watching namespace scope Helm chart resources",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "SubscriptionSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.SubscriptionStatus": {
      "description": "SubscriptionStatus defines the observed status of a subscription",
      "type": "object",
      "properties": {
        "ansiblejobs": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.apps.v1.AnsibleJobsStatus"
        },
        "appstatusReference": {
          "description": "The CLI reference for getting the subscription status output",
          "type": "string"
        },
        "lastUpdateTime": {
          "description": "Timestamp of when the subscription status was last updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Informational message of the subscription deployment",
          "type": "string"
        },
        "phase": {
          "description": "Phase of the subscription deployment",
          "type": "string"
        },
        "reason": {
          "description": "additional error output of the subscription deployment",
          "type": "string"
        },
        "statuses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.SubscriptionPerClusterStatus"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "SubscriptionStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.SubscriptionUnitStatus": {
      "description": "SubscriptionUnitStatus defines status of each package in a subscription",
      "type": "object",
      "required": [
        "lastUpdateTime"
      ],
      "properties": {
        "lastUpdateTime": {
          "description": "Timestamp of when the deployment package was last updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Informational message from the deployment of the package.",
          "type": "string"
        },
        "phase": {
          "description": "Phase of the deployment package (Propagated/Subscribed/Failed/PropagationFailed/PreHookSucessful).",
          "type": "string"
        },
        "reason": {
          "description": "additional error output from the deployment of the package.",
          "type": "string"
        },
        "resourceStatus": {
          "description": "reserved for backward compatibility",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "SubscriptionUnitStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.apps.v1.TimeWindow": {
      "description": "TimeWindow defines a time window for the subscription to run or be blocked",
      "type": "object",
      "properties": {
        "daysofweek": {
          "description": "A list of days of a week, valid values include: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "hours": {
          "description": "A list of hour ranges",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.apps.v1.HourRange"
          }
        },
        "location": {
          "description": "time zone location, refer to TZ identifier in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
          "type": "string"
        },
        "windowtype": {
          "description": "Activiate time window or not. The subscription deployment will only be handled during these active windows Valid values include: active,blocked,Active,Blocked",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "apps.open-cluster-management.io",
        "Version": "v1",
        "Kind": "TimeWindow",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1.ClientConfig": {
      "description": "ClientConfig represents the apiserver address of the managed cluster.",
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "caBundle": {
          "description": "CABundle is the ca bundle to connect to apiserver of the managed cluster. System certs are used if it is not set.",
          "type": "string",
          "format": "byte"
        },
        "url": {
          "description": "URL is the URL of apiserver endpoint of the managed cluster.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ClientConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1.ManagedCluster": {
      "description": "ManagedCluster represents the desired state and current status of a managed cluster. ManagedCluster is a cluster-scoped resource. The name is the cluster UID.\n\nThe cluster join process is a double opt-in process. See the following join process steps:\n\n1. The agent on the managed cluster creates a CSR on the hub with the cluster UID and agent name. 2. The agent on the managed cluster creates a ManagedCluster on the hub. 3. The cluster admin on the hub cluster approves the CSR for the UID and agent name of the ManagedCluster. 4. The cluster admin sets the spec.acceptClient of the ManagedCluster to true. 5. The cluster admin on the managed cluster creates a credential of the kubeconfig for the hub cluster.\n\nAfter the hub cluster creates the cluster namespace, the klusterlet agent on the ManagedCluster pushes the credential to the hub cluster to use against the kube-apiserver of the ManagedCluster.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents a desired configuration for the agent on the managed cluster.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedClusterSpec"
        },
        "status": {
          "description": "Status represents the current status of joined managed cluster",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedClusterStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ManagedCluster",
        "Scope": "Clustered"
      }
    },
    "io.open-cluster-management.cluster.v1.ManagedClusterClaim": {
      "description": "ManagedClusterClaim represents a ClusterClaim collected from a managed cluster.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the name of a ClusterClaim resource on managed cluster. It's a well known or customized name to identify the claim.",
          "type": "string"
        },
        "value": {
          "description": "Value is a claim-dependent string",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ManagedClusterClaim",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1.ManagedClusterList": {
      "description": "ManagedClusterList is a collection of managed cluster.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of managed clusters.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedCluster"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ManagedClusterList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1.ManagedClusterSpec": {
      "description": "ManagedClusterSpec provides the information to securely connect to a remote server and verify its identity.",
      "type": "object",
      "required": [
        "hubAcceptsClient"
      ],
      "properties": {
        "hubAcceptsClient": {
          "description": "hubAcceptsClient represents that hub accepts the joining of Klusterlet agent on the managed cluster with the hub. The default value is false, and can only be set true when the user on hub has an RBAC rule to UPDATE on the virtual subresource of managedclusters/accept. When the value is set true, a namespace whose name is the same as the name of ManagedCluster is created on the hub. This namespace represents the managed cluster, also role/rolebinding is created on the namespace to grant the permision of access from the agent on the managed cluster. When the value is set to false, the namespace representing the managed cluster is deleted.",
          "type": "boolean",
          "default": false
        },
        "leaseDurationSeconds": {
          "description": "LeaseDurationSeconds is used to coordinate the lease update time of Klusterlet agents on the managed cluster. If its value is zero, the Klusterlet agent will update its lease every 60 seconds by default",
          "type": "integer",
          "format": "int32"
        },
        "managedClusterClientConfigs": {
          "description": "ManagedClusterClientConfigs represents a list of the apiserver address of the managed cluster. If it is empty, the managed cluster has no accessible address for the hub to connect with it.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ClientConfig"
          }
        },
        "taints": {
          "description": "Taints is a property of managed cluster that allow the cluster to be repelled when scheduling. Taints, including 'ManagedClusterUnavailable' and 'ManagedClusterUnreachable', can not be added/removed by agent running on the managed cluster; while it's fine to add/remove other taints from either hub cluser or managed cluster.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1.Taint"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ManagedClusterSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1.ManagedClusterStatus": {
      "description": "ManagedClusterStatus represents the current status of joined managed cluster.",
      "type": "object",
      "required": [
        "conditions"
      ],
      "properties": {
        "allocatable": {
          "description": "Allocatable represents the total allocatable resources on the managed cluster.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "capacity": {
          "description": "Capacity represents the total resource capacity from all nodeStatuses on the managed cluster.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "clusterClaims": {
          "description": "ClusterClaims represents cluster information that a managed cluster claims, for example a unique cluster identifier (id.k8s.io) and kubernetes version (kubeversion.open-cluster-management.io). They are written from the managed cluster. The set of claims is not uniform across a fleet, some claims can be vendor or version specific and may not be included from all managed clusters.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedClusterClaim"
          }
        },
        "conditions": {
          "description": "Conditions contains the different condition statuses for this managed cluster.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        },
        "version": {
          "description": "Version represents the kubernetes version of the managed cluster.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1.ManagedClusterVersion"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ManagedClusterStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1.ManagedClusterVersion": {
      "description": "ManagedClusterVersion represents version information about the managed cluster.",
      "type": "object",
      "properties": {
        "kubernetes": {
          "description": "Kubernetes is the kubernetes version of managed cluster.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ManagedClusterVersion",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1.Taint": {
      "description": "The managed cluster this Taint is attached to has the \"effect\" on any placement that does not tolerate the Taint.",
      "type": "object",
      "required": [
        "key",
        "effect",
        "timeAdded"
      ],
      "properties": {
        "effect": {
          "description": "Effect indicates the effect of the taint on placements that do not tolerate the taint. Valid effects are NoSelect, PreferNoSelect and NoSelectIfNew.",
          "type": "string",
          "default": ""
        },
        "key": {
          "description": "Key is the taint key applied to a cluster. e.g. bar or foo.example.com/bar. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
          "type": "string",
          "default": ""
        },
        "timeAdded": {
          "description": "TimeAdded represents the time at which the taint was added.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "value": {
          "description": "Value is the taint value corresponding to the taint key.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1",
        "Kind": "Taint",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore": {
      "description": "AddOnPlacementScore represents a bundle of scores of one managed cluster, which could be used by placement. AddOnPlacementScore is a namespace scoped resource. The namespace of the resource is the cluster namespace.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "description": "Status represents the status of the AddOnPlacementScore.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScoreStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "AddOnPlacementScore",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScoreItem": {
      "description": "AddOnPlacementScoreItem represents the score name and value.",
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "description": "Name is the name of the score",
          "type": "string",
          "default": ""
        },
        "value": {
          "description": "Value is the value of the score. The score range is from -100 to 100.",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "AddOnPlacementScoreItem",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScoreList": {
      "description": "AddOnPlacementScoreList is a collection of AddOnPlacementScore.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of AddOnPlacementScore",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScore"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "AddOnPlacementScoreList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScoreStatus": {
      "description": "AddOnPlacementScoreStatus represents the current status of AddOnPlacementScore.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions contain the different condition statuses for this AddOnPlacementScore.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "scores": {
          "description": "Scores contain a list of score name and value of this managed cluster.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.AddOnPlacementScoreItem"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "validUntil": {
          "description": "ValidUntil defines the valid time of the scores. After this time, the scores are considered to be invalid by placement. nil means never expire. The controller owning this resource should keep the scores up-to-date.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "AddOnPlacementScoreStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.ClusterClaim": {
      "description": "ClusterClaim represents cluster information that a managed cluster claims ClusterClaims with well known names include,\n 1. id.k8s.io, it contains a unique identifier for the cluster.\n 2. clusterset.k8s.io, it contains an identifier that relates the cluster\n    to the ClusterSet in which it belongs.\n\nClusterClaims created on a managed cluster will be collected and saved into the status of the corresponding ManagedCluster on hub.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the attributes of the ClusterClaim.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaimSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "ClusterClaim",
        "Scope": "Clustered"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.ClusterClaimList": {
      "description": "ClusterClaimList is a collection of ClusterClaim.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of ClusterClaim.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.ClusterClaim"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "ClusterClaimList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.ClusterClaimSpec": {
      "type": "object",
      "properties": {
        "value": {
          "description": "Value is a claim-dependent string",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "ClusterClaimSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.MandatoryDecisionGroup": {
      "description": "MandatoryDecisionGroup set the decision group name or group index. GroupName is considered first to select the decisionGroups then GroupIndex.",
      "type": "object",
      "properties": {
        "groupIndex": {
          "description": "GroupIndex of the decision group should match the placementDecisions label value with label key cluster.open-cluster-management.io/decision-group-index",
          "type": "integer",
          "format": "int32"
        },
        "groupName": {
          "description": "GroupName of the decision group should match the placementDecisions label value with label key cluster.open-cluster-management.io/decision-group-name",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "MandatoryDecisionGroup",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.MandatoryDecisionGroups": {
      "description": "MandatoryDecisionGroups",
      "type": "object",
      "properties": {
        "mandatoryDecisionGroups": {
          "description": "List of the decision groups names or indexes to apply the workload first and fail if workload did not reach successful state. GroupName or GroupIndex must match with the decisionGroups defined in the placement's decisionStrategy",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.MandatoryDecisionGroup"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "MandatoryDecisionGroups",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.RolloutAll": {
      "description": "RolloutAll is a RolloutStrategy Type",
      "type": "object",
      "properties": {
        "maxFailures": {
          "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before proceeding to the next rollout. Fail means the cluster has a failed status or timeout status (does not reach successful status after ProgressDeadline). Once the MaxFailures is breached, the rollout will stop. MaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For Progressive, this is considered over the total number of clusters. For ProgressivePerGroup, this is considered according to the size of the current group. For both Progressive and ProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate no failures. Default is that no failures are tolerated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "minSuccessTime": {
          "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload applier controller will wait from the start of each rollout before proceeding (assuming a successful state has been reached and MaxFailures wasn't breached). MinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup. The default value is 0 meaning the workload applier proceeds immediately after a successful state is reached. MinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "progressDeadline": {
          "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to reach a successful state in the cluster. If the workload does not reach a successful state after ProgressDeadline, will stop waiting and workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures is breached, the rollout will stop. ProgressDeadline default value is \"None\", meaning the workload applier will wait for a successful state indefinitely. ProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "RolloutAll",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.RolloutConfig": {
      "description": "Timeout to consider while applying the workload.",
      "type": "object",
      "properties": {
        "maxFailures": {
          "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before proceeding to the next rollout. Fail means the cluster has a failed status or timeout status (does not reach successful status after ProgressDeadline). Once the MaxFailures is breached, the rollout will stop. MaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For Progressive, this is considered over the total number of clusters. For ProgressivePerGroup, this is considered according to the size of the current group. For both Progressive and ProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate no failures. Default is that no failures are tolerated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "minSuccessTime": {
          "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload applier controller will wait from the start of each rollout before proceeding (assuming a successful state has been reached and MaxFailures wasn't breached). MinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup. The default value is 0 meaning the workload applier proceeds immediately after a successful state is reached. MinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "progressDeadline": {
          "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to reach a successful state in the cluster. If the workload does not reach a successful state after ProgressDeadline, will stop waiting and workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures is breached, the rollout will stop. ProgressDeadline default value is \"None\", meaning the workload applier will wait for a successful state indefinitely. ProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "RolloutConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.RolloutProgressive": {
      "description": "RolloutProgressive is a RolloutStrategy Type",
      "type": "object",
      "properties": {
        "mandatoryDecisionGroups": {
          "description": "List of the decision groups names or indexes to apply the workload first and fail if workload did not reach successful state. GroupName or GroupIndex must match with the decisionGroups defined in the placement's decisionStrategy",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.MandatoryDecisionGroup"
          }
        },
        "maxConcurrency": {
          "description": "MaxConcurrency is the max number of clusters to deploy workload concurrently. The default value for MaxConcurrency is determined from the clustersPerDecisionGroup defined in the placement-\u003eDecisionStrategy.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "maxFailures": {
          "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before proceeding to the next rollout. Fail means the cluster has a failed status or timeout status (does not reach successful status after ProgressDeadline). Once the MaxFailures is breached, the rollout will stop. MaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For Progressive, this is considered over the total number of clusters. For ProgressivePerGroup, this is considered according to the size of the current group. For both Progressive and ProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate no failures. Default is that no failures are tolerated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "minSuccessTime": {
          "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload applier controller will wait from the start of each rollout before proceeding (assuming a successful state has been reached and MaxFailures wasn't breached). MinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup. The default value is 0 meaning the workload applier proceeds immediately after a successful state is reached. MinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "progressDeadline": {
          "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to reach a successful state in the cluster. If the workload does not reach a successful state after ProgressDeadline, will stop waiting and workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures is breached, the rollout will stop. ProgressDeadline default value is \"None\", meaning the workload applier will wait for a successful state indefinitely. ProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "RolloutProgressive",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.RolloutProgressivePerGroup": {
      "description": "RolloutProgressivePerGroup is a RolloutStrategy Type",
      "type": "object",
      "properties": {
        "mandatoryDecisionGroups": {
          "description": "List of the decision groups names or indexes to apply the workload first and fail if workload did not reach successful state. GroupName or GroupIndex must match with the decisionGroups defined in the placement's decisionStrategy",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.MandatoryDecisionGroup"
          }
        },
        "maxFailures": {
          "description": "MaxFailures is a percentage or number of clusters in the current rollout that can fail before proceeding to the next rollout. Fail means the cluster has a failed status or timeout status (does not reach successful status after ProgressDeadline). Once the MaxFailures is breached, the rollout will stop. MaxFailures is only considered for rollout types Progressive and ProgressivePerGroup. For Progressive, this is considered over the total number of clusters. For ProgressivePerGroup, this is considered according to the size of the current group. For both Progressive and ProgressivePerGroup, the MaxFailures does not apply for MandatoryDecisionGroups, which tolerate no failures. Default is that no failures are tolerated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "minSuccessTime": {
          "description": "MinSuccessTime is a \"soak\" time. In other words, the minimum amount of time the workload applier controller will wait from the start of each rollout before proceeding (assuming a successful state has been reached and MaxFailures wasn't breached). MinSuccessTime is only considered for rollout types Progressive and ProgressivePerGroup. The default value is 0 meaning the workload applier proceeds immediately after a successful state is reached. MinSuccessTime must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "progressDeadline": {
          "description": "ProgressDeadline defines how long workload applier controller will wait for the workload to reach a successful state in the cluster. If the workload does not reach a successful state after ProgressDeadline, will stop waiting and workload will be treated as \"timeout\" and be counted into MaxFailures. Once the MaxFailures is breached, the rollout will stop. ProgressDeadline default value is \"None\", meaning the workload applier will wait for a successful state indefinitely. ProgressDeadline must be defined in [0-9h]|[0-9m]|[0-9s] format examples; 2h , 90m , 360s",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "RolloutProgressivePerGroup",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1alpha1.RolloutStrategy": {
      "description": "Rollout strategy to apply workload to the selected clusters by Placement and DecisionStrategy.",
      "type": "object",
      "properties": {
        "all": {
          "description": "All defines required fields for RolloutStrategy type All",
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.RolloutAll"
        },
        "progressive": {
          "description": "Progressive defines required fields for RolloutStrategy type Progressive",
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.RolloutProgressive"
        },
        "progressivePerGroup": {
          "description": "ProgressivePerGroup defines required fields for RolloutStrategy type ProgressivePerGroup",
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1alpha1.RolloutProgressivePerGroup"
        },
        "type": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "RolloutStrategy",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.AddOnScore": {
      "description": "AddOnScore represents the configuration of the addon score source.",
      "type": "object",
      "required": [
        "resourceName",
        "scoreName"
      ],
      "properties": {
        "resourceName": {
          "description": "ResourceName defines the resource name of the AddOnPlacementScore. The placement prioritizer selects AddOnPlacementScore CR by this name.",
          "type": "string",
          "default": ""
        },
        "scoreName": {
          "description": "ScoreName defines the score name inside AddOnPlacementScore. AddOnPlacementScore contains a list of score name and score value, ScoreName specify the score to be used by the prioritizer.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "AddOnScore",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.ClusterClaimSelector": {
      "description": "ClusterClaimSelector is a claim query over a set of ManagedClusters. An empty cluster claim selector matches all objects. A null cluster claim selector matches no objects.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of cluster claim selector requirements. The requirements are ANDed.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ClusterClaimSelector",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.ClusterDecision": {
      "description": "ClusterDecision represents a decision from a placement An empty ClusterDecision indicates it is not scheduled yet.",
      "type": "object",
      "required": [
        "clusterName",
        "reason"
      ],
      "properties": {
        "clusterName": {
          "description": "ClusterName is the name of the ManagedCluster. If it is not empty, its value should be unique cross all placement decisions for the Placement.",
          "type": "string",
          "default": ""
        },
        "reason": {
          "description": "Reason represents the reason why the ManagedCluster is selected.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ClusterDecision",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.ClusterPredicate": {
      "description": "ClusterPredicate represents a predicate to select ManagedClusters.",
      "type": "object",
      "properties": {
        "requiredClusterSelector": {
          "description": "RequiredClusterSelector represents a selector of ManagedClusters by label and claim. If specified, 1) Any ManagedCluster, which does not match the selector, should not be selected by this ClusterPredicate; 2) If a selected ManagedCluster (of this ClusterPredicate) ceases to match the selector (e.g. due to\n   an update) of any ClusterPredicate, it will be eventually removed from the placement decisions;\n3) If a ManagedCluster (not selected previously) starts to match the selector, it will either\n   be selected or at least has a chance to be selected (when NumberOfClusters is specified);",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterSelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ClusterPredicate",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.ClusterSelector": {
      "description": "ClusterSelector represents the AND of the containing selectors. An empty cluster selector matches all objects. A null cluster selector matches no objects.",
      "type": "object",
      "properties": {
        "claimSelector": {
          "description": "ClaimSelector represents a selector of ManagedClusters by clusterClaims in status",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterClaimSelector"
        },
        "labelSelector": {
          "description": "LabelSelector represents a selector of ManagedClusters by label",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ClusterSelector",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.DecisionGroup": {
      "description": "DecisionGroup define a subset of clusters that will be added to placementDecisions with groupName label.",
      "type": "object",
      "required": [
        "groupName",
        "groupClusterSelector"
      ],
      "properties": {
        "groupClusterSelector": {
          "description": "LabelSelector to select clusters subset by label.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterSelector"
        },
        "groupName": {
          "description": "Group name to be added as label value to the created placement Decisions labels with label key cluster.open-cluster-management.io/decision-group-name",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "DecisionGroup",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.DecisionGroupStatus": {
      "description": "Present decision groups status based on the DecisionStrategy definition.",
      "type": "object",
      "properties": {
        "clusterCount": {
          "description": "Total number of clusters in the decision group. Clusters count is equal or less than the clusterPerDecisionGroups defined in the decision strategy.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "decisionGroupIndex": {
          "description": "Present the decision group index. If there is no decision strategy defined all placement decisions will be in group index 0",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "decisionGroupName": {
          "description": "Decision group name that is defined in the DecisionStrategy's DecisionGroup.",
          "type": "string",
          "default": ""
        },
        "decisions": {
          "description": "List of placement decisions names associated with the decision group",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "DecisionGroupStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.DecisionStrategy": {
      "description": "DecisionStrategy divide the created placement decision to groups and define number of clusters per decision group.",
      "type": "object",
      "properties": {
        "groupStrategy": {
          "description": "GroupStrategy define strategies to divide selected clusters to decision groups.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.GroupStrategy"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "DecisionStrategy",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.GroupStrategy": {
      "description": "Group the created placementDecision into decision groups based on the number of clusters per decision group.",
      "type": "object",
      "properties": {
        "clustersPerDecisionGroup": {
          "description": "ClustersPerDecisionGroup is a specific number or percentage of the total selected clusters. The specific number will divide the placementDecisions to decisionGroups each group has max number of clusters equal to that specific number. The percentage will divide the placementDecisions to decisionGroups each group has max number of clusters based on the total num of selected clusters and percentage. ex; for a total 100 clusters selected, ClustersPerDecisionGroup equal to 20% will divide the placement decision to 5 groups each group should have 20 clusters. Default is having all clusters in a single group.\n\nThe predefined decisionGroups is expected to be a subset of the selected clusters and the number of items in each group SHOULD be less than ClustersPerDecisionGroup. Once the number of items exceeds the ClustersPerDecisionGroup, the decisionGroups will also be be divided into multiple decisionGroups with same GroupName but different GroupIndex.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "decisionGroups": {
          "description": "DecisionGroups represents a list of predefined groups to put decision results. Decision groups will be constructed based on the DecisionGroups field at first. The clusters not included in the DecisionGroups will be divided to other decision groups afterwards. Each decision group should not have the number of clusters larger than the ClustersPerDecisionGroup.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.DecisionGroup"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "GroupStrategy",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.Placement": {
      "description": "Placement defines a rule to select a set of ManagedClusters from the ManagedClusterSets bound to the placement namespace.\n\nHere is how the placement policy combines with other selection methods to determine a matching list of ManagedClusters:\n 1. Kubernetes clusters are registered with hub as cluster-scoped ManagedClusters;\n 2. ManagedClusters are organized into cluster-scoped ManagedClusterSets;\n 3. ManagedClusterSets are bound to workload namespaces;\n 4. Namespace-scoped Placements specify a slice of ManagedClusterSets which select a working set\n    of potential ManagedClusters;\n 5. Then Placements subselect from that working set using label/claim selection.\n\nA ManagedCluster will not be selected if no ManagedClusterSet is bound to the placement namespace. A user is able to bind a ManagedClusterSet to a namespace by creating a ManagedClusterSetBinding in that namespace if they have an RBAC rule to CREATE on the virtual subresource of `managedclustersets/bind`.\n\nA slice of PlacementDecisions with the label cluster.open-cluster-management.io/placement={placement name} will be created to represent the ManagedClusters selected by this placement.\n\nIf a ManagedCluster is selected and added into the PlacementDecisions, other components may apply workload on it; once it is removed from the PlacementDecisions, the workload applied on this ManagedCluster should be evicted accordingly.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the attributes of Placement.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementSpec"
        },
        "status": {
          "description": "Status represents the current status of the Placement",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "Placement",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.PlacementDecision": {
      "description": "PlacementDecision indicates a decision from a placement. PlacementDecision must have a cluster.open-cluster-management.io/placement={placement name} label to reference a certain placement.\n\nIf a placement has spec.numberOfClusters specified, the total number of decisions contained in the status.decisions of PlacementDecisions must be the same as NumberOfClusters. Otherwise, the total number of decisions must equal the number of ManagedClusters that match the placement requirements.\n\nSome of the decisions might be empty when there are not enough ManagedClusters to meet the placement requirements.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "description": "Status represents the current status of the PlacementDecision",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecisionStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PlacementDecision",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.PlacementDecisionList": {
      "description": "ClusterDecisionList is a collection of PlacementDecision.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of PlacementDecision.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PlacementDecision"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PlacementDecisionList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.PlacementDecisionStatus": {
      "description": "PlacementDecisionStatus represents the current status of the PlacementDecision.",
      "type": "object",
      "required": [
        "decisions"
      ],
      "properties": {
        "decisions": {
          "description": "Decisions is a slice of decisions according to a placement The number of decisions should not be larger than 100",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterDecision"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PlacementDecisionStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.PlacementList": {
      "description": "PlacementList is a collection of Placements.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of Placements.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Placement"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PlacementList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.PlacementSpec": {
      "description": "PlacementSpec defines the attributes of Placement. An empty PlacementSpec selects all ManagedClusters from the ManagedClusterSets bound to the placement namespace. The containing fields are ANDed.",
      "type": "object",
      "properties": {
        "clusterSets": {
          "description": "ClusterSets represent the ManagedClusterSets from which the ManagedClusters are selected. If the slice is empty, ManagedClusters will be selected from the ManagedClusterSets bound to the placement namespace, otherwise ManagedClusters will be selected from the intersection of this slice and the ManagedClusterSets bound to the placement namespace.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "decisionStrategy": {
          "description": "DecisionStrategy divide the created placement decision to groups and define number of clusters per decision group.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.DecisionStrategy"
        },
        "numberOfClusters": {
          "description": "NumberOfClusters represents the desired number of ManagedClusters to be selected which meet the placement requirements. 1) If not specified, all ManagedClusters which meet the placement requirements (including ClusterSets,\n   and Predicates) will be selected;\n2) Otherwise if the nubmer of ManagedClusters meet the placement requirements is larger than\n   NumberOfClusters, a random subset with desired number of ManagedClusters will be selected;\n3) If the nubmer of ManagedClusters meet the placement requirements is equal to NumberOfClusters,\n   all of them will be selected;\n4) If the nubmer of ManagedClusters meet the placement requirements is less than NumberOfClusters,\n   all of them will be selected, and the status of condition `PlacementConditionSatisfied` will be\n   set to false;",
          "type": "integer",
          "format": "int32"
        },
        "predicates": {
          "description": "Predicates represent a slice of predicates to select ManagedClusters. The predicates are ORed.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ClusterPredicate"
          }
        },
        "prioritizerPolicy": {
          "description": "PrioritizerPolicy defines the policy of the prioritizers. If this field is unset, then default prioritizer mode and configurations are used. Referring to PrioritizerPolicy to see more description about Mode and Configurations.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PrioritizerPolicy"
        },
        "spreadPolicy": {
          "description": "SpreadPolicy defines how placement decisions should be distributed among a set of ManagedClusters.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.SpreadPolicy"
        },
        "tolerations": {
          "description": "Tolerations are applied to placements, and allow (but do not require) the managed clusters with certain taints to be selected by placements with matching tolerations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.Toleration"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PlacementSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.PlacementStatus": {
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Conditions contains the different condition status for this Placement.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        },
        "decisionGroups": {
          "description": "List of decision groups determined by the placement and DecisionStrategy.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.DecisionGroupStatus"
          }
        },
        "numberOfSelectedClusters": {
          "description": "NumberOfSelectedClusters represents the number of selected ManagedClusters",
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PlacementStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.PrioritizerConfig": {
      "description": "PrioritizerConfig represents the configuration of prioritizer",
      "type": "object",
      "required": [
        "scoreCoordinate"
      ],
      "properties": {
        "scoreCoordinate": {
          "description": "ScoreCoordinate represents the configuration of the prioritizer and score source.",
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.ScoreCoordinate"
        },
        "weight": {
          "description": "Weight defines the weight of the prioritizer score. The value must be ranged in [-10,10]. Each prioritizer will calculate an integer score of a cluster in the range of [-100, 100]. The final score of a cluster will be sum(weight * prioritizer_score). A higher weight indicates that the prioritizer weights more in the cluster selection, while 0 weight indicates that the prioritizer is disabled. A negative weight indicates wants to select the last ones.",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PrioritizerConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.PrioritizerPolicy": {
      "description": "PrioritizerPolicy represents the policy of prioritizer",
      "type": "object",
      "properties": {
        "configurations": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.PrioritizerConfig"
          }
        },
        "mode": {
          "description": "Mode is either Exact, Additive, \"\" where \"\" is Additive by default. In Additive mode, any prioritizer not explicitly enumerated is enabled in its default Configurations, in which Steady and Balance prioritizers have the weight of 1 while other prioritizers have the weight of 0. Additive doesn't require configuring all prioritizers. The default Configurations may change in the future, and additional prioritization will happen. In Exact mode, any prioritizer not explicitly enumerated is weighted as zero. Exact requires knowing the full set of prioritizers you want, but avoids behavior changes between releases.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PrioritizerPolicy",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.ScoreCoordinate": {
      "description": "ScoreCoordinate represents the configuration of the score type and score source",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "addOn": {
          "description": "When type is \"AddOn\", AddOn defines the resource name and score name.",
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.AddOnScore"
        },
        "builtIn": {
          "description": "BuiltIn defines the name of a BuiltIn prioritizer. Below are the valid BuiltIn prioritizer names. 1) Balance: balance the decisions among the clusters. 2) Steady: ensure the existing decision is stabilized. 3) ResourceAllocatableCPU \u0026 ResourceAllocatableMemory: sort clusters based on the allocatable. 4) Spread: spread the workload evenly to topologies.",
          "type": "string"
        },
        "type": {
          "description": "Type defines the type of the prioritizer score. Type is either \"BuiltIn\", \"AddOn\" or \"\", where \"\" is \"BuiltIn\" by default. When the type is \"BuiltIn\", need to specify a BuiltIn prioritizer name in BuiltIn. When the type is \"AddOn\", need to configure the score source in AddOn.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ScoreCoordinate",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.SpreadConstraintsTerm": {
      "description": "SpreadConstraintsTerm defines a terminology to spread placement decisions.",
      "type": "object",
      "required": [
        "topologyKey",
        "topologyKeyType"
      ],
      "properties": {
        "maxSkew": {
          "description": "MaxSkew represents the degree to which the workload may be unevenly distributed. Skew is the maximum difference between the number of selected ManagedClusters in a topology and the global minimum. The global minimum is the minimum number of selected ManagedClusters for the topologies within the same TopologyKey. The minimum possible value of MaxSkew is 1, and the default value is 1.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "topologyKey": {
          "description": "TopologyKey is either a label key or a cluster claim name of ManagedClusters.",
          "type": "string",
          "default": ""
        },
        "topologyKeyType": {
          "description": "TopologyKeyType indicates the type of TopologyKey. It could be Label or Claim.",
          "type": "string",
          "default": ""
        },
        "whenUnsatisfiable": {
          "description": "WhenUnsatisfiable represents the action of the scheduler when MaxSkew cannot be satisfied. It could be DoNotSchedule or ScheduleAnyway. The default value is ScheduleAnyway. DoNotSchedule instructs the scheduler not to schedule more ManagedClusters when MaxSkew is not satisfied. ScheduleAnyway instructs the scheduler to keep scheduling even if MaxSkew is not satisfied.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "SpreadConstraintsTerm",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.SpreadPolicy": {
      "description": "SpreadPolicy defines how the placement decision should be spread among the ManagedClusters.",
      "type": "object",
      "properties": {
        "spreadConstraints": {
          "description": "SpreadConstraints defines how the placement decision should be distributed among a set of ManagedClusters. The importance of the SpreadConstraintsTerms follows the natural order of their index in the slice. The scheduler first consider SpreadConstraintsTerms with smaller index then those with larger index to distribute the placement decision.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta1.SpreadConstraintsTerm"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "SpreadPolicy",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta1.Toleration": {
      "description": "Toleration represents the toleration object that can be attached to a placement. The placement this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
      "type": "object",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSelect, PreferNoSelect and NoSelectIfNew.",
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a placement can tolerate all taints of a particular category.",
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoSelect/PreferNoSelect, otherwise this field is ignored) tolerates the taint. The default value is nil, which indicates it tolerates the taint forever. The start time of counting the TolerationSeconds should be the TimeAdded in Taint, not the cluster scheduled time or TolerationSeconds added time.",
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "Toleration",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSelector": {
      "description": "ManagedClusterSelector represents a selector of ManagedClusters",
      "type": "object",
      "required": [
        "selectorType"
      ],
      "properties": {
        "labelSelector": {
          "description": "LabelSelector define the general labelSelector which clusterset will use to select target managedClusters",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "selectorType": {
          "description": "SelectorType could only be \"ExclusiveClusterSetLabel\" or \"LabelSelector\" \"ExclusiveClusterSetLabel\" means to use label \"cluster.open-cluster-management.io/clusterset:\u003cManagedClusterSet Name\u003e\"\" to select target clusters. \"LabelSelector\" means use labelSelector to select target managedClusters",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "ManagedClusterSelector",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSet": {
      "description": "ManagedClusterSet defines a group of ManagedClusters that you can run workloads on. You can define a workload to be deployed on a ManagedClusterSet. See the following options  for the workload: - The workload can run on any ManagedCluster in the ManagedClusterSet - The workload cannot run on any ManagedCluster outside the ManagedClusterSet - The service exposed by the workload can be shared in any ManagedCluster in the ManagedClusterSet\n\nTo assign a ManagedCluster to a certain ManagedClusterSet, add a label with the name cluster.open-cluster-management.io/clusterset on the ManagedCluster to refer to the ManagedClusterSet. You are not allowed to add or remove this label on a ManagedCluster unless you have an RBAC rule to CREATE on a virtual subresource of managedclustersets/join. To update this label, you must have the permission on both the old and new ManagedClusterSet.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the attributes of the ManagedClusterSet",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetSpec"
        },
        "status": {
          "description": "Status represents the current status of the ManagedClusterSet",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "ManagedClusterSet",
        "Scope": "Clustered"
      }
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding": {
      "description": "ManagedClusterSetBinding projects a ManagedClusterSet into a certain namespace. You can create a ManagedClusterSetBinding in a namespace and bind it to a ManagedClusterSet if both have a RBAC rules to CREATE on the virtual subresource of managedclustersets/bind. Workloads that you create in the same namespace can only be distributed to ManagedClusters in ManagedClusterSets that are bound in this namespace by higher-level controllers.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the attributes of ManagedClusterSetBinding.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBindingSpec"
        },
        "status": {
          "description": "Status represents the current status of the ManagedClusterSetBinding",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBindingStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "ManagedClusterSetBinding",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBindingList": {
      "description": "ManagedClusterSetBindingList is a collection of ManagedClusterSetBinding.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of ManagedClusterSetBinding.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "ManagedClusterSetBindingList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBindingSpec": {
      "description": "ManagedClusterSetBindingSpec defines the attributes of ManagedClusterSetBinding.",
      "type": "object",
      "required": [
        "clusterSet"
      ],
      "properties": {
        "clusterSet": {
          "description": "ClusterSet is the name of the ManagedClusterSet to bind. It must match the instance name of the ManagedClusterSetBinding and cannot change once created. User is allowed to set this field if they have an RBAC rule to CREATE on the virtual subresource of managedclustersets/bind.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "ManagedClusterSetBindingSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSetBindingStatus": {
      "description": "ManagedClusterSetBindingStatus represents the current status of the ManagedClusterSetBinding.",
      "type": "object",
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions contains the different condition statuses for this ManagedClusterSetBinding.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "ManagedClusterSetBindingStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSetList": {
      "description": "ManagedClusterSetList is a collection of ManagedClusterSet.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of ManagedClusterSet.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "ManagedClusterSetList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSetSpec": {
      "description": "ManagedClusterSetSpec describes the attributes of the ManagedClusterSet",
      "type": "object",
      "properties": {
        "clusterSelector": {
          "description": "ClusterSelector represents a selector of ManagedClusters",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.cluster.v1beta2.ManagedClusterSelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "ManagedClusterSetSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.cluster.v1beta2.ManagedClusterSetStatus": {
      "description": "ManagedClusterSetStatus represents the current status of the ManagedClusterSet.",
      "type": "object",
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions contains the different condition statuses for this ManagedClusterSet.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "cluster.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "ManagedClusterSetStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1.DiscoveredCluster": {
      "description": "DiscoveredCluster is the Schema for the discoveredclusters API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredClusterSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredClusterStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1",
        "Kind": "DiscoveredCluster",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1.DiscoveredClusterCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "LastTransitionTime is the last time the condition changed from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastUpdateTime": {
          "description": "The last time this condition was updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "status": {
          "description": "Status is the status of the condition. One of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the discovered cluster condition.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1",
        "Kind": "DiscoveredClusterCondition",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1.DiscoveredClusterList": {
      "description": "DiscoveredClusterList contains a list of DiscoveredCluster",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredCluster"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1",
        "Kind": "DiscoveredClusterList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1.DiscoveredClusterSpec": {
      "description": "DiscoveredClusterSpec defines the desired state of DiscoveredCluster",
      "type": "object",
      "required": [
        "apiUrl",
        "displayName",
        "isManagedCluster",
        "name",
        "type"
      ],
      "properties": {
        "activityTimestamp": {
          "description": "ActivityTimestamp ...",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "apiUrl": {
          "description": "APIURL ...",
          "type": "string",
          "default": ""
        },
        "cloudProvider": {
          "description": "CloudProvider ...",
          "type": "string"
        },
        "console": {
          "description": "Console ...",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp ...",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "credential": {
          "description": "Credential ...",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "displayName": {
          "description": "DisplayName ...",
          "type": "string",
          "default": ""
        },
        "importAsManagedCluster": {
          "description": "ImportAsManagedCluster ...",
          "type": "boolean"
        },
        "isManagedCluster": {
          "description": "IsManagedCluster ...",
          "type": "boolean",
          "default": false
        },
        "name": {
          "description": "Name ...",
          "type": "string",
          "default": ""
        },
        "ocpClusterId": {
          "description": "OCPClusterID ...",
          "type": "string"
        },
        "openshiftVersion": {
          "description": "OpenshiftVersion ...",
          "type": "string"
        },
        "owner": {
          "description": "Owner ...",
          "type": "string"
        },
        "region": {
          "description": "Region ...",
          "type": "string"
        },
        "rhocmClusterId": {
          "description": "RHOCMClusterID ...",
          "type": "string"
        },
        "status": {
          "description": "Status ...",
          "type": "string"
        },
        "type": {
          "description": "Type ...",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1",
        "Kind": "DiscoveredClusterSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1.DiscoveredClusterStatus": {
      "description": "DiscoveredClusterStatus defines the observed state of DiscoveredCluster",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveredClusterCondition"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1",
        "Kind": "DiscoveredClusterStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1.DiscoveryConfig": {
      "description": "DiscoveryConfig is the Schema for the discoveryconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfigSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfigStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1",
        "Kind": "DiscoveryConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1.DiscoveryConfigList": {
      "description": "DiscoveryConfigList contains a list of DiscoveryConfig",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.discovery.v1.DiscoveryConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1",
        "Kind": "DiscoveryConfigList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1.DiscoveryConfigSpec": {
      "description": "DiscoveryConfigSpec defines the desired state of DiscoveryConfig",
      "type": "object",
      "required": [
        "credential"
      ],
      "properties": {
        "credential": {
          "description": "Credential is the secret containing credentials to connect to the OCM api on behalf of a user",
          "type": "string",
          "default": ""
        },
        "filters": {
          "description": "Sets restrictions on what kind of clusters to discover",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.discovery.v1.Filter"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1",
        "Kind": "DiscoveryConfigSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1.DiscoveryConfigStatus": {
      "description": "DiscoveryConfigStatus defines the observed state of DiscoveryConfig",
      "type": "object",
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1",
        "Kind": "DiscoveryConfigStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1.Filter": {
      "description": "Filter ...",
      "type": "object",
      "properties": {
        "lastActive": {
          "description": "LastActive is the last active in days of clusters to discover, determined by activity timestamp",
          "type": "integer",
          "format": "int32"
        },
        "openShiftVersions": {
          "description": "OpenShiftVersions is the list of release versions of OpenShift of the form \"\u003cMajor\u003e.\u003cMinor\u003e\"",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1",
        "Kind": "Filter",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster": {
      "description": "DiscoveredCluster is the Schema for the discoveredclusters API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredClusterSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredClusterStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "DiscoveredCluster",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1alpha1.DiscoveredClusterList": {
      "description": "DiscoveredClusterList contains a list of DiscoveredCluster",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveredCluster"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "DiscoveredClusterList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1alpha1.DiscoveredClusterSpec": {
      "description": "DiscoveredClusterSpec defines the desired state of DiscoveredCluster",
      "type": "object",
      "required": [
        "name",
        "displayName",
        "apiUrl",
        "type",
        "isManagedCluster"
      ],
      "properties": {
        "activityTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "apiUrl": {
          "type": "string",
          "default": ""
        },
        "cloudProvider": {
          "type": "string"
        },
        "console": {
          "type": "string"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "credential": {
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "displayName": {
          "type": "string",
          "default": ""
        },
        "isManagedCluster": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "type": "string",
          "default": ""
        },
        "openshiftVersion": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "DiscoveredClusterSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1alpha1.DiscoveredClusterStatus": {
      "description": "DiscoveredClusterStatus defines the observed state of DiscoveredCluster",
      "type": "object",
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "DiscoveredClusterStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig": {
      "description": "DiscoveryConfig is the Schema for the discoveryconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfigSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfigStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "DiscoveryConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1alpha1.DiscoveryConfigList": {
      "description": "DiscoveryConfigList contains a list of DiscoveryConfig",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.DiscoveryConfig"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "DiscoveryConfigList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1alpha1.DiscoveryConfigSpec": {
      "description": "DiscoveryConfigSpec defines the desired state of DiscoveryConfig",
      "type": "object",
      "required": [
        "credential"
      ],
      "properties": {
        "credential": {
          "description": "Credential is the secret containing credentials to connect to the OCM api on behalf of a user",
          "type": "string",
          "default": ""
        },
        "filters": {
          "description": "Sets restrictions on what kind of clusters to discover",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.discovery.v1alpha1.Filter"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "DiscoveryConfigSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1alpha1.DiscoveryConfigStatus": {
      "description": "DiscoveryConfigStatus defines the observed state of DiscoveryConfig",
      "type": "object",
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "DiscoveryConfigStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.discovery.v1alpha1.Filter": {
      "description": "Filter ...",
      "type": "object",
      "properties": {
        "lastActive": {
          "description": "LastActive is the last active in days of clusters to discover, determined by activity timestamp",
          "type": "integer",
          "format": "int32"
        },
        "openShiftVersions": {
          "description": "OpenShiftVersions is the list of release versions of OpenShift of the form \"\u003cMajor\u003e.\u003cMinor\u003e\"",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "discovery.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "Filter",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta1.MultiClusterObservability": {
      "description": "MultiClusterObservability defines the configuration for the Observability installation on Hub and Managed Clusters all through this one custom resource.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservabilitySpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservabilityStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "MultiClusterObservability",
        "Scope": "Clustered"
      }
    },
    "io.open-cluster-management.observability.v1beta1.MultiClusterObservabilityList": {
      "description": "MultiClusterObservabilityList contains a list of MultiClusterObservability",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.MultiClusterObservability"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "MultiClusterObservabilityList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta1.MultiClusterObservabilitySpec": {
      "description": "MultiClusterObservabilitySpec defines the desired state of MultiClusterObservability.",
      "type": "object",
      "required": [
        "storageConfigObject"
      ],
      "properties": {
        "availabilityConfig": {
          "description": "ReplicaCount for HA support. Does not affect data stores. Enabled will toggle HA support. This will provide better support in cases of failover but consumes more resources. Options are: Basic and High (default).",
          "type": "string"
        },
        "enableDownSampling": {
          "description": "Enable or disable the downsample. The default value is false. This is not recommended as querying long time ranges without non-downsampled data is not efficient and useful.",
          "type": "boolean",
          "default": false
        },
        "imagePullPolicy": {
          "description": "Pull policy of the MultiClusterObservability images",
          "type": "string"
        },
        "imagePullSecret": {
          "description": "Pull secret of the MultiClusterObservability images",
          "type": "string"
        },
        "nodeSelector": {
          "description": "Spec of NodeSelector",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "observabilityAddonSpec": {
          "description": "The ObservabilityAddonSpec defines the global settings for all managed clusters which have observability add-on enabled.",
          "$ref": "#/definitions/com.github.stolostron.multicluster-observability-operator.operators.multiclusterobservability.api.shared.ObservabilityAddonSpec"
        },
        "retentionResolution1h": {
          "description": "How long to retain samples of resolution 2 (1 hour) in bucket.",
          "type": "string"
        },
        "retentionResolution5m": {
          "description": "How long to retain samples of resolution 1 (5 minutes) in bucket.",
          "type": "string"
        },
        "retentionResolutionRaw": {
          "description": "How long to retain raw samples in a bucket.",
          "type": "string"
        },
        "storageConfigObject": {
          "description": "Specifies the storage to be used by Observability",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.StorageConfigObject"
        },
        "tolerations": {
          "description": "Tolerations causes all components to tolerate any taints.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "MultiClusterObservabilitySpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta1.MultiClusterObservabilityStatus": {
      "description": "MultiClusterObservabilityStatus defines the observed state of MultiClusterObservability.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Represents the status of each deployment",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.stolostron.multicluster-observability-operator.operators.multiclusterobservability.api.shared.Condition"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "MultiClusterObservabilityStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta1.ObservabilityAddon": {
      "description": "ObservabilityAddon is the Schema for the observabilityaddon API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/com.github.stolostron.multicluster-observability-operator.operators.multiclusterobservability.api.shared.ObservabilityAddonSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddonStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ObservabilityAddon",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta1.ObservabilityAddonList": {
      "description": "ObservabilityAddonList contains a list of ObservabilityAddon",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.ObservabilityAddon"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ObservabilityAddonList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta1.ObservabilityAddonStatus": {
      "description": "ObservabilityAddonStatus defines the observed state of ObservabilityAddon",
      "type": "object",
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.observability.v1beta1.StatusCondition"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ObservabilityAddonStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta1.StatusCondition": {
      "description": "StatusCondition contains condition information for an observability addon",
      "type": "object",
      "required": [
        "type",
        "status",
        "lastTransitionTime",
        "reason",
        "message"
      ],
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "type": "string",
          "default": ""
        },
        "reason": {
          "type": "string",
          "default": ""
        },
        "status": {
          "type": "string",
          "default": ""
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "StatusCondition",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta1.StorageConfigObject": {
      "description": "StorageConfigObject is the spec of object storage.",
      "type": "object",
      "required": [
        "metricObjectStorage"
      ],
      "properties": {
        "metricObjectStorage": {
          "description": "Object store config secret for metrics",
          "$ref": "#/definitions/com.github.stolostron.multicluster-observability-operator.operators.multiclusterobservability.api.shared.PreConfiguredStorage"
        },
        "statefulSetSize": {
          "description": "The amount of storage applied to the Observability stateful sets, i.e. Thanos store, Rule, compact and receiver.",
          "type": "string"
        },
        "statefulSetStorageClass": {
          "description": "Specify the storageClass Stateful Sets. This storage class will also\nbe used for Object Storage if MetricObjectStorage was configured for the system to create the storage.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "StorageConfigObject",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.AdvancedConfig": {
      "type": "object",
      "properties": {
        "alertmanager": {
          "description": "The spec of alertmanager",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.AlertmanagerSpec"
        },
        "compact": {
          "description": "spec for thanos-compact",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.CompactSpec"
        },
        "customAlertmanagerHubURL": {
          "description": "CustomAlertmanagerHubURL overrides the alertmanager URL to send alerts from the spoke to the hub server. For the alertmanager that runs in the hub this setting has no effect.",
          "type": "string"
        },
        "customObservabilityHubURL": {
          "description": "CustomObservabilityHubURL overrides the endpoint used by the metrics-collector to send metrics to the hub server. For the metrics-collector that runs in the hub this setting has no effect.",
          "type": "string"
        },
        "grafana": {
          "description": "The spec of grafana",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.CommonSpec"
        },
        "multiClusterObservabilityAddon": {
          "description": "spec for multicluster-obervability-addon",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.CommonSpec"
        },
        "observatoriumAPI": {
          "description": "Spec of observatorium api",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.CommonSpec"
        },
        "query": {
          "description": "spec for thanos-query",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.QuerySpec"
        },
        "queryFrontend": {
          "description": "spec for thanos-query-frontend",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.QueryFrontendSpec"
        },
        "queryFrontendMemcached": {
          "description": "Specifies the store memcached",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.CacheConfig"
        },
        "rbacQueryProxy": {
          "description": "The spec of rbac-query-proxy",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.CommonSpec"
        },
        "receive": {
          "description": "spec for thanos-receiver",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.ReceiveSpec"
        },
        "retentionConfig": {
          "description": "The spec of the data retention configurations",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.RetentionConfig"
        },
        "rule": {
          "description": "spec for thanos-rule",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.RuleSpec"
        },
        "store": {
          "description": "spec for thanos-store-shard",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.StoreSpec"
        },
        "storeMemcached": {
          "description": "Specifies the store memcached",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.CacheConfig"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "AdvancedConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.AlertmanagerSpec": {
      "description": "AlertmanagerSpec defines the spec for the Alertmanager component.",
      "type": "object",
      "properties": {
        "replicas": {
          "description": "Replicas for this component.",
          "type": "integer",
          "format": "int32"
        },
        "resources": {
          "description": "Compute Resources required by this component.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "secrets": {
          "description": "Secrets is a list of Secrets in the same namespace as the MCO object. Each of these Secrets shall be mounted into the Alertmanager Pods. Secrets are added to the StatefulSet as a volume named secret-\u003csecret-name\u003e. Secrets are mounted into /etc/alertmanager/secrets/\u003csecret-name\u003e in the 'alertmanager' container.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "AlertmanagerSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.CacheConfig": {
      "description": "CacheConfig is the spec of memcached.",
      "type": "object",
      "properties": {
        "connectionLimit": {
          "description": "Max simultaneous connections of Memcached.",
          "type": "integer",
          "format": "int32"
        },
        "maxItemSize": {
          "description": "Max item size of Memcached (default: 1m, min: 1k, max: 1024m).",
          "type": "string"
        },
        "memoryLimitMb": {
          "description": "Memory limit of Memcached in megabytes.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas for this component.",
          "type": "integer",
          "format": "int32"
        },
        "resources": {
          "description": "Compute Resources required by this component.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "CacheConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.CapabilitiesSpec": {
      "description": "CapabilitiesSpec defines the platform and user workload observabilities capabilities managed exclusively by the multicluster-observability-addon. Enabling any of these capabilities will result in deploying the following resources:\n  - The addon Deployment, ServiceAccount and RBAC.\n  - A ClusterManagementAddon managing placement for capability related custom resources.\n  - An AddonDeploymentConfig managing the addon feature gates for activated capabilities.",
      "type": "object",
      "properties": {
        "platform": {
          "description": "Platform defines the spec for platform observability capabilities managed by the addon. The platform is defined as the ACM/OCM/OCP components running on managed clusters to run, manage and observe the managed clusters themselves locally as well as remotely from a hub. Such components live on namespaces with prefixes for example:\n  - openshift-\n  - open-cluster-management-\n  - default",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.PlatformCapabilitiesSpec"
        },
        "userWorkloads": {
          "description": "UserWorkloads defines the spec for user workloads observability capabilities managed by the addon. As user workloads are defined any containers hosted on spoke clusters and execute any task unrelated to managing the fleet or the individual managed cluster itself.",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.UserWorkloadCapabilitiesSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "CapabilitiesSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.ClusterLogForwarderSpec": {
      "description": "ClusterLogForwarderSpec defines the spec for the addon to collect and forward logs using the ClusterLogForwarder custom resource.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled defines a flag to enable/disable the platform log collection using the ClusterLogForwarder resource.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "ClusterLogForwarderSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.CommonSpec": {
      "type": "object",
      "properties": {
        "replicas": {
          "description": "Replicas for this component.",
          "type": "integer",
          "format": "int32"
        },
        "resources": {
          "description": "Compute Resources required by this component.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "CommonSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.CompactSpec": {
      "description": "Thanos Compact Spec.",
      "type": "object",
      "properties": {
        "containers": {
          "description": "WARNING: Use only with guidance from Red Hat Support. Using this feature incorrectly can lead to an unrecoverable state, data loss, or both, which is not covered by Red Hat Support.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          }
        },
        "resources": {
          "description": "Compute Resources required by the compact.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "serviceAccountAnnotations": {
          "description": "Annotations is an unstructured key value map stored with a service account",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "CompactSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.InstrumentationSpec": {
      "description": "OpenTelemetryCollectorSpec defines the spec for the addon to collect observability signals using the Instrumentation custom resource.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled defines a flag to enable/disable the user workload observability collection using the Instrumentation resource.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "InstrumentationSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.MultiClusterObservability": {
      "description": "MultiClusterObservability defines the configuration for the Observability installation on Hub and Managed Clusters all through this one custom resource.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservabilitySpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservabilityStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "MultiClusterObservability",
        "Scope": "Clustered"
      }
    },
    "io.open-cluster-management.observability.v1beta2.MultiClusterObservabilityList": {
      "description": "MultiClusterObservabilityList contains a list of MultiClusterObservability",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.MultiClusterObservability"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "MultiClusterObservabilityList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.MultiClusterObservabilitySpec": {
      "description": "MultiClusterObservabilitySpec defines the desired state of MultiClusterObservability.",
      "type": "object",
      "required": [
        "storageConfig",
        "observabilityAddonSpec"
      ],
      "properties": {
        "advanced": {
          "description": "Advanced configurations for observability",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.AdvancedConfig"
        },
        "capabilities": {
          "description": "Capabilities defines the platform and user workload observabilities capabilities managed exclusively by the multicluster-observability-addon. Enabling any of these capabilities will result in deploying the following resources:\n  - The addon Deployment, ServiceAccount and RBAC.\n  - A ClusterManagementAddon managing placement for capability related custom resources.\n  - An AddonDeploymentConfig managing the addon feature gates for activated capabilities.",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.CapabilitiesSpec"
        },
        "enableDownsampling": {
          "description": "Enable or disable the downsample.",
          "type": "boolean",
          "default": false
        },
        "imagePullPolicy": {
          "description": "Pull policy of the MultiClusterObservability images",
          "type": "string"
        },
        "imagePullSecret": {
          "description": "Pull secret of the MultiClusterObservability images",
          "type": "string"
        },
        "instanceSize": {
          "description": "Size read and write paths of your Observability instance",
          "type": "string"
        },
        "nodeSelector": {
          "description": "Spec of NodeSelector",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "observabilityAddonSpec": {
          "description": "The ObservabilityAddonSpec defines the global settings for all managed clusters which have observability add-on enabled.",
          "$ref": "#/definitions/com.github.stolostron.multicluster-observability-operator.operators.multiclusterobservability.api.shared.ObservabilityAddonSpec"
        },
        "storageConfig": {
          "description": "Specifies the storage to be used by Observability",
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.StorageConfig"
        },
        "tolerations": {
          "description": "Tolerations causes all components to tolerate any taints.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "MultiClusterObservabilitySpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.MultiClusterObservabilityStatus": {
      "description": "MultiClusterObservabilityStatus defines the observed state of MultiClusterObservability.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Represents the status of each deployment",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/com.github.stolostron.multicluster-observability-operator.operators.multiclusterobservability.api.shared.Condition"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "MultiClusterObservabilityStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.OpenTelemetryCollectionSpec": {
      "description": "OpenTelemetryCollectionSpec defines the spec for the addon to collect and forward observability signals from user workloads hosted on fleet managed clusters using the OpenTelemetryCollector with or without instrumentation.",
      "type": "object",
      "properties": {
        "collector": {
          "description": "Collector defines the spec for the user workload observability collection using the OpenTelemetryCollector resource.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.OpenTelemetryCollectorSpec"
        },
        "instrumentation": {
          "description": "Instrumentation defines the spec for the user workload observability collection using the Instrumentation resource.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.InstrumentationSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "OpenTelemetryCollectionSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.OpenTelemetryCollectorSpec": {
      "description": "OpenTelemetryCollectorSpec defines the spec for the addon to collect and forward observability signals using the OpenTelemetryCollector custom resource.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled defines a flag to enable/disable the user workload observability collection using the OpenTelemetryCollector resource.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "OpenTelemetryCollectorSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.PlatformAnalyticsSpec": {
      "type": "object",
      "properties": {
        "incidentDetection": {
          "description": "Incident detecion defines the configuration spec for the incident detection feature delivered via the cluster observability operator. If enabled, adds incidents UI to `Observe` section of OpenShift Console Platform",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.PlatformIncidentDetectionSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "PlatformAnalyticsSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.PlatformCapabilitiesSpec": {
      "description": "PlatformCapabilitiesSpec defines the observability capabilities managed by the addon for platform components.",
      "type": "object",
      "properties": {
        "analytics": {
          "description": "Analytics provides the configuration for the analytics features",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.PlatformAnalyticsSpec"
        },
        "logs": {
          "description": "Logs defines the configuration spec for collecting and storing logs from platform components running on fleet managed clusters.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.PlatformLogsSpec"
        },
        "metrics": {
          "description": "Metrics defines the configuration spec for collecting and storing metrics from platform components running on fleet managed clusters.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.PlatformMetricsSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "PlatformCapabilitiesSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.PlatformIncidentDetectionSpec": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled defines a flag to enable/disable the incident detection.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "PlatformIncidentDetectionSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.PlatformLogsCollectionSpec": {
      "description": "PlatformLogsCollectionSpec defines the spec for the addon to collect and forward logs from fleet managed clusters using the ClusterLogForwarder custom resource.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled defines a flag to enable/disable the platform log collection.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "PlatformLogsCollectionSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.PlatformLogsSpec": {
      "description": "PlatformLogsSpec defines the spec for the addon to collect, forward and store logs from fleet managed clusters.",
      "type": "object",
      "properties": {
        "collection": {
          "description": "Collection defines the spec for the addon to collect and forward logs from fleet managed clusters.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.PlatformLogsCollectionSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "PlatformLogsSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.PlatformMetricsCollectionSpec": {
      "description": "PlatformMetricsCollectionSpec defines the spec for the addon to collect and forward metrics from fleet managed clusters.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled defines a flag to enable/disable the platform metrics collection.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "PlatformMetricsCollectionSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.PlatformMetricsSpec": {
      "description": "PlatformMetricsSpec defines the spec for the addon to collect, forward and store metrics from fleet managed clusters.",
      "type": "object",
      "properties": {
        "collection": {
          "description": "Collection defines the spec for the addon to collect and forward metrics from fleet managed clusters.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.PlatformMetricsCollectionSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "PlatformMetricsSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.QueryFrontendSpec": {
      "description": "Thanos QueryFrontend Spec.",
      "type": "object",
      "properties": {
        "containers": {
          "description": "WARNING: Use only with guidance from Red Hat Support. Using this feature incorrectly can lead to an unrecoverable state, data loss, or both, which is not covered by Red Hat Support.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          }
        },
        "replicas": {
          "description": "Replicas for this component.",
          "type": "integer",
          "format": "int32"
        },
        "resources": {
          "description": "Compute Resources required by this component.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "QueryFrontendSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.QuerySpec": {
      "description": "Thanos Query Spec.",
      "type": "object",
      "properties": {
        "containers": {
          "description": "WARNING: Use only with guidance from Red Hat Support. Using this feature incorrectly can lead to an unrecoverable state, data loss, or both, which is not covered by Red Hat Support.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          }
        },
        "replicas": {
          "description": "Replicas for this component.",
          "type": "integer",
          "format": "int32"
        },
        "resources": {
          "description": "Compute Resources required by this component.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "serviceAccountAnnotations": {
          "description": "Annotations is an unstructured key value map stored with a service account",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "usePrometheusEngine": {
          "description": "Set to true to use the old Prometheus engine for PromQL queries.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "QuerySpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.ReceiveSpec": {
      "description": "Thanos Receive Spec.",
      "type": "object",
      "properties": {
        "containers": {
          "description": "WARNING: Use only with guidance from Red Hat Support. Using this feature incorrectly can lead to an unrecoverable state, data loss, or both, which is not covered by Red Hat Support.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          }
        },
        "replicas": {
          "description": "Replicas for this component.",
          "type": "integer",
          "format": "int32"
        },
        "resources": {
          "description": "Compute Resources required by this component.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "serviceAccountAnnotations": {
          "description": "Annotations is an unstructured key value map stored with a service account",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "ReceiveSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.RetentionConfig": {
      "description": "RetentionConfig is the spec of retention configurations.",
      "type": "object",
      "properties": {
        "blockDuration": {
          "description": "configure --tsdb.block-duration in rule (Block duration for TSDB block)",
          "type": "string"
        },
        "deleteDelay": {
          "description": "configure --delete-delay in compact Time before a block marked for deletion is deleted from bucket.",
          "type": "string"
        },
        "retentionInLocal": {
          "description": "How long to retain raw samples in a local disk. It applies to rule/receive: --tsdb.retention in receive --tsdb.retention in rule",
          "type": "string"
        },
        "retentionResolution1h": {
          "description": "How long to retain samples of resolution 2 (1 hour) in bucket. It applies to --retention.resolution-1h in compact.",
          "type": "string"
        },
        "retentionResolution5m": {
          "description": "How long to retain samples of resolution 1 (5 minutes) in bucket. It applies to --retention.resolution-5m in compact.",
          "type": "string"
        },
        "retentionResolutionRaw": {
          "description": "How long to retain raw samples in a bucket. It applies to --retention.resolution-raw in compact.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "RetentionConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.RuleSpec": {
      "description": "Thanos Rule Spec.",
      "type": "object",
      "properties": {
        "containers": {
          "description": "WARNING: Use only with guidance from Red Hat Support. Using this feature incorrectly can lead to an unrecoverable state, data loss, or both, which is not covered by Red Hat Support.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          }
        },
        "evalInterval": {
          "description": "Evaluation interval",
          "type": "string"
        },
        "replicas": {
          "description": "Replicas for this component.",
          "type": "integer",
          "format": "int32"
        },
        "resources": {
          "description": "Compute Resources required by this component.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "serviceAccountAnnotations": {
          "description": "Annotations is an unstructured key value map stored with a service account",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "RuleSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.StorageConfig": {
      "description": "StorageConfig is the spec of object storage.",
      "type": "object",
      "required": [
        "metricObjectStorage"
      ],
      "properties": {
        "alertmanagerStorageSize": {
          "description": "The amount of storage applied to alertmanager stateful sets,",
          "type": "string"
        },
        "compactStorageSize": {
          "description": "The amount of storage applied to thanos compact stateful sets,",
          "type": "string"
        },
        "metricObjectStorage": {
          "description": "Object store config secret for metrics",
          "$ref": "#/definitions/com.github.stolostron.multicluster-observability-operator.operators.multiclusterobservability.api.shared.PreConfiguredStorage"
        },
        "receiveStorageSize": {
          "description": "The amount of storage applied to thanos receive stateful sets,",
          "type": "string"
        },
        "ruleStorageSize": {
          "description": "The amount of storage applied to thanos rule stateful sets,",
          "type": "string"
        },
        "storageClass": {
          "description": "Specify the storageClass Stateful Sets. This storage class will also be used for Object Storage if MetricObjectStorage was configured for the system to create the storage.",
          "type": "string"
        },
        "storeStorageSize": {
          "description": "The amount of storage applied to thanos store stateful sets,",
          "type": "string"
        },
        "writeStorage": {
          "description": "WriteStorage storage config secret list for metrics",
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.github.stolostron.multicluster-observability-operator.operators.multiclusterobservability.api.shared.PreConfiguredStorage"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "StorageConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.StoreSpec": {
      "description": "Thanos Store Spec.",
      "type": "object",
      "properties": {
        "containers": {
          "description": "WARNING: Use only with guidance from Red Hat Support. Using this feature incorrectly can lead to an unrecoverable state, data loss, or both, which is not covered by Red Hat Support.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          }
        },
        "replicas": {
          "description": "Replicas for this component.",
          "type": "integer",
          "format": "int32"
        },
        "resources": {
          "description": "Compute Resources required by this component.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "serviceAccountAnnotations": {
          "description": "Annotations is an unstructured key value map stored with a service account",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "StoreSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.UserWorkloadCapabilitiesSpec": {
      "description": "UserWorkloadCapabilitiesSpec defines the spec for user workload observability capabilities managed by the addon.",
      "type": "object",
      "properties": {
        "logs": {
          "description": "Logs defines the spec for the addon to collect, forward and store logs from user workloads hosted on fleet managed clusters.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.UserWorkloadLogsSpec"
        },
        "metrics": {
          "description": "Metrics defines the spec for the addon to collect, forward and store metrics from user workloads hosted on fleet managed clusters.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.UserWorkloadMetricsSpec"
        },
        "traces": {
          "description": "Traces defines the spec for the addon to collect, forward and store traces from user workloads hosted on fleet managed clusters.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.UserWorkloadTracesSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "UserWorkloadCapabilitiesSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.UserWorkloadLogsCollectionSpec": {
      "description": "UserWorkloadLogsCollectionSpec defines the spec for the addon to collect and forward logs from user workloads hosted on fleet managed clusters.",
      "type": "object",
      "properties": {
        "clusterLogForwarder": {
          "description": "Enabled defines a flag to enable/disable the platform log collection using the ClusterLogForwarder resource.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.ClusterLogForwarderSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "UserWorkloadLogsCollectionSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.UserWorkloadLogsSpec": {
      "description": "UserWorkloadLogsSpec defines the spec for the addon to collect,forward and store logs from user workloads hosted on fleet managed clusters.",
      "type": "object",
      "properties": {
        "collection": {
          "description": "Collection defines the spec for the addon to collect and forward logs from user workloads hosted on fleet managed clusters.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.UserWorkloadLogsCollectionSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "UserWorkloadLogsSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.UserWorkloadMetricsCollectionSpec": {
      "description": "UserWorkloadLogsSpec defines the spec for the addon to collect,forward and store logs from user workloads hosted on fleet managed clusters.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled defines a flag to enable/disable the platform metrics collection.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "UserWorkloadMetricsCollectionSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.UserWorkloadMetricsSpec": {
      "description": "UserWorkloadMetricsSpec defines the spec for the addon to collect, forward and store metrics from user workloads hosted on fleet managed clusters.",
      "type": "object",
      "properties": {
        "collection": {
          "description": "Collection defines the spec for the addon to collect and forward metrics from user workloads hosted on fleet managed clusters.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.UserWorkloadMetricsCollectionSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "UserWorkloadMetricsSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.observability.v1beta2.UserWorkloadTracesSpec": {
      "description": "UserWorkloadTracesSpec defines the spec for the addon to collect, forward and store traces from user workloads hosted on fleet managed clusters.",
      "type": "object",
      "properties": {
        "collection": {
          "description": "Collection defines the spec for the addon to collect and forward traces from user workloads hosted on fleet managed clusters.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.observability.v1beta2.OpenTelemetryCollectionSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "observability.open-cluster-management.io",
        "Version": "v1beta2",
        "Kind": "UserWorkloadTracesSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.AddOnManagerConfiguration": {
      "type": "object",
      "properties": {
        "featureGates": {
          "description": "FeatureGates represents the list of feature gates for addon manager If it is set empty, default feature gates will be used. If it is set, featuregate/Foo is an example of one item in FeatureGates:\n  1. If featuregate/Foo does not exist, registration-operator will discard it\n  2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true]\n  3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false,\n \the can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.FeatureGate"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "AddOnManagerConfiguration",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.AwsIrsa": {
      "type": "object",
      "required": [
        "hubClusterArn",
        "managedClusterArn"
      ],
      "properties": {
        "hubClusterArn": {
          "description": "The arn of the hub cluster (ie: an EKS cluster). This will be required to pass information to hub, which hub will use to create IAM identities for this klusterlet. Example - arn:eks:us-west-2:12345678910:cluster/hub-cluster1.",
          "type": "string",
          "default": ""
        },
        "managedClusterArn": {
          "description": "The arn of the managed cluster (ie: an EKS cluster). This will be required to generate the md5hash which will be used as a suffix to create IAM role on hub as well as used by kluslerlet-agent, to assume role suffixed with the md5hash, on startup. Example - arn:eks:us-west-2:12345678910:cluster/managed-cluster1.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "AwsIrsa",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.AwsIrsaConfig": {
      "type": "object",
      "properties": {
        "autoApprovedIdentities": {
          "description": "AutoApprovedIdentities represent a list of approved arn patterns",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "hubClusterArn": {
          "description": "This represents the hub cluster ARN Example - arn:eks:us-west-2:12345678910:cluster/hub-cluster1",
          "type": "string"
        },
        "tags": {
          "description": "List of tags to be added to AWS resources created by hub while processing awsirsa registration request Example - \"product:v1:tenant:app-name=My-App\"",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "AwsIrsaConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.BackupConfig": {
      "description": "BackupConfig contains settings for the Velero backup integration.",
      "type": "object",
      "properties": {
        "minBackupPeriodSeconds": {
          "description": "(Deprecated) MinBackupPeriodSeconds specifies that a minimum of MinBackupPeriodSeconds will occur in between each backup. This is used to rate limit backups. This potentially batches together multiple changes into 1 backup. No backups will be lost as changes that happen during this interval are queued up and will result in a backup happening once the interval has been completed.",
          "type": "integer",
          "format": "int32"
        },
        "velero": {
          "description": "(Deprecated) Velero specifies configuration for the Velero backup integration.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.VeleroBackupConfig"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "BackupConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.BlockDeletionResource": {
      "type": "object",
      "required": [
        "Name",
        "GVK",
        "ExceptionTotal",
        "NameExceptions",
        "LabelExceptions"
      ],
      "properties": {
        "ExceptionTotal": {
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "GVK": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.schema.GroupVersionKind"
        },
        "LabelExceptions": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "Name": {
          "type": "string",
          "default": ""
        },
        "NameExceptions": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "BlockDeletionResource",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.BootstrapKubeConfigs": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "localSecretsConfig": {
          "description": "LocalSecretsConfig include a list of secrets that contains the kubeconfigs for ordered bootstrap kubeconifigs. The secrets must be in the same namespace where the agent controller runs.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.LocalSecretsConfig"
        },
        "type": {
          "description": "Type specifies the type of priority bootstrap kubeconfigs. By default, it is set to None, representing no priority bootstrap kubeconfigs are set.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "BootstrapKubeConfigs",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.CSRConfig": {
      "type": "object",
      "properties": {
        "autoApprovedIdentities": {
          "description": "AutoApprovedIdentities represent a list of approved users",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "CSRConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ClusterManager": {
      "description": "ClusterManager configures the controllers on the hub that govern registration and work distribution for attached Klusterlets. In Default mode, ClusterManager will only be deployed in open-cluster-management-hub namespace. In Hosted mode, ClusterManager will be deployed in the namespace with the same name as cluster manager.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManagerSpec"
        },
        "status": {
          "description": "Status represents the current status of controllers that govern the lifecycle of managed clusters.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManagerStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ClusterManager",
        "Scope": "Clustered"
      }
    },
    "io.open-cluster-management.operator.v1.ClusterManagerDeployOption": {
      "description": "ClusterManagerDeployOption describes the deployment options for cluster-manager",
      "type": "object",
      "required": [
        "mode"
      ],
      "properties": {
        "hosted": {
          "description": "Hosted includes configurations we need for clustermanager in the Hosted mode.",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.HostedClusterManagerConfiguration"
        },
        "mode": {
          "description": "Mode can be Default or Hosted. In Default mode, the Hub is installed as a whole and all parts of Hub are deployed in the same cluster. In Hosted mode, only crd and configurations are installed on one cluster(defined as hub-cluster). Controllers run in another cluster (defined as management-cluster) and connect to the hub with the kubeconfig in secret of \"external-hub-kubeconfig\"(a kubeconfig of hub-cluster with cluster-admin permission). Note: Do not modify the Mode field once it's applied.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ClusterManagerDeployOption",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ClusterManagerList": {
      "description": "ClusterManagerList is a collection of deployment configurations for registration and work distribution controllers.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of deployment configurations for registration and work distribution controllers.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManager"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ClusterManagerList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ClusterManagerSpec": {
      "description": "ClusterManagerSpec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.",
      "type": "object",
      "properties": {
        "addOnManagerConfiguration": {
          "description": "AddOnManagerConfiguration contains the configuration of addon manager",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.AddOnManagerConfiguration"
        },
        "addOnManagerImagePullSpec": {
          "description": "AddOnManagerImagePullSpec represents the desired image configuration of addon manager controller/webhook installed on hub.",
          "type": "string"
        },
        "deployOption": {
          "description": "DeployOption contains the options of deploying a cluster-manager Default mode is used if DeployOption is not set.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.ClusterManagerDeployOption"
        },
        "nodePlacement": {
          "description": "NodePlacement enables explicit control over the scheduling of the deployed pods.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.NodePlacement"
        },
        "placementImagePullSpec": {
          "description": "PlacementImagePullSpec represents the desired image configuration of placement controller/webhook installed on hub.",
          "type": "string"
        },
        "registrationConfiguration": {
          "description": "RegistrationConfiguration contains the configuration of registration",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.RegistrationHubConfiguration"
        },
        "registrationImagePullSpec": {
          "description": "RegistrationImagePullSpec represents the desired image of registration controller/webhook installed on hub.",
          "type": "string"
        },
        "resourceRequirement": {
          "description": "ResourceRequirement specify QoS classes of deployments managed by clustermanager. It applies to all the containers in the deployments.",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.ResourceRequirement"
        },
        "workConfiguration": {
          "description": "WorkConfiguration contains the configuration of work",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.WorkConfiguration"
        },
        "workImagePullSpec": {
          "description": "WorkImagePullSpec represents the desired image configuration of work controller/webhook installed on hub.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ClusterManagerSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ClusterManagerStatus": {
      "description": "ClusterManagerStatus represents the current status of the registration and work distribution controllers running on the hub.",
      "type": "object",
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions contain the different condition statuses for this ClusterManager. Valid condition types are: Applied: Components in hub are applied. Available: Components in hub are available and ready to serve. Progressing: Components in hub are in a transitioning state. Degraded: Components in hub do not match the desired configuration and only provide degraded service.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        },
        "generations": {
          "description": "Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.GenerationStatus"
          }
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the last generation change you've dealt with",
          "type": "integer",
          "format": "int64"
        },
        "relatedResources": {
          "description": "RelatedResources are used to track the resources that are related to this ClusterManager.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.RelatedResourceMeta"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ClusterManagerStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ComponentConfig": {
      "description": "ComponentConfig provides optional configuration items for individual components",
      "type": "object",
      "required": [
        "enabled",
        "name"
      ],
      "properties": {
        "configOverrides": {
          "description": "ConfigOverrides contains optional configuration overrides for deployments and containers.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.ConfigOverride"
        },
        "enabled": {
          "description": "Enabled specifies whether the component is enabled or disabled.",
          "type": "boolean",
          "default": false
        },
        "name": {
          "description": "Name denotes the name of the component being configured.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ComponentConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ConfigOverride": {
      "description": "ConfigOverride holds overrides for configurations specific to deployments and containers.",
      "type": "object",
      "properties": {
        "deployments": {
          "description": "Deployments is a list of deployment specific configuration overrides.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.DeploymentConfig"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ConfigOverride",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ContainerConfig": {
      "description": "ContainerConfig holds configuration details for a specific container within a deployment.",
      "type": "object",
      "required": [
        "name",
        "env"
      ],
      "properties": {
        "env": {
          "description": "Env is a list of environment variable overrides for the container.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.EnvConfig"
          }
        },
        "name": {
          "description": "Name specifies the name of the container being configured.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ContainerConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.DeploymentConfig": {
      "description": "DeploymentConfig provides configuration details for a specific deployment.",
      "type": "object",
      "required": [
        "name",
        "containers"
      ],
      "properties": {
        "containers": {
          "description": "Containers is a list of container specific configurations within the deployment.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.ContainerConfig"
          }
        },
        "name": {
          "description": "Name specifies the name of the deployment being configured.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "DeploymentConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.EnvConfig": {
      "description": "EnvConfig represents an override for an environment variable within a container.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name specifies the name of the environment variable.",
          "type": "string"
        },
        "value": {
          "description": "Value specifies the value of the environment variable.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "EnvConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ExternalDNSAWSConfig": {
      "description": "ExternalDNSAWSConfig contains AWS-specific settings for external DNS",
      "type": "object",
      "properties": {
        "credentials": {
          "description": "(Deprecated) Credentials references a secret that will be used to authenticate with AWS Route53. It will need permission to manage entries in each of the managed domains for this cluster. Secret should have AWS keys named 'aws_access_key_id' and 'aws_secret_access_key'.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ExternalDNSAWSConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ExternalDNSConfig": {
      "description": "ExternalDNSConfig contains settings for running external-dns in a Hive environment.",
      "type": "object",
      "properties": {
        "aws": {
          "description": "(Deprecated) AWS contains AWS-specific settings for external DNS",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.ExternalDNSAWSConfig"
        },
        "gcp": {
          "description": "(Deprecated) GCP contains GCP-specific settings for external DNS",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.ExternalDNSGCPConfig"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ExternalDNSConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ExternalDNSGCPConfig": {
      "description": "ExternalDNSGCPConfig contains GCP-specific settings for external DNS",
      "type": "object",
      "properties": {
        "credentials": {
          "description": "(Deprecated) Credentials references a secret that will be used to authenticate with GCP DNS. It will need permission to manage entries in each of the managed domains for this cluster. Secret should have a key names 'osServiceAccount.json'. The credentials must specify the project to use.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ExternalDNSGCPConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.FailedProvisionConfig": {
      "description": "FailedProvisionConfig contains settings to control behavior undertaken by Hive when an installation attempt fails.",
      "type": "object",
      "properties": {
        "skipGatherLogs": {
          "description": "(Deprecated) SkipGatherLogs disables functionality that attempts to gather full logs from the cluster if an installation fails for any reason. The logs will be stored in a persistent volume for up to 7 days.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "FailedProvisionConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.FeatureGate": {
      "type": "object",
      "required": [
        "feature"
      ],
      "properties": {
        "feature": {
          "description": "Feature is the key of feature gate. e.g. featuregate/Foo.",
          "type": "string",
          "default": ""
        },
        "mode": {
          "description": "Mode is either Enable, Disable, \"\" where \"\" is Disable by default. In Enable mode, a valid feature gate `featuregate/Foo` will be set to \"--featuregate/Foo=true\". In Disable mode, a valid feature gate `featuregate/Foo` will be set to \"--featuregate/Foo=false\".",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "FeatureGate",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.GenerationStatus": {
      "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made. The definition matches the GenerationStatus defined in github.com/openshift/api/v1",
      "type": "object",
      "required": [
        "group",
        "version",
        "resource",
        "name",
        "lastGeneration"
      ],
      "properties": {
        "group": {
          "description": "group is the group of the resource that you're tracking",
          "type": "string",
          "default": ""
        },
        "lastGeneration": {
          "description": "lastGeneration is the last generation of the resource that controller applies",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "name": {
          "description": "name is the name of the resource that you're tracking",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "namespace is where the resource that you're tracking is",
          "type": "string",
          "default": ""
        },
        "resource": {
          "description": "resource is the resource type of the resource that you're tracking",
          "type": "string",
          "default": ""
        },
        "version": {
          "description": "version is the version of the resource that you're tracking",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "GenerationStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.HiveConfigSpec": {
      "type": "object",
      "required": [
        "failedProvisionConfig"
      ],
      "properties": {
        "additionalCertificateAuthorities": {
          "description": "(Deprecated) AdditionalCertificateAuthorities is a list of references to secrets in the 'hive' namespace that contain an additional Certificate Authority to use when communicating with target clusters. These certificate authorities will be used in addition to any self-signed CA generated by each cluster on installation.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          }
        },
        "backup": {
          "description": "(Deprecated) Backup specifies configuration for backup integration. If absent, backup integration will be disabled.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.BackupConfig"
        },
        "externalDNS": {
          "description": "(Deprecated) ExternalDNS specifies configuration for external-dns if it is to be deployed by Hive. If absent, external-dns will not be deployed.",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.ExternalDNSConfig"
        },
        "failedProvisionConfig": {
          "description": "(Deprecated) FailedProvisionConfig is used to configure settings related to handling provision failures.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.FailedProvisionConfig"
        },
        "globalPullSecret": {
          "description": "(Deprecated) GlobalPullSecret is used to specify a pull secret that will be used globally by all of the cluster deployments. For each cluster deployment, the contents of GlobalPullSecret will be merged with the specific pull secret for a cluster deployment(if specified), with precedence given to the contents of the pull secret for the cluster deployment.",
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        },
        "maintenanceMode": {
          "description": "(Deprecated) MaintenanceMode can be set to true to disable the hive controllers in situations where we need to ensure nothing is running that will add or act upon finalizers on Hive types. This should rarely be needed. Sets replicas to 0 for the hive-controllers deployment to accomplish this.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "HiveConfigSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.HiveConfigStatus": {
      "description": "HiveConfigStatus defines the observed state of Hive",
      "type": "object",
      "properties": {
        "aggregatorClientCAHash": {
          "description": "(Deprecated) AggregatorClientCAHash keeps an md5 hash of the aggregator client CA configmap data from the openshift-config-managed namespace. When the configmap changes, admission is redeployed.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "HiveConfigStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.HostedClusterManagerConfiguration": {
      "description": "HostedClusterManagerConfiguration represents customized configurations we need to set for clustermanager in the Hosted mode.",
      "type": "object",
      "properties": {
        "registrationWebhookConfiguration": {
          "description": "RegistrationWebhookConfiguration represents the customized webhook-server configuration of registration.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.WebhookConfiguration"
        },
        "workWebhookConfiguration": {
          "description": "WorkWebhookConfiguration represents the customized webhook-server configuration of work.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.WebhookConfiguration"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "HostedClusterManagerConfiguration",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.HubApiServerHostAlias": {
      "description": "HubApiServerHostAlias holds the mapping between IP and hostname that will be injected as an entry in the pod's hosts file.",
      "type": "object",
      "required": [
        "ip",
        "hostname"
      ],
      "properties": {
        "hostname": {
          "description": "Hostname for the above IP address.",
          "type": "string",
          "default": ""
        },
        "ip": {
          "description": "IP address of the host file entry.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "HubApiServerHostAlias",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.HubCondition": {
      "description": "StatusCondition contains condition information.",
      "type": "object",
      "required": [
        "type",
        "status",
        "reason",
        "message"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "LastTransitionTime is the last time the condition changed from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "lastUpdateTime": {
          "description": "The last time this condition was updated.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is a human-readable message indicating details about the last status change.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is a (brief) reason for the condition's last status change.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. One of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the cluster condition.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "HubCondition",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.IngressSpec": {
      "description": "IngressSpec specifies configuration options for ingress management",
      "type": "object",
      "properties": {
        "sslCiphers": {
          "description": "List of SSL ciphers enabled for management ingress. Defaults to full list of supported ciphers",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "IngressSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.InternalHubComponent": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.InternalHubComponentSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "InternalHubComponent",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.InternalHubComponentList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.InternalHubComponent"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "InternalHubComponentList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.InternalHubComponentSpec": {
      "type": "object",
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "InternalHubComponentSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.Klusterlet": {
      "description": "Klusterlet represents controllers to install the resources for a managed cluster. When configured, the Klusterlet requires a secret named bootstrap-hub-kubeconfig in the agent namespace to allow API requests to the hub for the registration protocol. In Hosted mode, the Klusterlet requires an additional secret named external-managed-kubeconfig in the agent namespace to allow API requests to the managed cluster for resources installation.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec represents the desired deployment configuration of Klusterlet agent.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.KlusterletSpec"
        },
        "status": {
          "description": "Status represents the current status of Klusterlet agent.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.KlusterletStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "Klusterlet",
        "Scope": "Clustered"
      }
    },
    "io.open-cluster-management.operator.v1.KlusterletDeployOption": {
      "description": "KlusterletDeployOption describes the deployment options for klusterlet",
      "type": "object",
      "properties": {
        "mode": {
          "description": "Mode can be Default, Hosted, Singleton or SingletonHosted. It is Default mode if not specified In Default mode, all klusterlet related resources are deployed on the managed cluster. In Hosted mode, only crd and configurations are installed on the spoke/managed cluster. Controllers run in another cluster (defined as management-cluster) and connect to the mangaged cluster with the kubeconfig in secret of \"external-managed-kubeconfig\"(a kubeconfig of managed-cluster with cluster-admin permission). In Singleton mode, registration/work agent is started as a single deployment. In SingletonHosted mode, agent is started as a single deployment in hosted mode. Note: Do not modify the Mode field once it's applied.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "KlusterletDeployOption",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.KlusterletList": {
      "description": "KlusterletList is a collection of Klusterlet agents.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is a list of Klusterlet agents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.Klusterlet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "KlusterletList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.KlusterletSpec": {
      "description": "KlusterletSpec represents the desired deployment configuration of Klusterlet agent.",
      "type": "object",
      "properties": {
        "clusterName": {
          "description": "ClusterName is the name of the managed cluster to be created on hub. The Klusterlet agent generates a random name if it is not set, or discovers the appropriate cluster name on OpenShift.",
          "type": "string"
        },
        "deployOption": {
          "description": "DeployOption contains the options of deploying a klusterlet",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.KlusterletDeployOption"
        },
        "externalServerURLs": {
          "description": "ExternalServerURLs represents a list of apiserver urls and ca bundles that is accessible externally If it is set empty, managed cluster has no externally accessible url that hub cluster can visit.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.ServerURL"
          }
        },
        "hubApiServerHostAlias": {
          "description": "HubApiServerHostAlias contains the host alias for hub api server. registration-agent and work-agent will use it to communicate with hub api server.",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.HubApiServerHostAlias"
        },
        "imagePullSpec": {
          "description": "ImagePullSpec represents the desired image configuration of agent, it takes effect only when singleton mode is set. quay.io/open-cluster-management.io/registration-operator:latest will be used if unspecified",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace to deploy the agent on the managed cluster. The namespace must have a prefix of \"open-cluster-management-\", and if it is not set, the namespace of \"open-cluster-management-agent\" is used to deploy agent. In addition, the add-ons are deployed to the namespace of \"{Namespace}-addon\". In the Hosted mode, this namespace still exists on the managed cluster to contain necessary resources, like service accounts, roles and rolebindings, while the agent is deployed to the namespace with the same name as klusterlet on the management cluster.",
          "type": "string"
        },
        "nodePlacement": {
          "description": "NodePlacement enables explicit control over the scheduling of the deployed pods.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.NodePlacement"
        },
        "priorityClassName": {
          "description": "PriorityClassName is the name of the PriorityClass that will be used by the deployed klusterlet agent. It will be ignored when the PriorityClass/v1 API is not available on the managed cluster.",
          "type": "string"
        },
        "registrationConfiguration": {
          "description": "RegistrationConfiguration contains the configuration of registration",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.RegistrationConfiguration"
        },
        "registrationImagePullSpec": {
          "description": "RegistrationImagePullSpec represents the desired image configuration of registration agent. quay.io/open-cluster-management.io/registration:latest will be used if unspecified.",
          "type": "string"
        },
        "resourceRequirement": {
          "description": "ResourceRequirement specify QoS classes of deployments managed by klusterlet. It applies to all the containers in the deployments.",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.ResourceRequirement"
        },
        "workConfiguration": {
          "description": "WorkConfiguration contains the configuration of work",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.WorkAgentConfiguration"
        },
        "workImagePullSpec": {
          "description": "WorkImagePullSpec represents the desired image configuration of work agent. quay.io/open-cluster-management.io/work:latest will be used if unspecified.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "KlusterletSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.KlusterletStatus": {
      "description": "KlusterletStatus represents the current status of Klusterlet agent.",
      "type": "object",
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions contain the different condition statuses for this Klusterlet. Valid condition types are: Applied: Components have been applied in the managed cluster. Available: Components in the managed cluster are available and ready to serve. Progressing: Components in the managed cluster are in a transitioning state. Degraded: Components in the managed cluster do not match the desired configuration and only provide degraded service.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        },
        "generations": {
          "description": "Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.GenerationStatus"
          }
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the last generation change you've dealt with",
          "type": "integer",
          "format": "int64"
        },
        "relatedResources": {
          "description": "RelatedResources are used to track the resources that are related to this Klusterlet.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.RelatedResourceMeta"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "KlusterletStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.KubeConfigSecret": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name is the name of the secret.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "KubeConfigSecret",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.LocalSecretsConfig": {
      "type": "object",
      "required": [
        "kubeConfigSecrets"
      ],
      "properties": {
        "hubConnectionTimeoutSeconds": {
          "description": "HubConnectionTimeoutSeconds is used to set the timeout of connecting to the hub cluster. When agent loses the connection to the hub over the timeout seconds, the agent do a rebootstrap. By default is 10 mins.",
          "type": "integer",
          "format": "int32"
        },
        "kubeConfigSecrets": {
          "description": "KubeConfigSecrets is a list of secret names. The secrets are in the same namespace where the agent controller runs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.KubeConfigSecret"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "LocalSecretsConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.MultiClusterHub": {
      "description": "MulticlusterHub defines the configuration for an instance of a multicluster hub, a central point for managing multiple Kubernetes-based clusters. The deployment of multicluster hub components is determined based on the configuration that is defined in this resource.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHubSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHubStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "MultiClusterHub",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.MultiClusterHubList": {
      "description": "MultiClusterHubList contains a list of MultiClusterHub",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.MultiClusterHub"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "MultiClusterHubList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.MultiClusterHubSpec": {
      "description": "MultiClusterHubSpec defines the desired state of MultiClusterHub",
      "type": "object",
      "properties": {
        "availabilityConfig": {
          "description": "Specifies deployment replication for improved availability. Options are: Basic and High (default)",
          "type": "string"
        },
        "customCAConfigmap": {
          "description": "(Deprecated) Provide the customized OpenShift default ingress CA certificate to RHACM",
          "type": "string"
        },
        "disableHubSelfManagement": {
          "description": "Disable automatic import of the hub cluster as a managed cluster",
          "type": "boolean"
        },
        "disableUpdateClusterImageSets": {
          "description": "Disable automatic update of ClusterImageSets",
          "type": "boolean"
        },
        "enableClusterBackup": {
          "description": "(Deprecated) Enable cluster backup",
          "type": "boolean",
          "default": false
        },
        "enableClusterProxyAddon": {
          "description": "(Deprecated) Enable cluster proxy addon",
          "type": "boolean"
        },
        "hive": {
          "description": "(Deprecated) Overrides for the default HiveConfig spec",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.HiveConfigSpec"
        },
        "imagePullSecret": {
          "description": "Override pull secret for accessing MultiClusterHub operand and endpoint images",
          "type": "string"
        },
        "ingress": {
          "description": "(Deprecated) Configuration options for ingress management",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.IngressSpec"
        },
        "localClusterName": {
          "description": "The name of the local-cluster resource",
          "type": "string"
        },
        "nodeSelector": {
          "description": "Set the nodeselectors",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "overrides": {
          "description": "Developer Overrides",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.Overrides"
        },
        "separateCertificateManagement": {
          "description": "(Deprecated) Install cert-manager into its own namespace",
          "type": "boolean",
          "default": false
        },
        "tolerations": {
          "description": "Tolerations causes all components to tolerate any taints.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "MultiClusterHubSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.MultiClusterHubStatus": {
      "description": "MultiClusterHubStatus defines the observed state of MultiClusterHub",
      "type": "object",
      "properties": {
        "components": {
          "description": "Components []ComponentCondition `json:\"manifests,omitempty\"`",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.StatusCondition"
          }
        },
        "conditions": {
          "description": "Conditions contains the different condition statuses for the MultiClusterHub",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.HubCondition"
          }
        },
        "currentVersion": {
          "description": "CurrentVersion indicates the current version",
          "type": "string"
        },
        "desiredVersion": {
          "description": "DesiredVersion indicates the desired version",
          "type": "string"
        },
        "phase": {
          "description": "Represents the running phase of the MultiClusterHub",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "MultiClusterHubStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.NodePlacement": {
      "description": "NodePlacement describes node scheduling configuration for the pods.",
      "type": "object",
      "properties": {
        "nodeSelector": {
          "description": "NodeSelector defines which Nodes the Pods are scheduled on. The default is an empty list.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "tolerations": {
          "description": "Tolerations are attached by pods to tolerate any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e. The default is an empty list.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "NodePlacement",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.Overrides": {
      "description": "Overrides provides developer overrides for MCH installation",
      "type": "object",
      "properties": {
        "components": {
          "description": "Provides optional configuration for components, the list of which can be found here: https://github.com/stolostron/multiclusterhub-operator/tree/main/docs/available-components.md",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.ComponentConfig"
          }
        },
        "imagePullPolicy": {
          "description": "Pull policy of the MultiCluster hub images",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "Overrides",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.RegistrationConfiguration": {
      "type": "object",
      "properties": {
        "bootstrapKubeConfigs": {
          "description": "BootstrapKubeConfigs defines the ordered list of bootstrap kubeconfigs. The order decides which bootstrap kubeconfig to use first when rebootstrap.\n\nWhen the agent loses the connection to the current hub over HubConnectionTimeoutSeconds, or the managedcluster CR is set `hubAcceptsClient=false` on the hub, the controller marks the related bootstrap kubeconfig as \"failed\".\n\nA failed bootstrapkubeconfig won't be used for the duration specified by SkipFailedBootstrapKubeConfigSeconds. But if the user updates the content of a failed bootstrapkubeconfig, the \"failed\" mark will be cleared.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.BootstrapKubeConfigs"
        },
        "clientCertExpirationSeconds": {
          "description": "clientCertExpirationSeconds represents the seconds of a client certificate to expire. If it is not set or 0, the default duration seconds will be set by the hub cluster. If the value is larger than the max signing duration seconds set on the hub cluster, the max signing duration seconds will be set.",
          "type": "integer",
          "format": "int32"
        },
        "clusterAnnotations": {
          "description": "ClusterAnnotations is annotations with the reserve prefix \"agent.open-cluster-management.io\" set on ManagedCluster when creating only, other actors can update it afterwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "featureGates": {
          "description": "FeatureGates represents the list of feature gates for registration If it is set empty, default feature gates will be used. If it is set, featuregate/Foo is an example of one item in FeatureGates:\n  1. If featuregate/Foo does not exist, registration-operator will discard it\n  2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true]\n  3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false,\n \the can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.FeatureGate"
          }
        },
        "kubeAPIBurst": {
          "description": "KubeAPIBurst indicates the maximum burst of the throttle while talking with apiserver of hub cluster from the spoke cluster. If it is set empty, use the default value: 100",
          "type": "integer",
          "format": "int32"
        },
        "kubeAPIQPS": {
          "description": "KubeAPIQPS indicates the maximum QPS while talking with apiserver of hub cluster from the spoke cluster. If it is set empty, use the default value: 50",
          "type": "integer",
          "format": "int32"
        },
        "registrationDriver": {
          "description": "This provides driver details required to register with hub",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.RegistrationDriver"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "RegistrationConfiguration",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.RegistrationDriver": {
      "type": "object",
      "required": [
        "authType"
      ],
      "properties": {
        "authType": {
          "description": "Type of the authentication used by managedcluster to register as well as pull work from hub. Possible values are csr and awsirsa.",
          "type": "string"
        },
        "awsIrsa": {
          "description": "Contain the details required for registering with hub cluster (ie: an EKS cluster) using AWS IAM roles for service account. This is required only when the authType is awsirsa.",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.AwsIrsa"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "RegistrationDriver",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.RegistrationDriverHub": {
      "type": "object",
      "required": [
        "authType"
      ],
      "properties": {
        "authType": {
          "description": "Type of the authentication used by hub to initialize the Hub cluster. Possible values are csr and awsirsa.",
          "type": "string"
        },
        "awsisra": {
          "description": "AwsIrsa represents the configuration for awsisra driver.",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.AwsIrsaConfig"
        },
        "csr": {
          "description": "CSR represents the configuration for csr driver.",
          "$ref": "#/definitions/io.open-cluster-management.operator.v1.CSRConfig"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "RegistrationDriverHub",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.RegistrationHubConfiguration": {
      "type": "object",
      "properties": {
        "autoApproveUsers": {
          "description": "AutoApproveUser represents a list of users that can auto approve CSR and accept client. If the credential of the bootstrap-hub-kubeconfig matches to the users, the cluster created by the bootstrap-hub-kubeconfig will be auto-registered into the hub cluster. This takes effect only when ManagedClusterAutoApproval feature gate is enabled.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "featureGates": {
          "description": "FeatureGates represents the list of feature gates for registration If it is set empty, default feature gates will be used. If it is set, featuregate/Foo is an example of one item in FeatureGates:\n  1. If featuregate/Foo does not exist, registration-operator will discard it\n  2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true]\n  3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false,\n \the can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.FeatureGate"
          }
        },
        "registrationDrivers": {
          "description": "RegistrationDrivers represent the list of hub registration drivers that contain information used by hub to initialize the hub cluster A RegistrationDriverHub contains details of authentication type and the hub cluster ARN",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.RegistrationDriverHub"
          },
          "x-kubernetes-list-map-keys": [
            "authType"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "RegistrationHubConfiguration",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.RelatedResourceMeta": {
      "description": "RelatedResourceMeta represents the resource that is managed by an operator",
      "type": "object",
      "required": [
        "group",
        "version",
        "resource",
        "name"
      ],
      "properties": {
        "group": {
          "description": "group is the group of the resource that you're tracking",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "name is the name of the resource that you're tracking",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "namespace is where the thing you're tracking is",
          "type": "string",
          "default": ""
        },
        "resource": {
          "description": "resource is the resource type of the resource that you're tracking",
          "type": "string",
          "default": ""
        },
        "version": {
          "description": "version is the version of the thing you're tracking",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "RelatedResourceMeta",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ResourceGVK": {
      "type": "object",
      "required": [
        "group",
        "kind",
        "name",
        "version"
      ],
      "properties": {
        "group": {
          "type": "string",
          "default": ""
        },
        "kind": {
          "type": "string",
          "default": ""
        },
        "name": {
          "type": "string",
          "default": ""
        },
        "version": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ResourceGVK",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ResourceRequirement": {
      "description": "ResourceRequirement allow user override the default pod QoS classes",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "resourceRequirements": {
          "description": "ResourceRequirements defines resource requests and limits when Type is ResourceQosClassResourceRequirement",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        },
        "type": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ResourceRequirement",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.ServerURL": {
      "description": "ServerURL represents the apiserver url and ca bundle that is accessible externally",
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "caBundle": {
          "description": "CABundle is the ca bundle to connect to apiserver of the managed cluster. System certs are used if it is not set.",
          "type": "string",
          "format": "byte"
        },
        "url": {
          "description": "URL is the url of apiserver endpoint of the managed cluster.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ServerURL",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.StatusCondition": {
      "description": "StatusCondition contains condition information.",
      "type": "object",
      "required": [
        "type",
        "status",
        "reason",
        "message"
      ],
      "properties": {
        "kind": {
          "description": "The resource kind this condition represents",
          "type": "string"
        },
        "lastTransitionTime": {
          "description": "LastTransitionTime is the last time the condition changed from one status to another.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is a human-readable message indicating details about the last status change.",
          "type": "string"
        },
        "name": {
          "description": "The component name",
          "type": "string"
        },
        "reason": {
          "description": "Reason is a (brief) reason for the condition's last status change.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. One of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the cluster condition.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "StatusCondition",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.VeleroBackupConfig": {
      "description": "VeleroBackupConfig contains settings for the Velero backup integration.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "(Deprecated) Enabled dictates if Velero backup integration is enabled. If not specified, the default is disabled.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "VeleroBackupConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.WebhookConfiguration": {
      "description": "WebhookConfiguration has two properties: Address and Port.",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "Address represents the address of a webhook-server. It could be in IP format or fqdn format. The Address must be reachable by apiserver of the hub cluster.",
          "type": "string",
          "default": ""
        },
        "port": {
          "description": "Port represents the port of a webhook-server. The default value of Port is 443.",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "WebhookConfiguration",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.WorkAgentConfiguration": {
      "type": "object",
      "properties": {
        "appliedManifestWorkEvictionGracePeriod": {
          "description": "AppliedManifestWorkEvictionGracePeriod is the eviction grace period the work agent will wait before evicting the AppliedManifestWorks, whose corresponding ManifestWorks are missing on the hub cluster, from the managed cluster. If not present, the default value of the work agent will be used.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        },
        "featureGates": {
          "description": "FeatureGates represents the list of feature gates for work If it is set empty, default feature gates will be used. If it is set, featuregate/Foo is an example of one item in FeatureGates:\n  1. If featuregate/Foo does not exist, registration-operator will discard it\n  2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true]\n  3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false,\n \the can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.FeatureGate"
          }
        },
        "kubeAPIBurst": {
          "description": "KubeAPIBurst indicates the maximum burst of the throttle while talking with apiserver of hub cluster from the spoke cluster. If it is set empty, use the default value: 100",
          "type": "integer",
          "format": "int32"
        },
        "kubeAPIQPS": {
          "description": "KubeAPIQPS indicates the maximum QPS while talking with apiserver of hub cluster from the spoke cluster. If it is set empty, use the default value: 50",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "WorkAgentConfiguration",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.operator.v1.WorkConfiguration": {
      "type": "object",
      "properties": {
        "featureGates": {
          "description": "FeatureGates represents the list of feature gates for work If it is set empty, default feature gates will be used. If it is set, featuregate/Foo is an example of one item in FeatureGates:\n  1. If featuregate/Foo does not exist, registration-operator will discard it\n  2. If featuregate/Foo exists and is false by default. It is now possible to set featuregate/Foo=[false|true]\n  3. If featuregate/Foo exists and is true by default. If a cluster-admin upgrading from 1 to 2 wants to continue having featuregate/Foo=false,\n \the can set featuregate/Foo=false before upgrading. Let's say the cluster-admin wants featuregate/Foo=false.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.operator.v1.FeatureGate"
          }
        },
        "workDriver": {
          "description": "WorkDriver represents the type of work driver. Possible values are \"kube\", \"mqtt\", or \"grpc\". If not provided, the default value is \"kube\". If set to non-\"kube\" drivers, the klusterlet need to use the same driver. and the driver configuration must be provided in a secret named \"work-driver-config\" in the namespace where the cluster manager is running, adhering to the following structure: config.yaml: |\n  \u003cdriver-config-in-yaml\u003e\n\nFor detailed driver configuration, please refer to the sdk-go documentation: https://github.com/open-cluster-management-io/sdk-go/blob/main/pkg/cloudevents/README.md#supported-protocols-and-drivers",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "operator.open-cluster-management.io",
        "Version": "v1",
        "Kind": "WorkConfiguration",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.BindingOverrides": {
      "description": "BindingOverrides defines the overrides for the subjects.",
      "type": "object",
      "properties": {
        "remediationAction": {
          "description": "RemediationAction overrides the policy remediationAction on target clusters. This parameter is optional. If you set it, you must set it to \"enforce\".",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "BindingOverrides",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.ComplianceHistory": {
      "description": "ComplianceHistory reports a compliance message from a given time and event.",
      "type": "object",
      "properties": {
        "eventName": {
          "description": "EventName is the name of the event attached to the message.",
          "type": "string"
        },
        "lastTimestamp": {
          "description": "LastTimestamp is the timestamp of the event that reported the message.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "description": "Message is the compliance message resulting from evaluating the policy resource.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "ComplianceHistory",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.CompliancePerClusterStatus": {
      "description": "CompliancePerClusterStatus reports the name of a managed cluster and its compliance state for this policy.",
      "type": "object",
      "properties": {
        "clustername": {
          "type": "string"
        },
        "clusternamespace": {
          "type": "string"
        },
        "compliant": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "CompliancePerClusterStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.DetailsPerTemplate": {
      "description": "DetailsPerTemplate reports the current compliance state and list of recent compliance messages for a given policy template.",
      "type": "object",
      "properties": {
        "compliant": {
          "type": "string"
        },
        "history": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.ComplianceHistory"
          }
        },
        "templateMeta": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "DetailsPerTemplate",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.HubTemplateOptions": {
      "type": "object",
      "properties": {
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of a service account in the same namespace as the policy to use for all hub template lookups. The service account must have list and watch permissions on any object the hub templates look up. If not specified, lookups are restricted to namespaced objects in the same namespace as the policy and to the `ManagedCluster` object associated with the propagated policy.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "HubTemplateOptions",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.Placement": {
      "description": "Placement reports how and what managed cluster placement resources are attached to the policy.",
      "type": "object",
      "properties": {
        "decisions": {
          "description": "Decisions is the list of managed clusters returned by the placement resource for this binding.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementDecision"
          }
        },
        "placement": {
          "description": "Placement is the name of the Placement resource, from the cluster.open-cluster-management.io API group, that is bound to the policy.",
          "type": "string"
        },
        "placementBinding": {
          "description": "PlacementBinding is the name of the PlacementBinding resource, from the policies.open-cluster-management.io API group, that binds the placement resource to the policy.",
          "type": "string"
        },
        "placementRule": {
          "description": "PlacementRule (deprecated) is the name of the PlacementRule resource, from the apps.open-cluster-management.io API group, that is bound to the policy.",
          "type": "string"
        },
        "policySet": {
          "description": "PolicySet is the name of the policy set containing this policy and bound to the placement. If specified, then for this placement the policy is being propagated through this policy set rather than the policy being bound directly to a placement and propagated individually.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "Placement",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.PlacementBinding": {
      "description": "PlacementBinding is the schema for the placementbindings API. A PlacementBinding resource binds a managed cluster placement resource to a policy or policy set, along with configurable overrides.",
      "type": "object",
      "required": [
        "placementRef",
        "subjects"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "bindingOverrides": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.policy.v1.BindingOverrides"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "placementRef": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementSubject"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBindingStatus"
        },
        "subFilter": {
          "type": "string"
        },
        "subjects": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.Subject"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PlacementBinding",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.PlacementBindingList": {
      "description": "PlacementBindingList contains a list of placement bindings.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.PlacementBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PlacementBindingList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.PlacementBindingStatus": {
      "description": "PlacementBindingStatus defines the observed state of the PlacementBinding resource.",
      "type": "object",
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PlacementBindingStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.PlacementDecision": {
      "description": "PlacementDecision is the cluster name returned by the placement resource.",
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "clusterNamespace": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PlacementDecision",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.PlacementSubject": {
      "description": "PlacementSubject defines the placement resource that is being bound to the subjects defined in the placement binding.",
      "type": "object",
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the API group to which the kind belongs. Must be set to \"cluster.open-cluster-management.io\" for Placement or \"apps.open-cluster-management.io\" for PlacementRule (deprecated).",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind is the kind of the placement resource. Must be set to either \"Placement\" or \"PlacementRule\" (deprecated).",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name is the name of the placement resource being bound.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PlacementSubject",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.Policy": {
      "description": "Policy is the schema for the policies API. Policy wraps other policy engine resources in its \"policy-templates\" array in order to deliver the resources to managed clusters.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.policy.v1.PolicySpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.policy.v1.PolicyStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "Policy",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.PolicyCustomValidator": {
      "type": "object",
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PolicyCustomValidator",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.PolicyDependency": {
      "description": "Each PolicyDependency defines an object reference which must be in a certain compliance state before the policy should be created.",
      "type": "object",
      "required": [
        "name",
        "compliance"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "compliance": {
          "description": "Compliance is the required ComplianceState of the object that the policy depends on, at the following path, .status.compliant.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the object that the policy depends on.",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace is the namespace of the object that the policy depends on (optional).",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PolicyDependency",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.PolicyList": {
      "description": "PolicyList contains a list of policies.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.Policy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PolicyList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.PolicySpec": {
      "description": "PolicySpec defines the configurations of the policy engine resources to deliver to the managed clusters.",
      "type": "object",
      "required": [
        "disabled",
        "policy-templates"
      ],
      "properties": {
        "copyPolicyMetadata": {
          "description": "CopyPolicyMetadata specifies whether the labels and annotations of a policy should be copied when replicating the policy to a managed cluster. If set to \"true\", all of the labels and annotations of the policy are copied to the replicated policy. If set to \"false\", only the policy framework-specific policy labels and annotations are copied to the replicated policy. This setting is useful if there is tracking for metadata that should only exist on the root policy. It is recommended to set this to \"false\" when using Argo CD to deploy the policy definition since Argo CD uses metadata for tracking that should not be replicated. The default value is \"true\".",
          "type": "boolean"
        },
        "dependencies": {
          "description": "PolicyDependencies is a list of dependency objects detailed with extra considerations for compliance that should be fulfilled before applying the policies to the managed clusters.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.PolicyDependency"
          }
        },
        "disabled": {
          "description": "Disabled is a boolean parameter you can use to enable and disable the policy. When disabled, the policy is removed from managed clusters.",
          "type": "boolean",
          "default": false
        },
        "hubTemplateOptions": {
          "description": "HubTemplateOptions changes the default behavior of hub templates.",
          "$ref": "#/definitions/io.open-cluster-management.policy.v1.HubTemplateOptions"
        },
        "policy-templates": {
          "description": "PolicyTemplates is a list of definitions of policy engine resources to apply to managed clusters along with configurations on how it should be applied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.PolicyTemplate"
          }
        },
        "remediationAction": {
          "description": "RemediationAction specifies the remediation of the policy. The parameter values are \"enforce\" and \"inform\". If specified, the value that is defined overrides any remediationAction parameter defined in the child policies in the \"policy-templates\" section. Important: Not all policy engine kinds support the enforce feature.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PolicySpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.PolicyStatus": {
      "description": "PolicyStatus reports the observed status of the policy resulting from its policy templates.",
      "type": "object",
      "properties": {
        "compliant": {
          "description": "ComplianceState reports the observed status resulting from the definitions of this policy. This status field is only used in the replicated policy in the managed cluster namespace.",
          "type": "string"
        },
        "details": {
          "description": "Details is the list of compliance details for each policy template definition. This status field is only used in the replicated policy in the managed cluster namespace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.DetailsPerTemplate"
          }
        },
        "placement": {
          "description": "Placement is a list of managed cluster placement resources bound to the policy. This status field is only used in the root policy on the hub cluster.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.Placement"
          }
        },
        "status": {
          "description": "Status is a list of managed clusters and the current compliance state of each one. This status field is only used in the root policy on the hub cluster.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.CompliancePerClusterStatus"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PolicyStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.PolicyTemplate": {
      "description": "PolicyTemplate is the definition of the policy engine resource to apply to the managed cluster, along with configurations on how it should be applied.",
      "type": "object",
      "required": [
        "objectDefinition"
      ],
      "properties": {
        "extraDependencies": {
          "description": "ExtraDependencies is additional PolicyDependencies that only apply to this policy template. ExtraDependencies is a list of dependency objects detailed with extra considerations for compliance that should be fulfilled before applying the policy template to the managed clusters.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1.PolicyDependency"
          }
        },
        "ignorePending": {
          "description": "IgnorePending is a boolean parameter to specify whether to ignore the \"Pending\" status of this template when calculating the overall policy status. The default value is \"false\" to not ignore a \"Pending\" status.",
          "type": "boolean"
        },
        "objectDefinition": {
          "description": "A Kubernetes object defining the policy to apply to a managed cluster",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "PolicyTemplate",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1.Subject": {
      "description": "Subject defines the resource to bind to the placement resource.",
      "type": "object",
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the API group to which the kind belongs. Must be set to \"policy.open-cluster-management.io\".",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind is the kind of the object to bind to the placement resource. Must be set to either \"Policy\" or \"PolicySet\".",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name is the name of the policy or policy set to bind to the placement resource.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1",
        "Kind": "Subject",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.AutomationDef": {
      "description": "AutomationDef defines the automation to invoke.",
      "type": "object",
      "required": [
        "name",
        "secret"
      ],
      "properties": {
        "extra_vars": {
          "description": "ExtraVars is passed to the Ansible job at execution time and is a known Ansible entity.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        },
        "jobTtl": {
          "description": "JobTTL sets the time to live for the Kubernetes Job object after the Ansible job playbook run has finished.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the Ansible Template to run in Ansible Automation Platform as a job.",
          "type": "string",
          "default": ""
        },
        "policyViolationsLimit": {
          "description": "The maximum number of violating cluster contexts that are provided to the Ansible job as extra variables. When policyViolationsLimit is set to \"0\", it means no limit. The default value is \"1000\".",
          "type": "integer",
          "format": "int32"
        },
        "secret": {
          "description": "TowerSecret is the name of the secret that contains the Ansible Automation Platform credential.",
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "Type of the automation to invoke",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "AutomationDef",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.ClusterEvent": {
      "description": "ClusterEvent shows the PolicyAutomation event on each target cluster.",
      "type": "object",
      "required": [
        "automationStartTime",
        "eventTime"
      ],
      "properties": {
        "automationStartTime": {
          "description": "AutomationStartTime is the policy automation start time for everyEvent mode.",
          "type": "string",
          "default": ""
        },
        "eventTime": {
          "description": "EventTime is the last policy compliance transition event time.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ClusterEvent",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.PolicyAutomation": {
      "description": "PolicyAutomation is the schema for the policyautomations API. PolicyAutomation configures creation of an AnsibleJob, from the tower.ansible.com API group, to initiate Ansible to run upon noncompliant events of the attached policy, or when you manually initiate the run with the \"policy.open-cluster-management.io/rerun=true\" annotation.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomationSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomationStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PolicyAutomation",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.PolicyAutomationList": {
      "description": "PolicyAutomationList contains a list of policy automations.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicyAutomation"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PolicyAutomationList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.PolicyAutomationSpec": {
      "description": "PolicyAutomationSpec defines how and when automation is initiated for the referenced policy.",
      "type": "object",
      "required": [
        "automationDef",
        "mode",
        "policyRef"
      ],
      "properties": {
        "automationDef": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.AutomationDef"
        },
        "delayAfterRunSeconds": {
          "description": "DelayAfterRunSeconds sets the minimum number of seconds before an automation can run again due to a new violation on the same managed cluster. This only applies to the EveryEvent mode. The default value is \"0\".",
          "type": "integer",
          "format": "int32"
        },
        "eventHook": {
          "description": "EventHook specifies the compliance state that initiates automation. This must be set to \"noncompliant\".",
          "type": "string"
        },
        "mode": {
          "type": "string",
          "default": ""
        },
        "policyRef": {
          "description": "PolicyRef is the name of the policy that this automation resource is bound to.",
          "type": "string",
          "default": ""
        },
        "rescanAfter": {
          "description": "RescanAfter is reserved for future use and should not be set.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PolicyAutomationSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.PolicyAutomationStatus": {
      "description": "PolicyAutomationStatus defines the observed state of the PolicyAutomation resource.",
      "type": "object",
      "properties": {
        "clustersWithEvent": {
          "description": "Cluster name as the key of ClustersWithEvent",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.ClusterEvent"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PolicyAutomationStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.PolicySet": {
      "description": "PolicySet is the schema for the policysets API. A policy set is a logical grouping of policies from the same namespace. The policy set is bound to a placement resource and applies the placement to all policies within the set. The status reports the overall compliance of the set.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySetSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PolicySet",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.PolicySetList": {
      "description": "PolicySetList contains a list of policy sets.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySet"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PolicySetList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.PolicySetSpec": {
      "description": "PolicySetSpec defines the group of policies to be included in the policy set.",
      "type": "object",
      "required": [
        "policies"
      ],
      "properties": {
        "description": {
          "description": "Description is the description of this policy set.",
          "type": "string"
        },
        "policies": {
          "description": "Policies is a list of policy names that are contained within the policy set.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PolicySetSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.PolicySetStatus": {
      "description": "PolicySetStatus reports the observed status of the policy set resulting from its policies.",
      "type": "object",
      "properties": {
        "compliant": {
          "description": "Compliant reports the observed status resulting from the compliance of the policies within.",
          "type": "string"
        },
        "placement": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.PolicySetStatusPlacement"
          }
        },
        "statusMessage": {
          "description": "StatusMessge reports the current state while determining the compliance of the policy set.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PolicySetStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.PolicySetStatusPlacement": {
      "description": "PolicySetStatusPlacement reports how and what managed cluster placement resources are attached to the policy set.",
      "type": "object",
      "properties": {
        "placement": {
          "description": "Placement is the name of the Placement resource, from the cluster.open-cluster-management.io API group, that is bound to the policy.",
          "type": "string"
        },
        "placementBinding": {
          "description": "PlacementBinding is the name of the PlacementBinding resource, from the policies.open-cluster-management.io API group, that binds the placement resource to the policy set.",
          "type": "string"
        },
        "placementRule": {
          "description": "PlacementRule (deprecated) is the name of the PlacementRule resource, from the apps.open-cluster-management.io API group, that is bound to the policy.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "PolicySetStatusPlacement",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.ReplicatedComplianceHistory": {
      "description": "ReplicatedComplianceHistory defines the replicated policy compliance details history.",
      "type": "object",
      "properties": {
        "lastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ReplicatedComplianceHistory",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.ReplicatedDetailsPerTemplate": {
      "description": "ReplicatedDetailsPerTemplate defines the replicated policy compliance details and history.",
      "type": "object",
      "required": [
        "compliant",
        "history"
      ],
      "properties": {
        "compliant": {
          "type": "string",
          "default": ""
        },
        "history": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.ReplicatedComplianceHistory"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ReplicatedDetailsPerTemplate",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.ReplicatedPolicyStatus": {
      "description": "ReplicatedPolicyStatus defines the replicated policy status.",
      "type": "object",
      "required": [
        "compliant",
        "violation_message",
        "details"
      ],
      "properties": {
        "compliant": {
          "type": "string",
          "default": ""
        },
        "details": {
          "description": "used by replicated policy",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.ReplicatedDetailsPerTemplate"
          }
        },
        "violation_message": {
          "description": "used by replicated policy",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ReplicatedPolicyStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.policy.v1beta1.ViolationContext": {
      "description": "ViolationContext defines the noncompliant replicated policy information that is sent to the AnsibleJob through the extra_vars parameter.",
      "type": "object",
      "required": [
        "targetClusters",
        "policyName",
        "policyNamespace",
        "hubCluster",
        "policySets",
        "policyViolations"
      ],
      "properties": {
        "hubCluster": {
          "type": "string",
          "default": ""
        },
        "policyName": {
          "type": "string",
          "default": ""
        },
        "policyNamespace": {
          "type": "string",
          "default": ""
        },
        "policySets": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "policyViolations": {
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.policy.v1beta1.ReplicatedPolicyStatus"
          }
        },
        "targetClusters": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "policy.open-cluster-management.io",
        "Version": "v1beta1",
        "Kind": "ViolationContext",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.search.v1alpha1.DeploymentConfig": {
      "type": "object",
      "properties": {
        "arguments": {
          "description": "Container Arguments",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "envVar": {
          "description": "Container Env variables",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }
        },
        "imageOverride": {
          "description": "Image_override",
          "type": "string"
        },
        "replicaCount": {
          "description": "Number of pod instances for the deployment.",
          "type": "integer",
          "format": "int32"
        },
        "resources": {
          "description": "Compute resources required by deployment.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "search.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "DeploymentConfig",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.search.v1alpha1.Search": {
      "description": "Search is the schema for the searches API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.SearchSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.SearchStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "search.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "Search",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.search.v1alpha1.SearchDeployments": {
      "type": "object",
      "properties": {
        "collector": {
          "description": "Configuration for the collector.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.DeploymentConfig"
        },
        "database": {
          "description": "Configuration for the database.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.DeploymentConfig"
        },
        "indexer": {
          "description": "Configuration for the indexer.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.DeploymentConfig"
        },
        "queryapi": {
          "description": "Configuration for Query API.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.DeploymentConfig"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "search.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "SearchDeployments",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.search.v1alpha1.SearchList": {
      "description": "SearchList contains a list of Search.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.Search"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "search.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "SearchList",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.search.v1alpha1.SearchSpec": {
      "description": "SearchSpec defines the desired state of Search.",
      "type": "object",
      "properties": {
        "availabilityConfig": {
          "description": "[PLACEHOLDER, NOT IMPLEMENTED] Specifies deployment replication for improved availability. Options are: Basic and High (default)",
          "type": "string"
        },
        "dbConfig": {
          "description": "The config map name contains parameters to override default database parameters.",
          "type": "string"
        },
        "dbStorage": {
          "description": "Storage configuration for the database.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.StorageSpec"
        },
        "deployments": {
          "description": "Customization for search deployments.",
          "default": {},
          "$ref": "#/definitions/io.open-cluster-management.search.v1alpha1.SearchDeployments"
        },
        "externalDBInstance": {
          "description": "[PLACEHOLDER, NOT IMPLEMENTED] Kubernetes secret name containing user provided db secret Secret should contain connection parameters [db_host, db_port, db_user, db_password, db_name, ca_cert] Not supported for development preview.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "ImagePullPolicy",
          "type": "string"
        },
        "imagePullSecret": {
          "description": "ImagePullSecret",
          "type": "string"
        },
        "nodeSelector": {
          "description": "Define the nodes that you want to schedule with matching labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "tolerations": {
          "description": "Define tolerations to schedule pods on nodes with matching taints.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "search.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "SearchSpec",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.search.v1alpha1.SearchStatus": {
      "description": "SearchStatus defines the observed state of Search.",
      "type": "object",
      "required": [
        "db",
        "storage"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }
        },
        "db": {
          "description": "Database used by Search.",
          "type": "string",
          "default": ""
        },
        "storage": {
          "description": "Storage used by database",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "search.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "SearchStatus",
        "Scope": "Namespaced"
      }
    },
    "io.open-cluster-management.search.v1alpha1.StorageSpec": {
      "type": "object",
      "properties": {
        "size": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        },
        "storageClassName": {
          "description": "name of the storage class",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "search.open-cluster-management.io",
        "Version": "v1alpha1",
        "Kind": "StorageSpec",
        "Scope": "Namespaced"
      }
    }
  }
}