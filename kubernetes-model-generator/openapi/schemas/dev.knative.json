{
  "swagger": "2.0",
  "info": {
    "title": "Kubernetes",
    "version": "0.0.0"
  },
  "paths": null,
  "definitions": {
    "dev.knative.bindings.v1alpha1.GitHubBinding": {
      "description": "GitHubBinding describes a Binding that is also a Source. The `sink` (from the Source duck) is resolved to a URL and then projected into the `subject` by augmenting the runtime contract of the referenced containers to have a `K_SINK` environment variable holding the endpoint to which to send cloud events.",
      "type": "object",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1alpha1.GitHubBindingSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1alpha1.GitHubBindingStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "bindings.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitHubBinding",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1alpha1.GitHubBindingList": {
      "description": "GitHubBindingList contains a list of GitHubBinding",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.bindings.v1alpha1.GitHubBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "bindings.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitHubBindingList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1alpha1.GitHubBindingSpec": {
      "description": "GitHubBindingSpec holds the desired state of the GitHubBinding (from the client).",
      "type": "object",
      "required": [
        "subject",
        "accessToken"
      ],
      "properties": {
        "accessToken": {
          "description": "AccessToken is the Kubernetes secret containing the GitHub access token",
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1alpha1.SecretValueFromSource"
        },
        "subject": {
          "description": "Subject references the resource(s) whose \"runtime contract\" should be augmented by Binding implementations.",
          "default": {},
          "$ref": "#/definitions/dev.knative.pkg.tracker.Reference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "bindings.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitHubBindingSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1alpha1.GitHubBindingStatus": {
      "description": "GitHubBindingStatus communicates the observed state of the GitHubBinding (from the controller).",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "bindings.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitHubBindingStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1alpha1.GitLabBinding": {
      "description": "GitLabBinding describes a Binding that is also a Source. The `sink` (from the Source duck) is resolved to a URL and then projected into the `subject` by augmenting the runtime contract of the referenced containers to have a `K_SINK` environment variable holding the endpoint to which to send cloud events.",
      "type": "object",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1alpha1.GitLabBindingSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1alpha1.GitLabBindingStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "bindings.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitLabBinding",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1alpha1.GitLabBindingList": {
      "description": "GitLabBindingList contains a list of GitLabBinding",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.bindings.v1alpha1.GitLabBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "bindings.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitLabBindingList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1alpha1.GitLabBindingSpec": {
      "description": "GitLabBindingSpec holds the desired state of the GitLabBinding (from the client).",
      "type": "object",
      "required": [
        "subject",
        "accessToken"
      ],
      "properties": {
        "accessToken": {
          "description": "AccessToken is the Kubernetes secret containing the GitLab access token",
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1alpha1.SecretValueFromSource"
        },
        "subject": {
          "description": "Subject references the resource(s) whose \"runtime contract\" should be augmented by Binding implementations.",
          "default": {},
          "$ref": "#/definitions/dev.knative.pkg.tracker.Reference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "bindings.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitLabBindingSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1alpha1.GitLabBindingStatus": {
      "description": "GitLabBindingStatus communicates the observed state of the GitLabBinding (from the controller).",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "bindings.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitLabBindingStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1alpha1.SecretValueFromSource": {
      "description": "SecretValueFromSource represents the source of a secret value",
      "type": "object",
      "properties": {
        "secretKeyRef": {
          "description": "The Secret key to select from.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "bindings.knative.dev",
        "Version": "v1alpha1",
        "Kind": "SecretValueFromSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1beta1.KafkaAuthSpec": {
      "type": "object",
      "required": [
        "bootstrapServers"
      ],
      "properties": {
        "bootstrapServers": {
          "description": "Bootstrap servers are the Kafka servers the consumer will connect to.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "net": {
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.KafkaNetSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "bindings.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaAuthSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1beta1.KafkaBinding": {
      "description": "KafkaBinding is the Schema for the kafkasources API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.KafkaBindingSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.KafkaBindingStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "bindings.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaBinding",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1beta1.KafkaBindingList": {
      "description": "KafkaBindingList contains a list of KafkaBindings.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.bindings.v1beta1.KafkaBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "bindings.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaBindingList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1beta1.KafkaBindingSpec": {
      "description": "KafkaBindingSpec defines the desired state of the KafkaBinding.",
      "type": "object",
      "required": [
        "subject",
        "bootstrapServers"
      ],
      "properties": {
        "bootstrapServers": {
          "description": "Bootstrap servers are the Kafka servers the consumer will connect to.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "net": {
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.KafkaNetSpec"
        },
        "subject": {
          "description": "Subject references the resource(s) whose \"runtime contract\" should be augmented by Binding implementations.",
          "default": {},
          "$ref": "#/definitions/dev.knative.pkg.tracker.Reference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "bindings.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaBindingSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1beta1.KafkaBindingStatus": {
      "description": "KafkaBindingStatus defines the observed state of KafkaBinding.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "bindings.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaBindingStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1beta1.KafkaNetSpec": {
      "type": "object",
      "properties": {
        "sasl": {
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.KafkaSASLSpec"
        },
        "tls": {
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.KafkaTLSSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "bindings.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaNetSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1beta1.KafkaSASLSpec": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean"
        },
        "password": {
          "description": "Password is the Kubernetes secret containing the SASL password.",
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.SecretValueFromSource"
        },
        "type": {
          "description": "Type of saslType, defaults to plain (vs SCRAM-SHA-512 or SCRAM-SHA-256)",
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.SecretValueFromSource"
        },
        "user": {
          "description": "User is the Kubernetes secret containing the SASL username.",
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.SecretValueFromSource"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "bindings.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaSASLSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1beta1.KafkaTLSSpec": {
      "type": "object",
      "properties": {
        "caCert": {
          "description": "CACert is the Kubernetes secret containing the server CA cert.",
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.SecretValueFromSource"
        },
        "cert": {
          "description": "Cert is the Kubernetes secret containing the client certificate.",
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.SecretValueFromSource"
        },
        "enable": {
          "type": "boolean"
        },
        "key": {
          "description": "Key is the Kubernetes secret containing the client key.",
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.SecretValueFromSource"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "bindings.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaTLSSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.bindings.v1beta1.SecretValueFromSource": {
      "description": "SecretValueFromSource represents the source of a secret value",
      "type": "object",
      "properties": {
        "secretKeyRef": {
          "description": "The Secret key to select from.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "bindings.knative.dev",
        "Version": "v1beta1",
        "Kind": "SecretValueFromSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.AddressStatus": {
      "description": "AddressStatus shows how we expect folks to embed Addressable in their Status field.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is a single Addressable address. If Addresses is present, Address will be ignored by clients.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "addresses": {
          "description": "Addresses is a list of addresses for different protocols (HTTP and HTTPS) If Addresses is present, Address must be ignored by clients.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "AddressStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.Addressable": {
      "description": "Addressable provides a generic mechanism for a custom resource definition to indicate a destination for message delivery.\n\nAddressable is the schema for the destination information. This is typically stored in the object's `status`, as this information may be generated by the controller.",
      "type": "object",
      "properties": {
        "CACerts": {
          "description": "CACerts is the Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "audience": {
          "description": "Audience is the OIDC audience for this address.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the address.",
          "type": "string"
        },
        "url": {
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "Addressable",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.AddressableType": {
      "description": "AddressableType is a skeleton type wrapping Addressable in the manner we expect resource writers defining compatible resources to embed it.  We will typically use this type to deserialize Addressable ObjectReferences and access the Addressable data.  This is not a real resource.",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.AddressStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "AddressableType",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.AddressableTypeList": {
      "description": "AddressableTypeList is a list of AddressableType resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.AddressableType"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "AddressableTypeList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.AppliedEventPoliciesStatus": {
      "description": "AppliedEventPoliciesStatus contains the list of policies which apply to a resource. This type is intended to be embedded into a status struct.",
      "type": "object",
      "properties": {
        "policies": {
          "description": "Policies holds the list of applied EventPolicies",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.AppliedEventPolicyRef"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "AppliedEventPoliciesStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.AppliedEventPolicyRef": {
      "description": "AppliedEventPolicyRef is the reference to an EventPolicy",
      "type": "object",
      "required": [
        "apiVersion",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion of the applied EventPolicy. This indicates, which version of EventPolicy is supported by the resource.",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name of the applied EventPolicy",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "AppliedEventPolicyRef",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.AuthStatus": {
      "description": "AuthStatus is meant to provide the generated service account name in the resource status.",
      "type": "object",
      "properties": {
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the generated service account used for this components OIDC authentication.",
          "type": "string"
        },
        "serviceAccountNames": {
          "description": "ServiceAccountNames is the list of names of the generated service accounts used for this components OIDC authentication. This list can have len() \u003e 1, when the component uses multiple identities (e.g. in case of a Parallel).",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "AuthStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.AuthenticatableStatus": {
      "type": "object",
      "properties": {
        "auth": {
          "description": "Auth contains the service account name for the subscription",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "AuthenticatableStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.AuthenticatableType": {
      "description": "AuthenticatableType is a skeleton type wrapping AuthStatus in the manner we expect resource writers defining compatible resources to embed it.  We will typically use this type to deserialize AuthenticatableType ObjectReferences and access the AuthenticatableType data.  This is not a real resource.",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.AuthenticatableStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "AuthenticatableType",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.AuthenticatableTypeList": {
      "description": "AuthenticatableTypeList is a list of AuthenticatableType resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.AuthenticatableType"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "AuthenticatableTypeList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.Binding": {
      "description": "Binding is a duck type that specifies the partial schema to which all Binding implementations should adhere.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.BindingSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "Binding",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.BindingList": {
      "description": "BindingList is a list of Binding resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Binding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "BindingList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.BindingSpec": {
      "description": "BindingSpec specifies the spec portion of the Binding partial-schema.",
      "type": "object",
      "required": [
        "subject"
      ],
      "properties": {
        "subject": {
          "description": "Subject references the resource(s) whose \"runtime contract\" should be augmented by Binding implementations.",
          "default": {},
          "$ref": "#/definitions/dev.knative.pkg.tracker.Reference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "BindingSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.Channelable": {
      "description": "Channelable is a skeleton type wrapping Subscribable and Addressable in the manner we expect resource writers defining compatible resources to embed it. We will typically use this type to deserialize Channelable ObjectReferences and access their subscription and address data.  This is not a real resource.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the part where the Channelable fulfills the Subscribable contract.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.ChannelableSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.ChannelableStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "Channelable",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.ChannelableList": {
      "description": "ChannelableList is a list of Channelable resources.",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Channelable"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "ChannelableList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.ChannelableSpec": {
      "description": "ChannelableSpec contains Spec of the Channelable object",
      "type": "object",
      "properties": {
        "delivery": {
          "description": "DeliverySpec contains the default delivery spec for each subscription to this Channelable. Each subscription delivery spec, if any, overrides this global delivery spec.",
          "$ref": "#/definitions/dev.knative.duck.v1.DeliverySpec"
        },
        "subscribers": {
          "description": "This is the list of subscriptions for this subscribable.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.SubscriberSpec"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "ChannelableSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.ChannelableStatus": {
      "description": "ChannelableStatus contains the Status of a Channelable object.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is a single Addressable address. If Addresses is present, Address will be ignored by clients.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "addresses": {
          "description": "Addresses is a list of addresses for different protocols (HTTP and HTTPS) If Addresses is present, Address must be ignored by clients.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
          }
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "deadLetterSinkAudience": {
          "description": "DeadLetterSinkAudience is the OIDC audience of the DeadLetterSink",
          "type": "string"
        },
        "deadLetterSinkCACerts": {
          "description": "DeadLetterSinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "deadLetterSinkUri": {
          "description": "DeadLetterSink is a KReference that is the reference to the native, platform specific channel where failed events are sent to.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "policies": {
          "description": "Policies holds the list of applied EventPolicies",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.AppliedEventPolicyRef"
          }
        },
        "subscribers": {
          "description": "This is the list of subscription's statuses for this channel.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.SubscriberStatus"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "ChannelableStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.CloudEventAttributes": {
      "description": "CloudEventAttributes specifies the attributes that a Source uses as part of its CloudEvents.",
      "type": "object",
      "properties": {
        "source": {
          "description": "Source is the CloudEvents source attribute.",
          "type": "string"
        },
        "type": {
          "description": "Type refers to the CloudEvent type attribute.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "CloudEventAttributes",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.CloudEventOverrides": {
      "description": "CloudEventOverrides defines arguments for a Source that control the output format of the CloudEvents produced by the Source.",
      "type": "object",
      "properties": {
        "extensions": {
          "description": "Extensions specify what attribute are added or overridden on the outbound event. Each `Extensions` key-value pair are set on the event as an attribute extension independently.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "CloudEventOverrides",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.CronJob": {
      "description": "CronJob is a wrapper around CronJob resource, which supports our interfaces for webhooks",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.k8s.api.batch.v1.CronJobSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "CronJob",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.CronJobList": {
      "description": "CronJobList is a list of CronJob resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CronJob"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "CronJobList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.DeliverySpec": {
      "description": "DeliverySpec contains the delivery options for event senders, such as channelable and source.",
      "type": "object",
      "properties": {
        "backoffDelay": {
          "description": "BackoffDelay is the delay before retrying. More information on Duration format:\n - https://www.iso.org/iso-8601-date-and-time-format.html\n - https://en.wikipedia.org/wiki/ISO_8601\n\nFor linear policy, backoff delay is backoffDelay*\u003cnumberOfRetries\u003e. For exponential policy, backoff delay is backoffDelay*2^\u003cnumberOfRetries\u003e.",
          "type": "string"
        },
        "backoffPolicy": {
          "description": "BackoffPolicy is the retry backoff policy (linear, exponential).",
          "type": "string"
        },
        "deadLetterSink": {
          "description": "DeadLetterSink is the sink receiving event that could not be sent to a destination.",
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "format": {
          "description": "format specifies the desired event format for the cloud event. It can be one of the following values: - nil: default value, no specific format required. - \"JSON\": indicates the event should be in structured mode. - \"binary\": indicates the event should be in binary mode.",
          "type": "string"
        },
        "retry": {
          "description": "Retry is the minimum number of retries the sender should attempt when sending an event before moving it to the dead letter sink.",
          "type": "integer",
          "format": "int32"
        },
        "retryAfterMax": {
          "description": "RetryAfterMax provides an optional upper bound on the duration specified in a \"Retry-After\" header when calculating backoff times for retrying 429 and 503 response codes.  Setting the value to zero (\"PT0S\") can be used to opt-out of respecting \"Retry-After\" header values altogether. This value only takes effect if \"Retry\" is configured, and also depends on specific implementations (Channels, Sources, etc.) choosing to provide this capability.\n\nNote: This API is EXPERIMENTAL and might be changed at anytime. While this experimental\n      feature is in the Alpha/Beta stage, you must provide a valid value to opt-in for\n      supporting \"Retry-After\" headers.  When the feature becomes Stable/GA \"Retry-After\"\n      headers will be respected by default, and you can choose to specify \"PT0S\" to\n      opt-out of supporting \"Retry-After\" headers.\n      For more details: https://github.com/knative/eventing/issues/5811\n\nMore information on Duration format:\n - https://www.iso.org/iso-8601-date-and-time-format.html\n - https://en.wikipedia.org/wiki/ISO_8601",
          "type": "string"
        },
        "timeout": {
          "description": "Timeout is the timeout of each single request. The value must be greater than 0. More information on Duration format:\n - https://www.iso.org/iso-8601-date-and-time-format.html\n - https://en.wikipedia.org/wiki/ISO_8601\n\nNote: This API is EXPERIMENTAL and might break anytime. For more details: https://github.com/knative/eventing/issues/5148",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "DeliverySpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.DeliveryStatus": {
      "description": "DeliveryStatus contains the Status of an object supporting delivery options. This type is intended to be embedded into a status struct.",
      "type": "object",
      "properties": {
        "deadLetterSinkAudience": {
          "description": "DeadLetterSinkAudience is the OIDC audience of the DeadLetterSink",
          "type": "string"
        },
        "deadLetterSinkCACerts": {
          "description": "DeadLetterSinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "deadLetterSinkUri": {
          "description": "DeadLetterSink is a KReference that is the reference to the native, platform specific channel where failed events are sent to.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "DeliveryStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.Destination": {
      "description": "Destination represents a target of an invocation over HTTP.",
      "type": "object",
      "properties": {
        "CACerts": {
          "description": "CACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468. If set, these CAs are appended to the set of CAs provided by the Addressable target, if any.",
          "type": "string"
        },
        "audience": {
          "description": "Audience is the OIDC audience. This need only be set, if the target is not an Addressable and thus the Audience can't be received from the Addressable itself. In case the Addressable specifies an Audience too, the Destinations Audience takes preference.",
          "type": "string"
        },
        "ref": {
          "description": "Ref points to an Addressable.",
          "$ref": "#/definitions/dev.knative.duck.v1.KReference"
        },
        "uri": {
          "description": "URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "Destination",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.KReference": {
      "description": "KReference contains enough information to refer to another object. It's a trimmed down version of corev1.ObjectReference.",
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "address": {
          "description": "Address points to a specific Address Name.",
          "type": "string"
        },
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "group": {
          "description": "Group of the API, without the version of the group. This can be used as an alternative to the APIVersion, and then resolved using ResolveGroup. Note: This API is EXPERIMENTAL and might break anytime. For more details: https://github.com/knative/eventing/issues/5086",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "KReference",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.KResource": {
      "description": "KResource is a skeleton type wrapping Conditions in the manner we expect resource writers defining compatible resources to embed it.  We will typically use this type to deserialize Conditions ObjectReferences and access the Conditions data.  This is not a real resource.",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Status"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "KResource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.KResourceList": {
      "description": "KResourceList is a list of KResource resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.KResource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "KResourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.Pod": {
      "description": "Pod is a wrapper around Pod-like resource, which supports our interfaces for webhooks",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "Pod",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.PodList": {
      "description": "PodList is a list of WithPod resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.WithPod"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "PodList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.PodSpecable": {
      "description": "PodSpecable is implemented by types containing a PodTemplateSpec in the manner of ReplicaSet, Deployment, DaemonSet, StatefulSet.",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "PodSpecable",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.Source": {
      "description": "Source is the minimum resource shape to adhere to the Source Specification. This duck type is intended to allow implementors of Sources and Importers to verify their own resources meet the expectations. This is not a real resource. NOTE: The Source Specification is in progress and the shape and names could be modified until it has been accepted.",
      "type": "object",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.SourceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.SourceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "Source",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.SourceList": {
      "description": "SourceList is a list of Source resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Source"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "SourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.SourceSpec": {
      "type": "object",
      "properties": {
        "ceOverrides": {
          "description": "CloudEventOverrides defines overrides to control the output format and modifications of the event sent to the sink.",
          "$ref": "#/definitions/dev.knative.duck.v1.CloudEventOverrides"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a uri to use as the sink.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "SourceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.SourceStatus": {
      "description": "SourceStatus shows how we expect folks to embed Addressable in their Status field.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "SourceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.Status": {
      "description": "Status shows how we expect folks to embed Conditions in their Status field. WARNING: Adding fields to this struct will add them to all Knative resources.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "Status",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.Subscribable": {
      "description": "Subscribable is a skeleton type wrapping Subscribable in the manner we expect resource writers defining compatible resources to embed it. We will typically use this type to deserialize SubscribableType ObjectReferences and access the Subscription data.  This is not a real resource.",
      "type": "object",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "SubscribableSpec is the part where Subscribable object is configured as to be compatible with Subscribable contract.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.SubscribableSpec"
        },
        "status": {
          "description": "SubscribableStatus is the part where SubscribableStatus object is configured as to be compatible with Subscribable contract.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.SubscribableStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "Subscribable",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.SubscribableList": {
      "description": "SubscribableTypeList is a list of SubscribableType resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Subscribable"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "SubscribableList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.SubscribableSpec": {
      "description": "SubscribableSpec shows how we expect folks to embed Subscribable in their Spec field.",
      "type": "object",
      "properties": {
        "subscribers": {
          "description": "This is the list of subscriptions for this subscribable.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.SubscriberSpec"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "SubscribableSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.SubscribableStatus": {
      "description": "SubscribableStatus is the schema for the subscribable's status portion of the status section of the resource.",
      "type": "object",
      "properties": {
        "subscribers": {
          "description": "This is the list of subscription's statuses for this channel.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.SubscriberStatus"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "SubscribableStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.SubscriberSpec": {
      "description": "SubscriberSpec defines a single subscriber to a Subscribable.\n\nAt least one of SubscriberURI and ReplyURI must be present",
      "type": "object",
      "properties": {
        "auth": {
          "description": "Auth contains the service account name for the subscription",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "delivery": {
          "description": "DeliverySpec contains options controlling the event delivery",
          "$ref": "#/definitions/dev.knative.duck.v1.DeliverySpec"
        },
        "generation": {
          "description": "Generation of the origin of the subscriber with uid:UID.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Name is used to identify the original subscription object.",
          "type": "string"
        },
        "replyAudience": {
          "description": "ReplyAudience is the OIDC audience for the replyUri.",
          "type": "string"
        },
        "replyCACerts": {
          "description": "ReplyCACerts is the Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468 for the replyUri.",
          "type": "string"
        },
        "replyUri": {
          "description": "ReplyURI is the endpoint for the reply",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "subscriberAudience": {
          "description": "SubscriberAudience is the OIDC audience for the subscriberUri.",
          "type": "string"
        },
        "subscriberCACerts": {
          "description": "SubscriberCACerts is the Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468 for the subscriberUri",
          "type": "string"
        },
        "subscriberUri": {
          "description": "SubscriberURI is the endpoint for the subscriber",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "uid": {
          "description": "UID is used to understand the origin of the subscriber.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "SubscriberSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.SubscriberStatus": {
      "description": "SubscriberStatus defines the status of a single subscriber to a Channel.",
      "type": "object",
      "properties": {
        "auth": {
          "description": "Auth provides the relevant information for OIDC authentication.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "message": {
          "description": "A human readable message indicating details of Ready status.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "Generation of the origin of the subscriber with uid:UID.",
          "type": "integer",
          "format": "int64"
        },
        "ready": {
          "description": "Status of the subscriber.",
          "type": "string"
        },
        "uid": {
          "description": "UID is used to understand the origin of the subscriber.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "SubscriberStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.WithPod": {
      "description": "WithPod is the shell that demonstrates how PodSpecable types wrap a PodSpec.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.WithPodSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "WithPod",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.WithPodList": {
      "description": "WithPodList is a list of WithPod resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.WithPod"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "WithPodList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1.WithPodSpec": {
      "description": "WithPodSpec is the shell around the PodSpecable within WithPod.",
      "type": "object",
      "properties": {
        "template": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.PodSpecable"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1",
        "Kind": "WithPodSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.AddressStatus": {
      "description": "AddressStatus shows how we expect folks to embed Addressable in their Status field.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is a single Addressable address. If Addresses is present, Address will be ignored by clients.",
          "$ref": "#/definitions/dev.knative.duck.v1alpha1.Addressable"
        },
        "addresses": {
          "description": "Addresses is a list of addresses for different protocols (HTTP and HTTPS) If Addresses is present, Address must be ignored by clients.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1alpha1.Addressable"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "AddressStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.Addressable": {
      "description": "Addressable provides a generic mechanism for a custom resource definition to indicate a destination for message delivery.\n\nAddressable is the schema for the destination information. This is typically stored in the object's `status`, as this information may be generated by the controller.",
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "Addressable",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.AddressableType": {
      "description": "AddressableType is a skeleton type wrapping Addressable in the manner we expect resource writers defining compatible resources to embed it.  We will typically use this type to deserialize Addressable ObjectReferences and access the Addressable data.  This is not a real resource.",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1alpha1.AddressStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "AddressableType",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.AddressableTypeList": {
      "description": "AddressableTypeList is a list of AddressableType resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1alpha1.AddressableType"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "AddressableTypeList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.Binding": {
      "description": "Binding is a duck type that specifies the partial schema to which all Binding implementations should adhere.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1alpha1.BindingSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "Binding",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.BindingList": {
      "description": "BindingList is a list of Binding resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1alpha1.Binding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "BindingList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.BindingSpec": {
      "description": "BindingSpec specifies the spec portion of the Binding partial-schema.",
      "type": "object",
      "required": [
        "subject"
      ],
      "properties": {
        "subject": {
          "description": "Subject references the resource(s) whose \"runtime contract\" should be augmented by Binding implementations.",
          "default": {},
          "$ref": "#/definitions/dev.knative.pkg.tracker.Reference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "BindingSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.LegacyTarget": {
      "description": "LegacyTarget is a skeleton type wrapping LegacyTargetable in the manner we want to support unless they get migrated into supporting Legacy. We will typically use this type to deserialize LegacyTargetable ObjectReferences and access the LegacyTargetable data.  This is not a real resource. ** Do not use this for any new resources **",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1alpha1.LegacyTargetable"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "LegacyTarget",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.LegacyTargetList": {
      "description": "LegacyTargetList is a list of LegacyTarget resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1alpha1.LegacyTarget"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "LegacyTargetList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.LegacyTargetable": {
      "description": "LegacyTargetable left around until we migrate to Addressable in the dependent resources. Addressable has more structure in the way it defines the fields. LegacyTargetable only assumed a single string in the Status field and we're moving towards defining proper structs under Status rather than strings. This is to support existing resources until they migrate.\n\n# Do not use this for anything new, use Addressable\n\nLegacyTargetable is the old schema for the addressable portion of the payload\n\nFor new resources use Addressable.",
      "type": "object",
      "properties": {
        "domainInternal": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "LegacyTargetable",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.Placeable": {
      "description": "Placeable is a list of podName and virtual replicas pairs. Each pair represents the assignment of virtual replicas to a pod",
      "type": "object",
      "properties": {
        "maxAllowedVReplicas": {
          "type": "integer",
          "format": "int32"
        },
        "placements": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1alpha1.Placement"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "Placeable",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.PlaceableList": {
      "description": "PlaceableList is a list of PlaceableType resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1alpha1.Placeable"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PlaceableList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.PlaceableStatus": {
      "type": "object",
      "properties": {
        "maxAllowedVReplicas": {
          "type": "integer",
          "format": "int32"
        },
        "placements": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1alpha1.Placement"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PlaceableStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.PlaceableType": {
      "description": "PlaceableType is a skeleton type wrapping Placeable in the manner we expect resource writers defining compatible resources to embed it.  We will typically use this type to deserialize Placeable ObjectReferences and access the Placeable data.  This is not a real resource.",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1alpha1.PlaceableStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PlaceableType",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.Placement": {
      "type": "object",
      "properties": {
        "podName": {
          "description": "PodName is the name of the pod where the resource is placed",
          "type": "string"
        },
        "vreplicas": {
          "description": "VReplicas is the number of virtual replicas assigned to in the pod",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "Placement",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.Target": {
      "description": "Target is a skeleton type wrapping Targetable in the manner we expect resource writers defining compatible resources to embed it.  We will typically use this type to deserialize Targetable ObjectReferences and access the Targetable data.  This is not a real resource.",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1alpha1.TargetStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "Target",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.TargetList": {
      "description": "TargetList is a list of Target resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1alpha1.Target"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "TargetList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.TargetStatus": {
      "description": "TargetStatus shows how we expect folks to embed Targetable in their Status field.",
      "type": "object",
      "properties": {
        "targetable": {
          "$ref": "#/definitions/dev.knative.duck.v1alpha1.Targetable"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "TargetStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1alpha1.Targetable": {
      "description": "Targetable is an earlier version of the Callable interface. Callable is a higher-level interface which implements Addressable but further promises that the destination may synchronously return response messages in reply to a message.\n\nTargetable implementations should instead implement Addressable and include an `eventing.knative.dev/returns=any` annotation.\n\nTargetable is retired; implement Addressable for now.",
      "type": "object",
      "properties": {
        "domainInternal": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1alpha1",
        "Kind": "Targetable",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.AddressStatus": {
      "description": "AddressStatus shows how we expect folks to embed Addressable in their Status field.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is a single Addressable address. If Addresses is present, Address will be ignored by clients.",
          "$ref": "#/definitions/dev.knative.duck.v1beta1.Addressable"
        },
        "addresses": {
          "description": "Addresses is a list of addresses for different protocols (HTTP and HTTPS) If Addresses is present, Address must be ignored by clients.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1beta1.Addressable"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "AddressStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.Addressable": {
      "description": "Addressable provides a generic mechanism for a custom resource definition to indicate a destination for message delivery.\n\nAddressable is the schema for the destination information. This is typically stored in the object's `status`, as this information may be generated by the controller.",
      "type": "object",
      "properties": {
        "CACerts": {
          "description": "CACerts is the Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the address.",
          "type": "string"
        },
        "url": {
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "Addressable",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.AddressableType": {
      "description": "AddressableType is a skeleton type wrapping Addressable in the manner we expect resource writers defining compatible resources to embed it.  We will typically use this type to deserialize Addressable ObjectReferences and access the Addressable data.  This is not a real resource.",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1beta1.AddressStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "AddressableType",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.AddressableTypeList": {
      "description": "AddressableTypeList is a list of AddressableType resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1beta1.AddressableType"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "AddressableTypeList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.Binding": {
      "description": "Binding is a duck type that specifies the partial schema to which all Binding implementations should adhere.",
      "type": "object",
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1beta1.BindingSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "Binding",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.BindingList": {
      "description": "BindingList is a list of Binding resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1beta1.Binding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "BindingList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.BindingSpec": {
      "description": "BindingSpec specifies the spec portion of the Binding partial-schema.",
      "type": "object",
      "required": [
        "subject"
      ],
      "properties": {
        "subject": {
          "description": "Subject references the resource(s) whose \"runtime contract\" should be augmented by Binding implementations.",
          "default": {},
          "$ref": "#/definitions/dev.knative.pkg.tracker.Reference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "BindingSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.Channelable": {
      "description": "Channelable is a skeleton type wrapping Subscribable and Addressable in the manner we expect resource writers defining compatible resources to embed it. We will typically use this type to deserialize Channelable ObjectReferences and access their subscription and address data.  This is not a real resource.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the part where the Channelable fulfills the Subscribable contract.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1beta1.ChannelableSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1beta1.ChannelableStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "Channelable",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.ChannelableList": {
      "description": "ChannelableList is a list of Channelable resources.",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1beta1.Channelable"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "ChannelableList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.ChannelableSpec": {
      "description": "ChannelableSpec contains Spec of the Channelable object",
      "type": "object",
      "properties": {
        "delivery": {
          "description": "DeliverySpec contains options controlling the event delivery",
          "$ref": "#/definitions/dev.knative.duck.v1beta1.DeliverySpec"
        },
        "subscribers": {
          "description": "This is the list of subscriptions for this subscribable.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1beta1.SubscriberSpec"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "ChannelableSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.ChannelableStatus": {
      "description": "ChannelableStatus contains the Status of a Channelable object.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is a single Addressable address. If Addresses is present, Address will be ignored by clients.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "addresses": {
          "description": "Addresses is a list of addresses for different protocols (HTTP and HTTPS) If Addresses is present, Address must be ignored by clients.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
          }
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "deadLetterChannel": {
          "description": "DeadLetterChannel is a KReference and is set by the channel when it supports native error handling via a channel Failed messages are delivered here.",
          "$ref": "#/definitions/dev.knative.duck.v1.KReference"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "subscribers": {
          "description": "This is the list of subscription's statuses for this channel.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1beta1.SubscriberStatus"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "ChannelableStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.CloudEventOverrides": {
      "description": "CloudEventOverrides defines arguments for a Source that control the output format of the CloudEvents produced by the Source.",
      "type": "object",
      "properties": {
        "extensions": {
          "description": "Extensions specify what attribute are added or overridden on the outbound event. Each `Extensions` key-value pair are set on the event as an attribute extension independently.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "CloudEventOverrides",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.DeliverySpec": {
      "description": "DeliverySpec contains the delivery options for event senders, such as channelable and source.",
      "type": "object",
      "properties": {
        "backoffDelay": {
          "description": "BackoffDelay is the delay before retrying. More information on Duration format:\n - https://www.iso.org/iso-8601-date-and-time-format.html\n - https://en.wikipedia.org/wiki/ISO_8601\n\nFor linear policy, backoff delay is backoffDelay*\u003cnumberOfRetries\u003e. For exponential policy, backoff delay is backoffDelay*2^\u003cnumberOfRetries\u003e.",
          "type": "string"
        },
        "backoffPolicy": {
          "description": "BackoffPolicy is the retry backoff policy (linear, exponential).",
          "type": "string"
        },
        "deadLetterSink": {
          "description": "DeadLetterSink is the sink receiving event that could not be sent to a destination.",
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "retry": {
          "description": "Retry is the minimum number of retries the sender should attempt when sending an event before moving it to the dead letter sink.",
          "type": "integer",
          "format": "int32"
        },
        "timeout": {
          "description": "Timeout is the timeout of each single request. More information on Duration format:\n - https://www.iso.org/iso-8601-date-and-time-format.html\n - https://en.wikipedia.org/wiki/ISO_8601",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "DeliverySpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.DeliveryStatus": {
      "description": "DeliveryStatus contains the Status of an object supporting delivery options.",
      "type": "object",
      "properties": {
        "deadLetterChannel": {
          "description": "DeadLetterChannel is a KReference that is the reference to the native, platform specific channel where failed events are sent to.",
          "$ref": "#/definitions/dev.knative.duck.v1.KReference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "DeliveryStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.Destination": {
      "description": "Destination represents a target of an invocation over HTTP.",
      "type": "object",
      "properties": {
        "CACerts": {
          "description": "CACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468. If set, these CAs are appended to the set of CAs provided by the Addressable target, if any.",
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "ref": {
          "description": "Ref points to an Addressable.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "uri": {
          "description": "URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "Destination",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.KResource": {
      "description": "KResource is a skeleton type wrapping Conditions in the manner we expect resource writers defining compatible resources to embed it.  We will typically use this type to deserialize Conditions ObjectReferences and access the Conditions data.  This is not a real resource.",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1beta1.Status"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "KResource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.KResourceList": {
      "description": "KResourceList is a list of KResource resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1beta1.KResource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "KResourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.Source": {
      "description": "Source is the minimum resource shape to adhere to the Source Specification. This duck type is intended to allow implementors of Sources and Importers to verify their own resources meet the expectations. This is not a real resource. NOTE: The Source Specification is in progress and the shape and names could be modified until it has been accepted.",
      "type": "object",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1beta1.SourceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1beta1.SourceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "Source",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.SourceList": {
      "description": "SourceList is a list of Source resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1beta1.Source"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "SourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.SourceSpec": {
      "type": "object",
      "properties": {
        "ceOverrides": {
          "description": "CloudEventOverrides defines overrides to control the output format and modifications of the event sent to the sink.",
          "$ref": "#/definitions/dev.knative.duck.v1beta1.CloudEventOverrides"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a domain name or a URI directly to use as the sink.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1beta1.Destination"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "SourceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.SourceStatus": {
      "description": "SourceStatus shows how we expect folks to embed Addressable in their Status field.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "SourceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.Status": {
      "description": "Status shows how we expect folks to embed Conditions in their Status field. WARNING: Adding fields to this struct will add them to all Knative resources.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "Status",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.Subscribable": {
      "description": "Subscribable is a skeleton type wrapping Subscribable in the manner we expect resource writers defining compatible resources to embed it. We will typically use this type to deserialize SubscribableType ObjectReferences and access the Subscription data.  This is not a real resource.",
      "type": "object",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "SubscribableSpec is the part where Subscribable object is configured as to be compatible with Subscribable contract.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1beta1.SubscribableSpec"
        },
        "status": {
          "description": "SubscribableStatus is the part where SubscribableStatus object is configured as to be compatible with Subscribable contract.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1beta1.SubscribableStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "Subscribable",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.SubscribableList": {
      "description": "SubscribableTypeList is a list of SubscribableType resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1beta1.Subscribable"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "SubscribableList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.SubscribableSpec": {
      "description": "SubscribableSpec shows how we expect folks to embed Subscribable in their Spec field.",
      "type": "object",
      "properties": {
        "subscribers": {
          "description": "This is the list of subscriptions for this subscribable.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1beta1.SubscriberSpec"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "SubscribableSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.SubscribableStatus": {
      "description": "SubscribableStatus is the schema for the subscribable's status portion of the status section of the resource.",
      "type": "object",
      "properties": {
        "subscribers": {
          "description": "This is the list of subscription's statuses for this channel.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1beta1.SubscriberStatus"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "SubscribableStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.SubscriberSpec": {
      "description": "SubscriberSpec defines a single subscriber to a Subscribable.\n\nAt least one of SubscriberURI and ReplyURI must be present",
      "type": "object",
      "properties": {
        "delivery": {
          "description": "DeliverySpec contains options controlling the event delivery",
          "$ref": "#/definitions/dev.knative.duck.v1beta1.DeliverySpec"
        },
        "generation": {
          "description": "Generation of the origin of the subscriber with uid:UID.",
          "type": "integer",
          "format": "int64"
        },
        "replyUri": {
          "description": "ReplyURI is the endpoint for the reply",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "subscriberUri": {
          "description": "SubscriberURI is the endpoint for the subscriber",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "uid": {
          "description": "UID is used to understand the origin of the subscriber.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "SubscriberSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.duck.v1beta1.SubscriberStatus": {
      "description": "SubscriberStatus defines the status of a single subscriber to a Channel.",
      "type": "object",
      "properties": {
        "message": {
          "description": "A human readable message indicating details of Ready status.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "Generation of the origin of the subscriber with uid:UID.",
          "type": "integer",
          "format": "int64"
        },
        "ready": {
          "description": "Status of the subscriber.",
          "type": "string"
        },
        "uid": {
          "description": "UID is used to understand the origin of the subscriber.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "duck.knative.dev",
        "Version": "v1beta1",
        "Kind": "SubscriberStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1.Broker": {
      "description": "Broker collects a pool of events that are consumable using Triggers. Brokers provide a well-known endpoint for event delivery that senders can use with minimal knowledge of the event routing strategy. Subscribers use Triggers to request delivery of events from a Broker's pool to a specific URL or Addressable endpoint.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of the Broker.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1.BrokerSpec"
        },
        "status": {
          "description": "Status represents the current state of the Broker. This data may be out of date.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1.BrokerStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "eventing.knative.dev",
        "Version": "v1",
        "Kind": "Broker",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1.BrokerList": {
      "description": "BrokerList is a collection of Brokers.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1.Broker"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "eventing.knative.dev",
        "Version": "v1",
        "Kind": "BrokerList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1.BrokerSpec": {
      "type": "object",
      "properties": {
        "config": {
          "description": "Config is a KReference to the configuration that specifies configuration options for this Broker. For example, this could be a pointer to a ConfigMap.",
          "$ref": "#/definitions/dev.knative.duck.v1.KReference"
        },
        "delivery": {
          "description": "Delivery contains the delivery spec for each trigger to this Broker. Each trigger delivery spec, if any, overrides this global delivery spec.",
          "$ref": "#/definitions/dev.knative.duck.v1.DeliverySpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1",
        "Kind": "BrokerSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1.BrokerStatus": {
      "description": "BrokerStatus represents the current state of a Broker.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is a single Addressable address. If Addresses is present, Address will be ignored by clients.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "addresses": {
          "description": "Addresses is a list of addresses for different protocols (HTTP and HTTPS) If Addresses is present, Address must be ignored by clients.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
          }
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "deadLetterSinkAudience": {
          "description": "DeadLetterSinkAudience is the OIDC audience of the DeadLetterSink",
          "type": "string"
        },
        "deadLetterSinkCACerts": {
          "description": "DeadLetterSinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "deadLetterSinkUri": {
          "description": "DeadLetterSink is a KReference that is the reference to the native, platform specific channel where failed events are sent to.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "policies": {
          "description": "Policies holds the list of applied EventPolicies",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.AppliedEventPolicyRef"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1",
        "Kind": "BrokerStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1.SubscriptionsAPIFilter": {
      "description": "SubscriptionsAPIFilter allows defining a filter expression using CloudEvents Subscriptions API. If multiple filters are specified, then the same semantics of SubscriptionsAPIFilter.All is applied. If no filter dialect or empty object is specified, then the filter always accept the events.",
      "type": "object",
      "properties": {
        "all": {
          "description": "All evaluates to true if all the nested expressions evaluate to true. It must contain at least one filter expression.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1.SubscriptionsAPIFilter"
          }
        },
        "any": {
          "description": "Any evaluates to true if at least one of the nested expressions evaluates to true. It must contain at least one filter expression.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1.SubscriptionsAPIFilter"
          }
        },
        "cesql": {
          "description": "CESQL is a CloudEvents SQL expression that will be evaluated to true or false against each CloudEvent.",
          "type": "string"
        },
        "exact": {
          "description": "Exact evaluates to true if the values of the matching CloudEvents attributes MUST all exactly match with the associated value String specified (case-sensitive). The keys are the names of the CloudEvents attributes to be matched, and their values are the String values to use in the comparison. The attribute name and value specified in the filter express MUST NOT be empty strings.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "not": {
          "description": "Not evaluates to true if the nested expression evaluates to false.",
          "$ref": "#/definitions/dev.knative.eventing.v1.SubscriptionsAPIFilter"
        },
        "prefix": {
          "description": "Prefix evaluates to true if the values of the matching CloudEvents attributes MUST all start with the associated value String specified (case sensitive). The keys are the names of the CloudEvents attributes to be matched, and their values are the String values to use in the comparison. The attribute name and value specified in the filter express MUST NOT be empty strings.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "suffix": {
          "description": "Suffix evaluates to true if the values of the matching CloudEvents attributes MUST all end with the associated value String specified (case sensitive). The keys are the names of the CloudEvents attributes to be matched, and their values are the String values to use in the comparison. The attribute name and value specified in the filter express MUST NOT be empty strings.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1",
        "Kind": "SubscriptionsAPIFilter",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1.Trigger": {
      "description": "Trigger represents a request to have events delivered to a subscriber from a Broker's event pool.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of the Trigger.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1.TriggerSpec"
        },
        "status": {
          "description": "Status represents the current state of the Trigger. This data may be out of date.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1.TriggerStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "eventing.knative.dev",
        "Version": "v1",
        "Kind": "Trigger",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1.TriggerFilter": {
      "type": "object",
      "properties": {
        "attributes": {
          "description": "Attributes filters events by exact match on event context attributes. Each key in the map is compared with the equivalent key in the event context. An event passes the filter if all values are equal to the specified values. Nested context attributes are not supported as keys. Only string values are supported.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1",
        "Kind": "TriggerFilter",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1.TriggerList": {
      "description": "TriggerList is a collection of Triggers.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1.Trigger"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "eventing.knative.dev",
        "Version": "v1",
        "Kind": "TriggerList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1.TriggerSpec": {
      "type": "object",
      "required": [
        "subscriber"
      ],
      "properties": {
        "broker": {
          "description": "Broker is the broker that this trigger receives events from.",
          "type": "string"
        },
        "brokerRef": {
          "description": "BrokerRef is the broker that is used for cross-namespace referencing.",
          "$ref": "#/definitions/dev.knative.duck.v1.KReference"
        },
        "delivery": {
          "description": "Delivery contains the delivery spec for this specific trigger.",
          "$ref": "#/definitions/dev.knative.duck.v1.DeliverySpec"
        },
        "filter": {
          "description": "Filter is the filter to apply against all events from the Broker. Only events that pass this filter will be sent to the Subscriber. If not specified, will default to allowing all events.",
          "$ref": "#/definitions/dev.knative.eventing.v1.TriggerFilter"
        },
        "filters": {
          "description": "Filters is an experimental field that conforms to the CNCF CloudEvents Subscriptions API. It's an array of filter expressions that evaluate to true or false. If any filter expression in the array evaluates to false, the event MUST NOT be sent to the Subscriber. If all the filter expressions in the array evaluate to true, the event MUST be attempted to be delivered. Absence of a filter or empty array implies a value of true. In the event of users specifying both Filter and Filters, then the latter will override the former. This will allow users to try out the effect of the new Filters field without compromising the existing attribute-based Filter and try it out on existing Trigger objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1.SubscriptionsAPIFilter"
          }
        },
        "subscriber": {
          "description": "Subscriber is the addressable that receives events from the Broker that pass the Filter. It is required.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1",
        "Kind": "TriggerSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1.TriggerStatus": {
      "description": "TriggerStatus represents the current state of a Trigger.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth provides the relevant information for OIDC authentication.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "deadLetterSinkAudience": {
          "description": "DeadLetterSinkAudience is the OIDC audience of the DeadLetterSink",
          "type": "string"
        },
        "deadLetterSinkCACerts": {
          "description": "DeadLetterSinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "deadLetterSinkUri": {
          "description": "DeadLetterSink is a KReference that is the reference to the native, platform specific channel where failed events are sent to.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "subscriberAudience": {
          "description": "SubscriberAudience is the OIDC audience of the subscriber.",
          "type": "string"
        },
        "subscriberCACerts": {
          "description": "SubscriberCACerts is the Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468 of the receiver for this Trigger.",
          "type": "string"
        },
        "subscriberUri": {
          "description": "SubscriberURI is the resolved URI of the receiver for this Trigger.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1",
        "Kind": "TriggerStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.Auth": {
      "type": "object",
      "properties": {
        "secret": {
          "description": "Auth Secret",
          "$ref": "#/definitions/dev.knative.eventing.v1alpha1.Secret"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "Auth",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.EventPolicy": {
      "description": "EventPolicy represents a policy for addressable resources (Broker, Channel, sinks).",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of the EventPolicy.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1alpha1.EventPolicySpec"
        },
        "status": {
          "description": "Status represents the current state of the EventPolicy. This data may be out of date.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1alpha1.EventPolicyStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "EventPolicy",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.EventPolicyFromReference": {
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string",
          "default": ""
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "EventPolicyFromReference",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.EventPolicyList": {
      "description": "EventPolicyList is a collection of EventPolicy.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1alpha1.EventPolicy"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "EventPolicyList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.EventPolicySelector": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "matchLabels": {
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "EventPolicySelector",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.EventPolicySpec": {
      "type": "object",
      "properties": {
        "from": {
          "description": "From is the list of sources or oidc identities, which are allowed to send events to the targets (.spec.to).",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1alpha1.EventPolicySpecFrom"
          }
        },
        "to": {
          "description": "To lists all resources for which this policy applies. Resources in this list must act like an ingress and have an audience. The resources are part of the same namespace as the EventPolicy. An empty list means it applies to all resources in the EventPolicies namespace",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1alpha1.EventPolicySpecTo"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "EventPolicySpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.EventPolicySpecFrom": {
      "type": "object",
      "properties": {
        "ref": {
          "description": "Ref contains a direct reference to a resource which is allowed to send events to the target.",
          "$ref": "#/definitions/dev.knative.eventing.v1alpha1.EventPolicyFromReference"
        },
        "sub": {
          "description": "Sub sets the OIDC identity name to be allowed to send events to the target. It is also possible to set a glob-like pattern to match any suffix.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "EventPolicySpecFrom",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.EventPolicySpecTo": {
      "type": "object",
      "properties": {
        "ref": {
          "description": "Ref contains the direct reference to a target",
          "$ref": "#/definitions/dev.knative.eventing.v1alpha1.EventPolicyToReference"
        },
        "selector": {
          "description": "Selector contains a selector to group targets",
          "$ref": "#/definitions/dev.knative.eventing.v1alpha1.EventPolicySelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "EventPolicySpecTo",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.EventPolicyStatus": {
      "description": "EventPolicyStatus represents the current state of a EventPolicy.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "from": {
          "description": "From is the list of resolved oidc identities from .spec.from",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "EventPolicyStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.EventPolicyToReference": {
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "default": ""
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "EventPolicyToReference",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.KafkaSink": {
      "description": "KafkaSink is an addressable resource that represent a Kafka topic.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of the Kafka Sink.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1alpha1.KafkaSinkSpec"
        },
        "status": {
          "description": "Status represents the current state of the KafkaSink. This data may be out of date.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1alpha1.KafkaSinkStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "KafkaSink",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.KafkaSinkList": {
      "description": "KafkaSinkList defines a list of Kafka Sink.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1alpha1.KafkaSink"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "KafkaSinkList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.KafkaSinkSpec": {
      "description": "KafkaSinkSpec defines the desired state of the Kafka Sink.",
      "type": "object",
      "required": [
        "topic",
        "bootstrapServers"
      ],
      "properties": {
        "auth": {
          "description": "Auth configurations.",
          "$ref": "#/definitions/dev.knative.eventing.v1alpha1.Auth"
        },
        "bootstrapServers": {
          "description": "Kafka Broker bootstrap servers.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "contentMode": {
          "description": "CloudEvent content mode of Kafka messages sent to the topic. Possible values: - structured - binary\n\n- default: binary.\n\n- https://github.com/cloudevents/spec/blob/v1.0/spec.md#message\n\t - https://github.com/cloudevents/spec/blob/v1.0/kafka-protocol-binding.md#32-binary-content-mode'\n\t - https://github.com/cloudevents/spec/blob/v1.0/kafka-protocol-binding.md#33-structured-content-mode",
          "type": "string"
        },
        "numPartitions": {
          "description": "Number of topic partitions.",
          "type": "integer",
          "format": "int32"
        },
        "replicationFactor": {
          "description": "Topic replication factor",
          "type": "integer",
          "format": "int32"
        },
        "topic": {
          "description": "Topic name to send events.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "KafkaSinkSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.KafkaSinkStatus": {
      "description": "KafkaSinkStatus represents the current state of the KafkaSink.",
      "type": "object",
      "required": [
        "AddressStatus"
      ],
      "properties": {
        "AddressStatus": {
          "description": "Kafka Sink is Addressable.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.AddressStatus"
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "KafkaSinkStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.Secret": {
      "type": "object",
      "properties": {
        "ref": {
          "description": "Secret reference for SASL and SSL configurations.",
          "$ref": "#/definitions/dev.knative.eventing.v1alpha1.SecretReference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "Secret",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1alpha1.SecretReference": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Secret name.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1alpha1",
        "Kind": "SecretReference",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta1.EventType": {
      "description": "EventType represents a type of event that can be consumed from a Broker. Deprecated: use v1beta2.EventType instead.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of the EventType.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1beta1.EventTypeSpec"
        },
        "status": {
          "description": "Status represents the current state of the EventType. This data may be out of date.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1beta1.EventTypeStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "eventing.knative.dev",
        "Version": "v1beta1",
        "Kind": "EventType",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta1.EventTypeList": {
      "description": "EventTypeList is a collection of EventTypes.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1beta1.EventType"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "eventing.knative.dev",
        "Version": "v1beta1",
        "Kind": "EventTypeList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta1.EventTypeSpec": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "broker": {
          "description": "Broker refers to the Broker that can provide the EventType.",
          "type": "string"
        },
        "description": {
          "description": "Description is an optional field used to describe the EventType, in any meaningful way.",
          "type": "string"
        },
        "reference": {
          "description": "Reference is a KReference to the belonging addressable. For example, this could be a pointer to a Broker.",
          "$ref": "#/definitions/dev.knative.duck.v1.KReference"
        },
        "schema": {
          "description": "Schema is a URI, it represents the CloudEvents schemaurl extension attribute. It may be a JSON schema, a protobuf schema, etc. It is optional.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "schemaData": {
          "description": "SchemaData allows the CloudEvents schema to be stored directly in the EventType. Content is dependent on the encoding. Optional attribute. The contents are not validated or manipulated by the system.",
          "type": "string"
        },
        "source": {
          "description": "Source is a URI, it represents the CloudEvents source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "type": {
          "description": "Type represents the CloudEvents type. It is authoritative.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1beta1",
        "Kind": "EventTypeSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta1.EventTypeStatus": {
      "description": "EventTypeStatus represents the current state of a EventType.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1beta1",
        "Kind": "EventTypeStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta2.EventType": {
      "description": "EventType represents a type of event that can be consumed from a Broker.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of the EventType.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1beta2.EventTypeSpec"
        },
        "status": {
          "description": "Status represents the current state of the EventType. This data may be out of date.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1beta2.EventTypeStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "eventing.knative.dev",
        "Version": "v1beta2",
        "Kind": "EventType",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta2.EventTypeList": {
      "description": "EventTypeList is a collection of EventTypes.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1beta2.EventType"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "eventing.knative.dev",
        "Version": "v1beta2",
        "Kind": "EventTypeList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta2.EventTypeSpec": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "broker": {
          "description": "Broker refers to the Broker that can provide the EventType. Deprecated: This field is deprecated and will be removed in a future release.",
          "type": "string"
        },
        "description": {
          "description": "Description is an optional field used to describe the EventType, in any meaningful way.",
          "type": "string"
        },
        "reference": {
          "description": "Reference is a KReference to the belonging addressable. For example, this could be a pointer to a Broker.",
          "$ref": "#/definitions/dev.knative.duck.v1.KReference"
        },
        "schema": {
          "description": "Schema is a URI, it represents the CloudEvents schemaurl extension attribute. It may be a JSON schema, a protobuf schema, etc. It is optional.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "schemaData": {
          "description": "SchemaData allows the CloudEvents schema to be stored directly in the EventType. Content is dependent on the encoding. Optional attribute. The contents are not validated or manipulated by the system.",
          "type": "string"
        },
        "source": {
          "description": "Source is a URI, it represents the CloudEvents source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "type": {
          "description": "Type represents the CloudEvents type. It is authoritative.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1beta2",
        "Kind": "EventTypeSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta2.EventTypeStatus": {
      "description": "EventTypeStatus represents the current state of a EventType.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1beta2",
        "Kind": "EventTypeStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta3.EventAttributeDefinition": {
      "type": "object",
      "required": [
        "name",
        "required"
      ],
      "properties": {
        "name": {
          "description": "Name is the name of the CloudEvents attribute.",
          "type": "string",
          "default": ""
        },
        "required": {
          "description": "Required determines whether this attribute must be set on corresponding CloudEvents.",
          "type": "boolean",
          "default": false
        },
        "value": {
          "description": "Value is a string representing the allowable values for the EventType attribute. It may be a single value such as \"/apis/v1/namespaces/default/pingsource/ps\", or it could be a template for the allowed values, such as \"/apis/v1/namespaces/{namespace}/pingsource/{sourceName}. To specify a section of the string value which may change between different CloudEvents you can use curly brackets {} and optionally a variable name between them.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1beta3",
        "Kind": "EventAttributeDefinition",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta3.EventType": {
      "description": "EventType represents a type of event that can be consumed from a Broker.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of the EventType.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1beta3.EventTypeSpec"
        },
        "status": {
          "description": "Status represents the current state of the EventType. This data may be out of date.",
          "default": {},
          "$ref": "#/definitions/dev.knative.eventing.v1beta3.EventTypeStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "eventing.knative.dev",
        "Version": "v1beta3",
        "Kind": "EventType",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta3.EventTypeList": {
      "description": "EventTypeList is a collection of EventTypes.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1beta3.EventType"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "eventing.knative.dev",
        "Version": "v1beta3",
        "Kind": "EventTypeList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta3.EventTypeSpec": {
      "type": "object",
      "required": [
        "attributes"
      ],
      "properties": {
        "attributes": {
          "description": "Attributes is an array of CloudEvent attributes and extension attributes.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1beta3.EventAttributeDefinition"
          }
        },
        "description": {
          "description": "Description is an optional field used to describe the EventType, in any meaningful way.",
          "type": "string"
        },
        "reference": {
          "description": "Reference is a KReference to the belonging addressable. For example, this could be a pointer to a Broker.",
          "$ref": "#/definitions/dev.knative.duck.v1.KReference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1beta3",
        "Kind": "EventTypeSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.eventing.v1beta3.EventTypeStatus": {
      "description": "EventTypeStatus represents the current state of a EventType.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "eventing.knative.dev",
        "Version": "v1beta3",
        "Kind": "EventTypeStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.Parallel": {
      "description": "Parallel defines conditional branches that will be wired in series through Channels and Subscriptions.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of the Parallel.",
          "default": {},
          "$ref": "#/definitions/dev.knative.flows.v1.ParallelSpec"
        },
        "status": {
          "description": "Status represents the current state of the Parallel. This data may be out of date.",
          "default": {},
          "$ref": "#/definitions/dev.knative.flows.v1.ParallelStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "Parallel",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.ParallelBranch": {
      "type": "object",
      "required": [
        "subscriber"
      ],
      "properties": {
        "delivery": {
          "description": "Delivery is the delivery specification for events to the subscriber This includes things like retries, DLS, etc.",
          "$ref": "#/definitions/dev.knative.duck.v1.DeliverySpec"
        },
        "filter": {
          "description": "Filter is the expression guarding the branch",
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "reply": {
          "description": "Reply is a Reference to where the result of Subscriber of this case gets sent to. If not specified, sent the result to the Parallel Reply",
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "subscriber": {
          "description": "Subscriber receiving the event when the filter passes",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "ParallelBranch",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.ParallelBranchStatus": {
      "description": "ParallelBranchStatus represents the current state of a Parallel branch",
      "type": "object",
      "required": [
        "filterSubscriptionStatus",
        "filterChannelStatus",
        "subscriberSubscriptionStatus"
      ],
      "properties": {
        "filterChannelStatus": {
          "description": "FilterChannelStatus corresponds to the filter channel status.",
          "default": {},
          "$ref": "#/definitions/dev.knative.flows.v1.ParallelChannelStatus"
        },
        "filterSubscriptionStatus": {
          "description": "FilterSubscriptionStatus corresponds to the filter subscription status.",
          "default": {},
          "$ref": "#/definitions/dev.knative.flows.v1.ParallelSubscriptionStatus"
        },
        "subscriberSubscriptionStatus": {
          "description": "SubscriptionStatus corresponds to the subscriber subscription status.",
          "default": {},
          "$ref": "#/definitions/dev.knative.flows.v1.ParallelSubscriptionStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "ParallelBranchStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.ParallelChannelStatus": {
      "type": "object",
      "required": [
        "channel",
        "ready"
      ],
      "properties": {
        "channel": {
          "description": "Channel is the reference to the underlying channel.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "ready": {
          "description": "ReadyCondition indicates whether the Channel is ready or not.",
          "default": {},
          "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "ParallelChannelStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.ParallelList": {
      "description": "ParallelList is a collection of Parallels.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.flows.v1.Parallel"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "ParallelList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.ParallelSpec": {
      "type": "object",
      "required": [
        "branches"
      ],
      "properties": {
        "branches": {
          "description": "Branches is the list of Filter/Subscribers pairs.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.flows.v1.ParallelBranch"
          }
        },
        "channelTemplate": {
          "description": "ChannelTemplate specifies which Channel CRD to use. If left unspecified, it is set to the default Channel CRD for the namespace (or cluster, in case there are no defaults for the namespace).",
          "$ref": "#/definitions/dev.knative.messaging.v1.ChannelTemplateSpec"
        },
        "reply": {
          "description": "Reply is a Reference to where the result of a case Subscriber gets sent to when the case does not have a Reply",
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "ParallelSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.ParallelStatus": {
      "description": "ParallelStatus represents the current state of a Parallel.",
      "type": "object",
      "required": [
        "ingressChannelStatus",
        "branchStatuses"
      ],
      "properties": {
        "address": {
          "description": "Address is a single Addressable address. If Addresses is present, Address will be ignored by clients.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "addresses": {
          "description": "Addresses is a list of addresses for different protocols (HTTP and HTTPS) If Addresses is present, Address must be ignored by clients.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
          }
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth provides the relevant information for OIDC authentication.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "branchStatuses": {
          "description": "BranchStatuses is an array of corresponding to branch statuses. Matches the Spec.Branches array in the order.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.flows.v1.ParallelBranchStatus"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "ingressChannelStatus": {
          "description": "IngressChannelStatus corresponds to the ingress channel status.",
          "default": {},
          "$ref": "#/definitions/dev.knative.flows.v1.ParallelChannelStatus"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "policies": {
          "description": "Policies holds the list of applied EventPolicies",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.AppliedEventPolicyRef"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "ParallelStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.ParallelSubscriptionStatus": {
      "type": "object",
      "required": [
        "subscription",
        "ready"
      ],
      "properties": {
        "ready": {
          "description": "ReadyCondition indicates whether the Subscription is ready or not.",
          "default": {},
          "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
        },
        "subscription": {
          "description": "Subscription is the reference to the underlying Subscription.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "ParallelSubscriptionStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.Sequence": {
      "description": "Sequence defines a sequence of Subscribers that will be wired in series through Channels and Subscriptions.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of the Sequence.",
          "default": {},
          "$ref": "#/definitions/dev.knative.flows.v1.SequenceSpec"
        },
        "status": {
          "description": "Status represents the current state of the Sequence. This data may be out of date.",
          "default": {},
          "$ref": "#/definitions/dev.knative.flows.v1.SequenceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "Sequence",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.SequenceChannelStatus": {
      "type": "object",
      "required": [
        "channel",
        "ready"
      ],
      "properties": {
        "channel": {
          "description": "Channel is the reference to the underlying channel.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "ready": {
          "description": "ReadyCondition indicates whether the Channel is ready or not.",
          "default": {},
          "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "SequenceChannelStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.SequenceList": {
      "description": "SequenceList is a collection of Sequences.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.flows.v1.Sequence"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "SequenceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.SequenceSpec": {
      "type": "object",
      "required": [
        "steps"
      ],
      "properties": {
        "channelTemplate": {
          "description": "ChannelTemplate specifies which Channel CRD to use. If left unspecified, it is set to the default Channel CRD for the namespace (or cluster, in case there are no defaults for the namespace).",
          "$ref": "#/definitions/dev.knative.messaging.v1.ChannelTemplateSpec"
        },
        "reply": {
          "description": "Reply is a Reference to where the result of the last Subscriber gets sent to.",
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "steps": {
          "description": "Steps is the list of Destinations (processors / functions) that will be called in the order provided. Each step has its own delivery options",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.flows.v1.SequenceStep"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "SequenceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.SequenceStatus": {
      "description": "SequenceStatus represents the current state of a Sequence.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is the starting point to this Sequence. Sending to this will target the first subscriber. It generally has the form {channel}.{namespace}.svc.{cluster domain name}",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth provides the relevant information for OIDC authentication.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "channelStatuses": {
          "description": "ChannelStatuses is an array of corresponding Channel statuses. Matches the Spec.Steps array in the order.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.flows.v1.SequenceChannelStatus"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "policies": {
          "description": "Policies holds the list of applied EventPolicies",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.AppliedEventPolicyRef"
          }
        },
        "subscriptionStatuses": {
          "description": "SubscriptionStatuses is an array of corresponding Subscription statuses. Matches the Spec.Steps array in the order.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.flows.v1.SequenceSubscriptionStatus"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "SequenceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.SequenceStep": {
      "type": "object",
      "properties": {
        "CACerts": {
          "description": "CACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468. If set, these CAs are appended to the set of CAs provided by the Addressable target, if any.",
          "type": "string"
        },
        "audience": {
          "description": "Audience is the OIDC audience. This need only be set, if the target is not an Addressable and thus the Audience can't be received from the Addressable itself. In case the Addressable specifies an Audience too, the Destinations Audience takes preference.",
          "type": "string"
        },
        "delivery": {
          "description": "Delivery is the delivery specification for events to the subscriber This includes things like retries, DLS, etc.",
          "$ref": "#/definitions/dev.knative.duck.v1.DeliverySpec"
        },
        "ref": {
          "description": "Ref points to an Addressable.",
          "$ref": "#/definitions/dev.knative.duck.v1.KReference"
        },
        "uri": {
          "description": "URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "SequenceStep",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.flows.v1.SequenceSubscriptionStatus": {
      "type": "object",
      "required": [
        "subscription",
        "ready"
      ],
      "properties": {
        "ready": {
          "description": "ReadyCondition indicates whether the Subscription is ready or not.",
          "default": {},
          "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
        },
        "subscription": {
          "description": "Subscription is the reference to the underlying Subscription.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "flows.knative.dev",
        "Version": "v1",
        "Kind": "SequenceSubscriptionStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.autoscaling.v1alpha1.Metric": {
      "description": "Metric represents a resource to configure the metric collector with.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds the desired state of the Metric (from the client).",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.autoscaling.v1alpha1.MetricSpec"
        },
        "status": {
          "description": "Status communicates the observed state of the Metric (from the controller).",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.autoscaling.v1alpha1.MetricStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "autoscaling.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "Metric",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.autoscaling.v1alpha1.MetricList": {
      "description": "MetricList is a list of Metric resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.autoscaling.v1alpha1.Metric"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "autoscaling.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "MetricList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.autoscaling.v1alpha1.MetricSpec": {
      "description": "MetricSpec contains all values a metric collector needs to operate.",
      "type": "object",
      "required": [
        "stableWindow",
        "panicWindow",
        "scrapeTarget"
      ],
      "properties": {
        "panicWindow": {
          "description": "PanicWindow is the aggregation window for metrics where quick reactions are needed.",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "scrapeTarget": {
          "description": "ScrapeTarget is the K8s service that publishes the metric endpoint.",
          "type": "string",
          "default": ""
        },
        "stableWindow": {
          "description": "StableWindow is the aggregation window for metrics in a stable state.",
          "type": "integer",
          "format": "int64",
          "default": 0
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "autoscaling.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "MetricSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.autoscaling.v1alpha1.MetricStatus": {
      "description": "MetricStatus reflects the status of metric collection for this specific entity.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "autoscaling.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "MetricStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.autoscaling.v1alpha1.PodAutoscaler": {
      "description": "PodAutoscaler is a Knative abstraction that encapsulates the interface by which Knative components instantiate autoscalers.  This definition is an abstraction that may be backed by multiple definitions.  For more information, see the Knative Pluggability presentation: https://docs.google.com/presentation/d/19vW9HFZ6Puxt31biNZF3uLRejDmu82rxJIk1cWmxF7w/edit",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds the desired state of the PodAutoscaler (from the client).",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.autoscaling.v1alpha1.PodAutoscalerSpec"
        },
        "status": {
          "description": "Status communicates the observed state of the PodAutoscaler (from the controller).",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.autoscaling.v1alpha1.PodAutoscalerStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "autoscaling.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PodAutoscaler",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.autoscaling.v1alpha1.PodAutoscalerList": {
      "description": "PodAutoscalerList is a list of PodAutoscaler resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.autoscaling.v1alpha1.PodAutoscaler"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "autoscaling.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PodAutoscalerList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.autoscaling.v1alpha1.PodAutoscalerSpec": {
      "description": "PodAutoscalerSpec holds the desired state of the PodAutoscaler (from the client).",
      "type": "object",
      "required": [
        "scaleTargetRef",
        "protocolType"
      ],
      "properties": {
        "containerConcurrency": {
          "description": "ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container of the Revision. Defaults to `0` which means unlimited concurrency.",
          "type": "integer",
          "format": "int64"
        },
        "protocolType": {
          "description": "The application-layer protocol. Matches `ProtocolType` inferred from the revision spec.",
          "type": "string",
          "default": ""
        },
        "reachability": {
          "description": "Reachability specifies whether or not the `ScaleTargetRef` can be reached (ie. has a route). Defaults to `ReachabilityUnknown`",
          "type": "string"
        },
        "scaleTargetRef": {
          "description": "ScaleTargetRef defines the /scale-able resource that this PodAutoscaler is responsible for quickly right-sizing.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "autoscaling.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PodAutoscalerSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.autoscaling.v1alpha1.PodAutoscalerStatus": {
      "description": "PodAutoscalerStatus communicates the observed state of the PodAutoscaler (from the controller).",
      "type": "object",
      "required": [
        "serviceName",
        "metricsServiceName"
      ],
      "properties": {
        "actualScale": {
          "description": "ActualScale shows the actual number of replicas for the revision.",
          "type": "integer",
          "format": "int32"
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "desiredScale": {
          "description": "DesiredScale shows the current desired number of replicas for the revision.",
          "type": "integer",
          "format": "int32"
        },
        "metricsServiceName": {
          "description": "MetricsServiceName is the K8s Service name that provides revision metrics. The service is managed by the PA object.",
          "type": "string",
          "default": ""
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "serviceName": {
          "description": "ServiceName is the K8s Service name that serves the revision, scaled by this PA. The service is created and owned by the ServerlessService object owned by this PA.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "autoscaling.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PodAutoscalerStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.autoscaling.v1alpha1.PodScalable": {
      "description": "PodScalable is a duck type that the resources referenced by the PodAutoscaler's ScaleTargetRef must implement.  They must also implement the `/scale` sub-resource for use with `/scale` based implementations (e.g. HPA), but this further constrains the shape the referenced resources may take.",
      "type": "object",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.autoscaling.v1alpha1.PodScalableSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.autoscaling.v1alpha1.PodScalableStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "autoscaling.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PodScalable",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.autoscaling.v1alpha1.PodScalableList": {
      "description": "PodScalableList is a list of PodScalable resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.autoscaling.v1alpha1.PodScalable"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "autoscaling.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PodScalableList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.autoscaling.v1alpha1.PodScalableSpec": {
      "description": "PodScalableSpec is the specification for the desired state of a PodScalable (or at least our shared portion).",
      "type": "object",
      "required": [
        "selector",
        "template"
      ],
      "properties": {
        "replicas": {
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "template": {
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "autoscaling.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PodScalableSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.autoscaling.v1alpha1.PodScalableStatus": {
      "description": "PodScalableStatus is the observed state of a PodScalable (or at least our shared portion).",
      "type": "object",
      "properties": {
        "replicas": {
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "autoscaling.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PodScalableStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.caching.v1alpha1.Image": {
      "description": "Image is a Knative abstraction that encapsulates the interface by which Knative components express a desire to have a particular image cached.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds the desired state of the Image (from the client).",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.caching.v1alpha1.ImageSpec"
        },
        "status": {
          "description": "Status communicates the observed state of the Image (from the controller).",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.caching.v1alpha1.ImageStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "caching.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "Image",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.caching.v1alpha1.ImageList": {
      "description": "ImageList is a list of Image resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.caching.v1alpha1.Image"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "caching.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "ImageList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.caching.v1alpha1.ImageSpec": {
      "description": "ImageSpec holds the desired state of the Image (from the client).",
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "description": "Image is the name of the container image url to cache across the cluster.",
          "type": "string",
          "default": ""
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets contains the names of the Kubernetes Secrets containing login information used by the Pods which will run this container.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          }
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the Kubernetes ServiceAccount as which the Pods will run this container.  This is potentially used to authenticate the image pull if the service account has attached pull secrets.  For more information: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "caching.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "ImageSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.caching.v1alpha1.ImageStatus": {
      "description": "ImageStatus communicates the observed state of the Image (from the controller).",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "caching.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "ImageStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.Certificate": {
      "description": "Certificate is responsible for provisioning a SSL certificate for the given hosts. It is a Knative abstraction for various SSL certificate provisioning solutions (such as cert-manager or self-signed SSL certificate).",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the Certificate. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.CertificateSpec"
        },
        "status": {
          "description": "Status is the current state of the Certificate. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.CertificateStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "Certificate",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.CertificateList": {
      "description": "CertificateList is a collection of `Certificate`.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of `Certificate`.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.Certificate"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "CertificateList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.CertificateSpec": {
      "description": "CertificateSpec defines the desired state of a `Certificate`.",
      "type": "object",
      "required": [
        "dnsNames",
        "secretName"
      ],
      "properties": {
        "dnsNames": {
          "description": "DNSNames is a list of DNS names the Certificate could support. The wildcard format of DNSNames (e.g. *.default.example.com) is supported.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "domain": {
          "description": "Domain is the top level domain of the values for DNSNames.",
          "type": "string"
        },
        "secretName": {
          "description": "SecretName is the name of the secret resource to store the SSL certificate in.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "CertificateSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.CertificateStatus": {
      "description": "CertificateStatus defines the observed state of a `Certificate`.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "http01Challenges": {
          "description": "HTTP01Challenges is a list of HTTP01 challenges that need to be fulfilled in order to get the TLS certificate..",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.HTTP01Challenge"
          }
        },
        "notAfter": {
          "description": "The expiration time of the TLS certificate stored in the secret named by this resource in spec.secretName.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "CertificateStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.ClusterDomainClaim": {
      "description": "ClusterDomainClaim is a cluster-wide reservation for a particular domain name.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the ClusterDomainClaim. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.ClusterDomainClaimSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "ClusterDomainClaim",
        "Scope": "Clustered"
      }
    },
    "dev.knative.internal.networking.v1alpha1.ClusterDomainClaimList": {
      "description": "ClusterDomainClaimList is a collection of ClusterDomainClaim objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of ClusterDomainClaim objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.ClusterDomainClaim"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "ClusterDomainClaimList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.ClusterDomainClaimSpec": {
      "description": "ClusterDomainClaimSpec is the desired state of the ClusterDomainClaim. Its only field is `namespace`, which controls which namespace currently owns the ability to create a DomainMapping with the ClusterDomainClaim's name.",
      "type": "object",
      "required": [
        "namespace"
      ],
      "properties": {
        "namespace": {
          "description": "Namespace is the namespace which is allowed to create a DomainMapping using this ClusterDomainClaim's name.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "ClusterDomainClaimSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.HTTP01Challenge": {
      "description": "HTTP01Challenge defines the status of a HTTP01 challenge that a certificate needs to fulfill.",
      "type": "object",
      "properties": {
        "serviceName": {
          "description": "ServiceName is the name of the service to serve HTTP01 challenge requests.",
          "type": "string"
        },
        "serviceNamespace": {
          "description": "ServiceNamespace is the namespace of the service to serve HTTP01 challenge requests.",
          "type": "string"
        },
        "servicePort": {
          "description": "ServicePort is the port of the service to serve HTTP01 challenge requests.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        },
        "url": {
          "description": "URL is the URL that the HTTP01 challenge is expected to serve on.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "HTTP01Challenge",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.HTTPIngressPath": {
      "description": "HTTPIngressPath associates a path regex with a backend. Incoming URLs matching the path are forwarded to the backend.",
      "type": "object",
      "required": [
        "splits"
      ],
      "properties": {
        "appendHeaders": {
          "description": "AppendHeaders allow specifying additional HTTP headers to add before forwarding a request to the destination service.\n\nNOTE: This differs from K8s Ingress which doesn't allow header appending.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "headers": {
          "description": "Headers defines header matching rules which is a map from a header name to HeaderMatch which specify a matching condition. When a request matched with all the header matching rules, the request is routed by the corresponding ingress rule. If it is empty, the headers are not used for matching",
          "type": "object",
          "additionalProperties": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.HeaderMatch"
          }
        },
        "path": {
          "description": "Path represents a literal prefix to which this rule should apply. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.",
          "type": "string"
        },
        "rewriteHost": {
          "description": "RewriteHost rewrites the incoming request's host header.\n\nThis field is currently experimental and not supported by all Ingress implementations.",
          "type": "string"
        },
        "splits": {
          "description": "Splits defines the referenced service endpoints to which the traffic will be forwarded to.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.IngressBackendSplit"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "HTTPIngressPath",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.HTTPIngressRuleValue": {
      "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://\u003chost\u003e/\u003cpath\u003e?\u003csearchpart\u003e -\u003e backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
      "type": "object",
      "required": [
        "paths"
      ],
      "properties": {
        "paths": {
          "description": "A collection of paths that map requests to backends.\n\nIf they are multiple matching paths, the first match takes precedence.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.HTTPIngressPath"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "HTTPIngressRuleValue",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.HTTPRetry": {
      "description": "HTTPRetry is DEPRECATED. Retry is not used in KIngress.",
      "type": "object",
      "required": [
        "attempts",
        "perTryTimeout"
      ],
      "properties": {
        "attempts": {
          "description": "Number of retries for a given request.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "perTryTimeout": {
          "description": "Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE \u003e=1ms.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "HTTPRetry",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.HeaderMatch": {
      "description": "HeaderMatch represents a matching value of Headers in HTTPIngressPath. Currently, only the exact matching is supported.",
      "type": "object",
      "required": [
        "exact"
      ],
      "properties": {
        "exact": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "HeaderMatch",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.Ingress": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable URLs, load balance traffic, offer name based virtual hosting, etc.\n\nThis is heavily based on K8s Ingress https://godoc.org/k8s.io/api/networking/v1beta1#Ingress which some highlighted modifications.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the Ingress. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.IngressSpec"
        },
        "status": {
          "description": "Status is the current state of the Ingress. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.IngressStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "Ingress",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.IngressBackend": {
      "description": "IngressBackend describes all endpoints for a given service and port.",
      "type": "object",
      "required": [
        "serviceNamespace",
        "serviceName",
        "servicePort"
      ],
      "properties": {
        "serviceName": {
          "description": "Specifies the name of the referenced service.",
          "type": "string",
          "default": ""
        },
        "serviceNamespace": {
          "description": "Specifies the namespace of the referenced service.\n\nNOTE: This differs from K8s Ingress to allow routing to different namespaces.",
          "type": "string",
          "default": ""
        },
        "servicePort": {
          "description": "Specifies the port of the referenced service.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "IngressBackend",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.IngressBackendSplit": {
      "description": "IngressBackendSplit describes all endpoints for a given service and port.",
      "type": "object",
      "required": [
        "serviceNamespace",
        "serviceName",
        "servicePort"
      ],
      "properties": {
        "appendHeaders": {
          "description": "AppendHeaders allow specifying additional HTTP headers to add before forwarding a request to the destination service.\n\nNOTE: This differs from K8s Ingress which doesn't allow header appending.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "percent": {
          "description": "Specifies the split percentage, a number between 0 and 100.  If only one split is specified, we default to 100.\n\nNOTE: This differs from K8s Ingress to allow percentage split.",
          "type": "integer",
          "format": "int32"
        },
        "serviceName": {
          "description": "Specifies the name of the referenced service.",
          "type": "string",
          "default": ""
        },
        "serviceNamespace": {
          "description": "Specifies the namespace of the referenced service.\n\nNOTE: This differs from K8s Ingress to allow routing to different namespaces.",
          "type": "string",
          "default": ""
        },
        "servicePort": {
          "description": "Specifies the port of the referenced service.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "IngressBackendSplit",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.IngressList": {
      "description": "IngressList is a collection of Ingress objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of Ingress objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.Ingress"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "IngressList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.IngressRule": {
      "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
      "type": "object",
      "properties": {
        "hosts": {
          "description": "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently a rule value can only apply to the\n\t  IP in the Spec of the parent .\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue. If multiple matching Hosts were provided, the first rule will take precedent.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "http": {
          "description": "HTTP represents a rule to apply against incoming requests. If the rule is satisfied, the request is routed to the specified backend.",
          "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.HTTPIngressRuleValue"
        },
        "visibility": {
          "description": "Visibility signifies whether this rule should `ClusterLocal`. If it's not specified then it defaults to `ExternalIP`.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "IngressRule",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.IngressSpec": {
      "description": "IngressSpec describes the Ingress the user wishes to exist.\n\nIn general this follows the same shape as K8s Ingress. Some notable differences: - Backends now can have namespace: - Traffic can be split across multiple backends. - Timeout \u0026 Retry can be configured. - Headers can be appended.",
      "type": "object",
      "properties": {
        "httpOption": {
          "description": "HTTPOption is the option of HTTP. It has the following two values: `HTTPOptionEnabled`, `HTTPOptionRedirected`",
          "type": "string"
        },
        "rules": {
          "description": "A list of host rules used to configure the Ingress.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.IngressRule"
          }
        },
        "tls": {
          "description": "TLS configuration. Currently Ingress only supports a single TLS port: 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.IngressTLS"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "IngressSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.IngressStatus": {
      "description": "IngressStatus describe the current state of the Ingress.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "privateLoadBalancer": {
          "description": "PrivateLoadBalancer contains the current status of the load-balancer.",
          "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.LoadBalancerStatus"
        },
        "publicLoadBalancer": {
          "description": "PublicLoadBalancer contains the current status of the load-balancer.",
          "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.LoadBalancerStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "IngressStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.IngressTLS": {
      "description": "IngressTLS describes the transport layer security associated with an Ingress.",
      "type": "object",
      "properties": {
        "hosts": {
          "description": "Hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "secretName": {
          "description": "SecretName is the name of the secret used to terminate SSL traffic.",
          "type": "string"
        },
        "secretNamespace": {
          "description": "SecretNamespace is the namespace of the secret used to terminate SSL traffic. If not set the namespace should be assumed to be the same as the Ingress. If set the secret should have the same namespace as the Ingress otherwise the behaviour is undefined and not supported.",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "IngressTLS",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.LoadBalancerIngressStatus": {
      "description": "LoadBalancerIngressStatus represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
      "type": "object",
      "properties": {
        "domain": {
          "description": "Domain is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
          "type": "string"
        },
        "domainInternal": {
          "description": "DomainInternal is set if there is a cluster-local DNS name to access the Ingress.\n\nNOTE: This differs from K8s Ingress, since we also desire to have a cluster-local\n      DNS name to allow routing in case of not having a mesh.",
          "type": "string"
        },
        "ip": {
          "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
          "type": "string"
        },
        "meshOnly": {
          "description": "MeshOnly is set if the Ingress is only load-balanced through a Service mesh.",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "LoadBalancerIngressStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.LoadBalancerStatus": {
      "description": "LoadBalancerStatus represents the status of a load-balancer.",
      "type": "object",
      "properties": {
        "ingress": {
          "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.LoadBalancerIngressStatus"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "LoadBalancerStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.ServerlessService": {
      "description": "ServerlessService is a proxy for the K8s service objects containing the endpoints for the revision, whether those are endpoints of the activator or revision pods. See: https://knative.page.link/naxz for details.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the ServerlessService. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.ServerlessServiceSpec"
        },
        "status": {
          "description": "Status is the current state of the ServerlessService. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.ServerlessServiceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "ServerlessService",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.ServerlessServiceList": {
      "description": "ServerlessServiceList is a collection of ServerlessService.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of ServerlessService.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.internal.networking.v1alpha1.ServerlessService"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "ServerlessServiceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.ServerlessServiceSpec": {
      "description": "ServerlessServiceSpec describes the ServerlessService.",
      "type": "object",
      "required": [
        "objectRef",
        "protocolType"
      ],
      "properties": {
        "mode": {
          "description": "Mode describes the mode of operation of the ServerlessService.",
          "type": "string"
        },
        "numActivators": {
          "description": "NumActivators contains number of Activators that this revision should be assigned. O means — assign all.",
          "type": "integer",
          "format": "int32"
        },
        "objectRef": {
          "description": "ObjectRef defines the resource that this ServerlessService is responsible for making \"serverless\".",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "protocolType": {
          "description": "The application-layer protocol. Matches `RevisionProtocolType` set on the owning pa/revision. serving imports networking, so just use string.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "ServerlessServiceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.internal.networking.v1alpha1.ServerlessServiceStatus": {
      "description": "ServerlessServiceStatus describes the current state of the ServerlessService.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "privateServiceName": {
          "description": "PrivateServiceName holds the name of a core K8s Service resource that load balances over the user service pods backing this Revision.",
          "type": "string"
        },
        "serviceName": {
          "description": "ServiceName holds the name of a core K8s Service resource that load balances over the pods backing this Revision (activator or revision).",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "networking.internal.knative.dev",
        "Version": "v1alpha1",
        "Kind": "ServerlessServiceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.Channel": {
      "description": "Channel represents a generic Channel. It is normally used when we want a Channel, but do not need a specific Channel implementation.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of the Channel.",
          "default": {},
          "$ref": "#/definitions/dev.knative.messaging.v1.ChannelSpec"
        },
        "status": {
          "description": "Status represents the current state of the Channel. This data may be out of date.",
          "default": {},
          "$ref": "#/definitions/dev.knative.messaging.v1.ChannelStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "Channel",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.ChannelList": {
      "description": "ChannelList is a collection of Channels.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.messaging.v1.Channel"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "ChannelList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.ChannelSpec": {
      "description": "ChannelSpec defines which subscribers have expressed interest in receiving events from this Channel. It also defines the ChannelTemplate to use in order to create the CRD Channel backing this Channel.",
      "type": "object",
      "properties": {
        "channelTemplate": {
          "description": "ChannelTemplate specifies which Channel CRD to use to create the CRD Channel backing this Channel. This is immutable after creation. Normally this is set by the Channel defaulter, not directly by the user.",
          "$ref": "#/definitions/dev.knative.messaging.v1.ChannelTemplateSpec"
        },
        "delivery": {
          "description": "DeliverySpec contains the default delivery spec for each subscription to this Channelable. Each subscription delivery spec, if any, overrides this global delivery spec.",
          "$ref": "#/definitions/dev.knative.duck.v1.DeliverySpec"
        },
        "subscribers": {
          "description": "This is the list of subscriptions for this subscribable.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.SubscriberSpec"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "ChannelSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.ChannelStatus": {
      "description": "ChannelStatus represents the current state of a Channel.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is a single Addressable address. If Addresses is present, Address will be ignored by clients.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "addresses": {
          "description": "Addresses is a list of addresses for different protocols (HTTP and HTTPS) If Addresses is present, Address must be ignored by clients.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
          }
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "channel": {
          "description": "Channel is an KReference to the Channel CRD backing this Channel.",
          "$ref": "#/definitions/dev.knative.duck.v1.KReference"
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "deadLetterSinkAudience": {
          "description": "DeadLetterSinkAudience is the OIDC audience of the DeadLetterSink",
          "type": "string"
        },
        "deadLetterSinkCACerts": {
          "description": "DeadLetterSinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "deadLetterSinkUri": {
          "description": "DeadLetterSink is a KReference that is the reference to the native, platform specific channel where failed events are sent to.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "policies": {
          "description": "Policies holds the list of applied EventPolicies",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.AppliedEventPolicyRef"
          }
        },
        "subscribers": {
          "description": "This is the list of subscription's statuses for this channel.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.SubscriberStatus"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "ChannelStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.ChannelTemplateSpec": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "spec": {
          "description": "Spec defines the Spec to use for each channel created. Passed in verbatim to the Channel CRD as Spec section.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "ChannelTemplateSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.InMemoryChannel": {
      "description": "InMemoryChannel is a resource representing an in memory channel",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of the Channel.",
          "default": {},
          "$ref": "#/definitions/dev.knative.messaging.v1.InMemoryChannelSpec"
        },
        "status": {
          "description": "Status represents the current state of the Channel. This data may be out of date.",
          "default": {},
          "$ref": "#/definitions/dev.knative.messaging.v1.InMemoryChannelStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "InMemoryChannel",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.InMemoryChannelList": {
      "description": "InMemoryChannelList is a collection of in-memory channels.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.messaging.v1.InMemoryChannel"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "InMemoryChannelList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.InMemoryChannelSpec": {
      "description": "InMemoryChannelSpec defines which subscribers have expressed interest in receiving events from this InMemoryChannel. arguments for a Channel.",
      "type": "object",
      "properties": {
        "delivery": {
          "description": "DeliverySpec contains the default delivery spec for each subscription to this Channelable. Each subscription delivery spec, if any, overrides this global delivery spec.",
          "$ref": "#/definitions/dev.knative.duck.v1.DeliverySpec"
        },
        "subscribers": {
          "description": "This is the list of subscriptions for this subscribable.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.SubscriberSpec"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "InMemoryChannelSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.InMemoryChannelStatus": {
      "description": "ChannelStatus represents the current state of a Channel.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is a single Addressable address. If Addresses is present, Address will be ignored by clients.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "addresses": {
          "description": "Addresses is a list of addresses for different protocols (HTTP and HTTPS) If Addresses is present, Address must be ignored by clients.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
          }
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "deadLetterSinkAudience": {
          "description": "DeadLetterSinkAudience is the OIDC audience of the DeadLetterSink",
          "type": "string"
        },
        "deadLetterSinkCACerts": {
          "description": "DeadLetterSinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "deadLetterSinkUri": {
          "description": "DeadLetterSink is a KReference that is the reference to the native, platform specific channel where failed events are sent to.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "policies": {
          "description": "Policies holds the list of applied EventPolicies",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.AppliedEventPolicyRef"
          }
        },
        "subscribers": {
          "description": "This is the list of subscription's statuses for this channel.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.SubscriberStatus"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "InMemoryChannelStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.Subscription": {
      "description": "Subscription routes events received on a Channel to a DNS name and corresponds to the subscriptions.channels.knative.dev CRD.",
      "type": "object",
      "required": [
        "metadata",
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.messaging.v1.SubscriptionSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.messaging.v1.SubscriptionStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "Subscription",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.SubscriptionList": {
      "description": "SubscriptionList returned in list operations",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.messaging.v1.Subscription"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "SubscriptionList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.SubscriptionSpec": {
      "description": "SubscriptionSpec specifies the Channel for incoming events, a Subscriber target for processing those events and where to put the result of the processing. Only From (where the events are coming from) is always required. You can optionally only Process the events (results in no output events) by leaving out the Reply. You can also perform an identity transformation on the incoming events by leaving out the Subscriber and only specifying Reply.\n\nThe following are all valid specifications: channel --[subscriber]--\u003e reply Sink, no outgoing events: channel -- subscriber no-op function (identity transformation): channel --\u003e reply",
      "type": "object",
      "required": [
        "channel"
      ],
      "properties": {
        "channel": {
          "description": "Reference to a channel that will be used to create the subscription You can specify only the following fields of the KReference:\n  - Kind\n  - APIVersion\n  - Name\n  - Namespace\nThe resource pointed by this KReference must meet the contract to the ChannelableSpec duck type. If the resource does not meet this contract it will be reflected in the Subscription's status.\n\nThis field is immutable. We have no good answer on what happens to the events that are currently in the channel being consumed from and what the semantics there should be. For now, you can always delete the Subscription and recreate it to point to a different channel, giving the user more control over what semantics should be used (drain the channel first, possibly have events dropped, etc.)",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.KReference"
        },
        "delivery": {
          "description": "Delivery configuration",
          "$ref": "#/definitions/dev.knative.duck.v1.DeliverySpec"
        },
        "reply": {
          "description": "Reply specifies (optionally) how to handle events returned from the Subscriber target.",
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "subscriber": {
          "description": "Subscriber is reference to function for processing events. Events from the Channel will be delivered here and replies are sent to a Destination as specified by the Reply.",
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "SubscriptionSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.SubscriptionStatus": {
      "description": "SubscriptionStatus (computed) for a subscription",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth provides the relevant information for OIDC authentication.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "physicalSubscription": {
          "description": "PhysicalSubscription is the fully resolved values that this Subscription represents.",
          "default": {},
          "$ref": "#/definitions/dev.knative.messaging.v1.SubscriptionStatusPhysicalSubscription"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "SubscriptionStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1.SubscriptionStatusPhysicalSubscription": {
      "description": "SubscriptionStatusPhysicalSubscription represents the fully resolved values for this Subscription.",
      "type": "object",
      "properties": {
        "deadLetterSinkAudience": {
          "description": "DeadLetterSinkAudience is the OIDC audience of the DeadLetterSink",
          "type": "string"
        },
        "deadLetterSinkCACerts": {
          "description": "DeadLetterSinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "deadLetterSinkUri": {
          "description": "DeadLetterSink is a KReference that is the reference to the native, platform specific channel where failed events are sent to.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "replyAudience": {
          "description": "ReplyAudience is the OIDC audience for the the resolved URI for spec.reply.",
          "type": "string"
        },
        "replyCACerts": {
          "description": "ReplyCACerts is the Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468 for the resolved URI for the spec.reply.",
          "type": "string"
        },
        "replyUri": {
          "description": "ReplyURI is the fully resolved URI for the spec.reply.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "subscriberAudience": {
          "description": "SubscriberAudience is the OIDC audience for the the resolved URI for spec.subscriber.",
          "type": "string"
        },
        "subscriberCACerts": {
          "description": "SubscriberCACerts is the Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468 for the resolved URI for spec.subscriber.",
          "type": "string"
        },
        "subscriberUri": {
          "description": "SubscriberURI is the fully resolved URI for spec.subscriber.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "messaging.knative.dev",
        "Version": "v1",
        "Kind": "SubscriptionStatusPhysicalSubscription",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1beta1.KafkaChannel": {
      "description": "KafkaChannel is a resource representing a Kafka Channel.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired state of the Channel.",
          "default": {},
          "$ref": "#/definitions/dev.knative.messaging.v1beta1.KafkaChannelSpec"
        },
        "status": {
          "description": "Status represents the current state of the KafkaChannel. This data may be out of date.",
          "default": {},
          "$ref": "#/definitions/dev.knative.messaging.v1beta1.KafkaChannelStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "messaging.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaChannel",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1beta1.KafkaChannelList": {
      "description": "KafkaChannelList is a collection of KafkaChannels.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.messaging.v1beta1.KafkaChannel"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "messaging.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaChannelList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1beta1.KafkaChannelSpec": {
      "description": "KafkaChannelSpec defines the specification for a KafkaChannel.",
      "type": "object",
      "required": [
        "numPartitions",
        "replicationFactor",
        "retentionDuration"
      ],
      "properties": {
        "delivery": {
          "description": "DeliverySpec contains the default delivery spec for each subscription to this Channelable. Each subscription delivery spec, if any, overrides this global delivery spec.",
          "$ref": "#/definitions/dev.knative.duck.v1.DeliverySpec"
        },
        "numPartitions": {
          "description": "NumPartitions is the number of partitions of a Kafka topic. By default, it is set to 1.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "replicationFactor": {
          "description": "ReplicationFactor is the replication factor of a Kafka topic. By default, it is set to 1.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "retentionDuration": {
          "description": "RetentionDuration is the duration for which events will be retained in the Kafka Topic. By default, it is set to 168 hours, which is the precise form for 7 days. More information on Duration format:\n - https://www.iso.org/iso-8601-date-and-time-format.html\n - https://en.wikipedia.org/wiki/ISO_8601",
          "type": "string",
          "default": ""
        },
        "subscribers": {
          "description": "This is the list of subscriptions for this subscribable.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.SubscriberSpec"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "messaging.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaChannelSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.messaging.v1beta1.KafkaChannelStatus": {
      "description": "KafkaChannelStatus represents the current state of a KafkaChannel.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is a single Addressable address. If Addresses is present, Address will be ignored by clients.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "addresses": {
          "description": "Addresses is a list of addresses for different protocols (HTTP and HTTPS) If Addresses is present, Address must be ignored by clients.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
          }
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "deadLetterSinkAudience": {
          "description": "DeadLetterSinkAudience is the OIDC audience of the DeadLetterSink",
          "type": "string"
        },
        "deadLetterSinkCACerts": {
          "description": "DeadLetterSinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "deadLetterSinkUri": {
          "description": "DeadLetterSink is a KReference that is the reference to the native, platform specific channel where failed events are sent to.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "policies": {
          "description": "Policies holds the list of applied EventPolicies",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.AppliedEventPolicyRef"
          }
        },
        "subscribers": {
          "description": "This is the list of subscription's statuses for this channel.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.SubscriberStatus"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "messaging.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaChannelStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.pkg.apis.Condition": {
      "description": "Condition defines a readiness condition for a Knative resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).",
          "$ref": "#/definitions/dev.knative.pkg.apis.VolatileTime"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "severity": {
          "description": "Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string",
          "default": ""
        },
        "type": {
          "description": "Type of condition.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "",
        "Version": "apis",
        "Kind": "Condition",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.pkg.apis.ConditionSet": {
      "description": "ConditionSet is an abstract collection of the possible ConditionType values that a particular resource might expose.  It also holds the \"happy condition\" for that resource, which we define to be one of Ready or Succeeded depending on whether it is a Living or Batch process respectively.",
      "type": "object",
      "required": [
        "happy",
        "dependents"
      ],
      "properties": {
        "dependents": {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "happy": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "",
        "Version": "apis",
        "Kind": "ConditionSet",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.pkg.apis.FieldError": {
      "description": "FieldError is used to propagate the context of errors pertaining to specific fields in a manner suitable for use in a recursive walk, so that errors contain the appropriate field context. FieldError methods are non-mutating.",
      "type": "object",
      "required": [
        "Message",
        "Paths",
        "Level",
        "errors"
      ],
      "properties": {
        "Details": {
          "description": "Details contains an optional longer payload.",
          "type": "string",
          "default": ""
        },
        "Level": {
          "description": "Level holds the severity of the diagnostic. If empty, this defaults to ErrorLevel.",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "Message": {
          "description": "Message holds the main diagnostic message carried by this FieldError",
          "type": "string",
          "default": ""
        },
        "Paths": {
          "description": "Paths holds a list of paths to which this diagnostic pertains",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.FieldError"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "",
        "Version": "apis",
        "Kind": "FieldError",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.pkg.apis.URL": {
      "description": "URL is an alias of url.URL. It has custom json marshal methods that enable it to be used in K8s CRDs such that the CRD resource will have the URL but operator code can can work with url.URL struct",
      "type": "object",
      "required": [
        "Scheme",
        "Opaque",
        "User",
        "Host",
        "Path",
        "RawPath",
        "OmitHost",
        "ForceQuery",
        "RawQuery",
        "Fragment",
        "RawFragment"
      ],
      "properties": {
        "ForceQuery": {
          "description": "do not emit empty host (authority)",
          "type": "boolean",
          "default": false
        },
        "Fragment": {
          "description": "encoded query values, without '?'",
          "type": "string",
          "default": ""
        },
        "Host": {
          "description": "username and password information",
          "type": "string",
          "default": ""
        },
        "OmitHost": {
          "description": "encoded path hint (see EscapedPath method)",
          "type": "boolean",
          "default": false
        },
        "Opaque": {
          "type": "string",
          "default": ""
        },
        "Path": {
          "description": "host or host:port (see Hostname and Port methods)",
          "type": "string",
          "default": ""
        },
        "RawFragment": {
          "description": "fragment for references, without '#'",
          "type": "string",
          "default": ""
        },
        "RawPath": {
          "description": "path (relative paths may omit leading slash)",
          "type": "string",
          "default": ""
        },
        "RawQuery": {
          "description": "append a query ('?') even if RawQuery is empty",
          "type": "string",
          "default": ""
        },
        "Scheme": {
          "type": "string",
          "default": ""
        },
        "User": {
          "description": "encoded opaque data",
          "$ref": "#/definitions/net.url.Userinfo"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "",
        "Version": "apis",
        "Kind": "URL",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.pkg.apis.VolatileTime": {
      "description": "VolatileTime wraps metav1.Time\n\nUnlike metav1.Time, VolatileTimes are considered semantically equal when using kubernetes semantic equality checks. Thus differing VolatileTime values are not considered different. Note, go-cmp will still return inequality, see unit test if you need this behavior for go-cmp.",
      "type": "object",
      "required": [
        "Time"
      ],
      "properties": {
        "Time": {
          "type": "string",
          "format": "date-time"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "",
        "Version": "apis",
        "Kind": "VolatileTime",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.pkg.tracker.Reference": {
      "description": "Reference is modeled after corev1.ObjectReference, but omits fields unsupported by the tracker, and permits us to extend things in divergent ways.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. Mutually exclusive with Selector.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent.",
          "type": "string"
        },
        "selector": {
          "description": "Selector of the referents. Mutually exclusive with Name.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "",
        "Version": "tracker",
        "Kind": "Reference",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.Configuration": {
      "description": "Configuration represents the \"floating HEAD\" of a linear history of Revisions. Users create new Revisions by updating the Configuration's spec. The \"latest created\" revision's name is available under status, as is the \"latest ready\" revision's name. See also: https://github.com/knative/serving/blob/main/docs/spec/overview.md#configuration",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1.ConfigurationSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1.ConfigurationStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "Configuration",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.ConfigurationList": {
      "description": "ConfigurationList is a list of Configuration resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.serving.v1.Configuration"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "ConfigurationList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.ConfigurationSpec": {
      "description": "ConfigurationSpec holds the desired state of the Configuration (from the client).",
      "type": "object",
      "properties": {
        "template": {
          "description": "Template holds the latest specification for the Revision to be stamped out.",
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1.RevisionTemplateSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "ConfigurationSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.ConfigurationStatus": {
      "description": "ConfigurationStatus communicates the observed state of the Configuration (from the controller).",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "latestCreatedRevisionName": {
          "description": "LatestCreatedRevisionName is the last revision that was created from this Configuration. It might not be ready yet, for that use LatestReadyRevisionName.",
          "type": "string"
        },
        "latestReadyRevisionName": {
          "description": "LatestReadyRevisionName holds the name of the latest Revision stamped out from this Configuration that has had its \"Ready\" condition become \"True\".",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "ConfigurationStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.ConfigurationStatusFields": {
      "description": "ConfigurationStatusFields holds the fields of Configuration's status that are not generally shared.  This is defined separately and inlined so that other types can readily consume these fields via duck typing.",
      "type": "object",
      "properties": {
        "latestCreatedRevisionName": {
          "description": "LatestCreatedRevisionName is the last revision that was created from this Configuration. It might not be ready yet, for that use LatestReadyRevisionName.",
          "type": "string"
        },
        "latestReadyRevisionName": {
          "description": "LatestReadyRevisionName holds the name of the latest Revision stamped out from this Configuration that has had its \"Ready\" condition become \"True\".",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "ConfigurationStatusFields",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.ContainerStatus": {
      "description": "ContainerStatus holds the information of container name and image digest value",
      "type": "object",
      "properties": {
        "imageDigest": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "ContainerStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.Revision": {
      "description": "Revision is an immutable snapshot of code and configuration.  A revision references a container image. Revisions are created by updates to a Configuration.\n\nSee also: https://github.com/knative/serving/blob/main/docs/spec/overview.md#revision",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1.RevisionSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1.RevisionStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "Revision",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.RevisionList": {
      "description": "RevisionList is a list of Revision resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.serving.v1.Revision"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "RevisionList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.RevisionSpec": {
      "description": "RevisionSpec holds the desired state of the Revision (from the client).",
      "type": "object",
      "required": [
        "containers"
      ],
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
          "type": "integer",
          "format": "int64"
        },
        "affinity": {
          "description": "If specified, the pod's scheduling constraints",
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containerConcurrency": {
          "description": "ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container of the Revision.  Defaults to `0` which means concurrency to the application is not limited, and the system decides the target concurrency for the autoscaler.",
          "type": "integer",
          "format": "int64"
        },
        "containers": {
          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "dnsConfig": {
          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig"
        },
        "dnsPolicy": {
          "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
          "type": "string"
        },
        "enableServiceLinks": {
          "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
          "type": "boolean"
        },
        "ephemeralContainers": {
          "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostAliases": {
          "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "x-kubernetes-list-map-keys": [
            "ip"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostIPC": {
          "description": "Use the host's ipc namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "Use the host's pid namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostUsers": {
          "description": "Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.",
          "type": "boolean"
        },
        "hostname": {
          "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "idleTimeoutSeconds": {
          "description": "IdleTimeoutSeconds is the maximum duration in seconds a request will be allowed to stay open while not receiving any bytes from the user's application. If unspecified, a system default will be provided.",
          "type": "integer",
          "format": "int64"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeName": {
          "description": "NodeName indicates in which node this pod is scheduled. If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName. Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod. This field should not be used to express a desire for the pod to be scheduled on a specific node. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename",
          "type": "string"
        },
        "nodeSelector": {
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          },
          "x-kubernetes-map-type": "atomic"
        },
        "os": {
          "description": "Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.appArmorProfile - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.securityContext.supplementalGroupsPolicy - spec.containers[*].securityContext.appArmorProfile - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodOS"
        },
        "overhead": {
          "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }
        },
        "preemptionPolicy": {
          "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.",
          "type": "string"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "type": "integer",
          "format": "int32"
        },
        "priorityClassName": {
          "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "resourceClaims": {
          "description": "ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.PodResourceClaim"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        },
        "responseStartTimeoutSeconds": {
          "description": "ResponseStartTimeoutSeconds is the maximum duration in seconds that the request routing layer will wait for a request delivered to a container to begin sending any network traffic.",
          "type": "integer",
          "format": "int64"
        },
        "restartPolicy": {
          "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
          "type": "string"
        },
        "runtimeClassName": {
          "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "schedulingGates": {
          "description": "SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.\n\nSchedulingGates can only be set at pod creation time, and be removed only afterwards.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.PodSchedulingGate"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "securityContext": {
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
        },
        "serviceAccount": {
          "description": "DeprecatedServiceAccount is a deprecated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
          "type": "string"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "string"
        },
        "setHostnameAsFQDN": {
          "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.",
          "type": "boolean"
        },
        "shareProcessNamespace": {
          "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\". If not specified, the pod will not have a domainname at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
          "type": "integer",
          "format": "int64"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds is the maximum duration in seconds that the request instance is allowed to respond to a request. If unspecified, a system default will be provided.",
          "type": "integer",
          "format": "int64"
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "x-kubernetes-list-type": "atomic"
        },
        "topologySpreadConstraints": {
          "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
          },
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "RevisionSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.RevisionStatus": {
      "description": "RevisionStatus communicates the observed state of the Revision (from the controller).",
      "type": "object",
      "properties": {
        "actualReplicas": {
          "description": "ActualReplicas reflects the amount of ready pods running this revision.",
          "type": "integer",
          "format": "int32"
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "containerStatuses": {
          "description": "ContainerStatuses is a slice of images present in .Spec.Container[*].Image to their respective digests and their container name. The digests are resolved during the creation of Revision. ContainerStatuses holds the container name and image digests for both serving and non serving containers. ref: http://bit.ly/image-digests",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.serving.v1.ContainerStatus"
          }
        },
        "desiredReplicas": {
          "description": "DesiredReplicas reflects the desired amount of pods running this revision.",
          "type": "integer",
          "format": "int32"
        },
        "initContainerStatuses": {
          "description": "InitContainerStatuses is a slice of images present in .Spec.InitContainer[*].Image to their respective digests and their container name. The digests are resolved during the creation of Revision. ContainerStatuses holds the container name and image digests for both serving and non serving containers. ref: http://bit.ly/image-digests",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.serving.v1.ContainerStatus"
          }
        },
        "logUrl": {
          "description": "LogURL specifies the generated logging url for this particular revision based on the revision url template specified in the controller's config.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "RevisionStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.RevisionTemplateSpec": {
      "description": "RevisionTemplateSpec describes the data a revision should have when created from a template. Based on: https://github.com/kubernetes/api/blob/e771f807/core/v1/types.go#L3179-L3190",
      "type": "object",
      "properties": {
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1.RevisionSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "RevisionTemplateSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.Route": {
      "description": "Route is responsible for configuring ingress over a collection of Revisions. Some of the Revisions a Route distributes traffic over may be specified by referencing the Configuration responsible for creating them; in these cases the Route is additionally responsible for monitoring the Configuration for \"latest ready revision\" changes, and smoothly rolling out latest revisions. See also: https://github.com/knative/serving/blob/main/docs/spec/overview.md#route",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec holds the desired state of the Route (from the client).",
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1.RouteSpec"
        },
        "status": {
          "description": "Status communicates the observed state of the Route (from the controller).",
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1.RouteStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "Route",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.RouteList": {
      "description": "RouteList is a list of Route resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.serving.v1.Route"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "RouteList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.RouteSpec": {
      "description": "RouteSpec holds the desired state of the Route (from the client).",
      "type": "object",
      "properties": {
        "traffic": {
          "description": "Traffic specifies how to distribute traffic over a collection of revisions and configurations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.serving.v1.TrafficTarget"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "RouteSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.RouteStatus": {
      "description": "RouteStatus communicates the observed state of the Route (from the controller).",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address holds the information needed for a Route to be the target of an event.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "traffic": {
          "description": "Traffic holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.serving.v1.TrafficTarget"
          }
        },
        "url": {
          "description": "URL holds the url that will distribute traffic over the provided traffic targets. It generally has the form http[s]://{route-name}.{route-namespace}.{cluster-level-suffix}",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "RouteStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.RouteStatusFields": {
      "description": "RouteStatusFields holds the fields of Route's status that are not generally shared.  This is defined separately and inlined so that other types can readily consume these fields via duck typing.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address holds the information needed for a Route to be the target of an event.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "traffic": {
          "description": "Traffic holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.serving.v1.TrafficTarget"
          }
        },
        "url": {
          "description": "URL holds the url that will distribute traffic over the provided traffic targets. It generally has the form http[s]://{route-name}.{route-namespace}.{cluster-level-suffix}",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "RouteStatusFields",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.Service": {
      "description": "Service acts as a top-level container that manages a Route and Configuration which implement a network service. Service exists to provide a singular abstraction which can be access controlled, reasoned about, and which encapsulates software lifecycle decisions such as rollout policy and team resource ownership. Service acts only as an orchestrator of the underlying Routes and Configurations (much as a kubernetes Deployment orchestrates ReplicaSets), and its usage is optional but recommended.\n\nThe Service's controller will track the statuses of its owned Configuration and Route, reflecting their statuses and conditions as its own.\n\nSee also: https://github.com/knative/serving/blob/main/docs/spec/overview.md#service",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1.ServiceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1.ServiceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "Service",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.ServiceList": {
      "description": "ServiceList is a list of Service resources",
      "type": "object",
      "required": [
        "metadata",
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.serving.v1.Service"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "ServiceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.ServiceSpec": {
      "description": "ServiceSpec represents the configuration for the Service object. A Service's specification is the union of the specifications for a Route and Configuration.  The Service restricts what can be expressed in these fields, e.g. the Route must reference the provided Configuration; however, these limitations also enable friendlier defaulting, e.g. Route never needs a Configuration name, and may be defaulted to the appropriate \"run latest\" spec.",
      "type": "object",
      "properties": {
        "template": {
          "description": "Template holds the latest specification for the Revision to be stamped out.",
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1.RevisionTemplateSpec"
        },
        "traffic": {
          "description": "Traffic specifies how to distribute traffic over a collection of revisions and configurations.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.serving.v1.TrafficTarget"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "ServiceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.ServiceStatus": {
      "description": "ServiceStatus represents the Status stanza of the Service resource.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address holds the information needed for a Route to be the target of an event.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "latestCreatedRevisionName": {
          "description": "LatestCreatedRevisionName is the last revision that was created from this Configuration. It might not be ready yet, for that use LatestReadyRevisionName.",
          "type": "string"
        },
        "latestReadyRevisionName": {
          "description": "LatestReadyRevisionName holds the name of the latest Revision stamped out from this Configuration that has had its \"Ready\" condition become \"True\".",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "traffic": {
          "description": "Traffic holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.serving.v1.TrafficTarget"
          }
        },
        "url": {
          "description": "URL holds the url that will distribute traffic over the provided traffic targets. It generally has the form http[s]://{route-name}.{route-namespace}.{cluster-level-suffix}",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "ServiceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1.TrafficTarget": {
      "description": "TrafficTarget holds a single entry of the routing table for a Route.",
      "type": "object",
      "properties": {
        "configurationName": {
          "description": "ConfigurationName of a configuration to whose latest revision we will send this portion of traffic. When the \"status.latestReadyRevisionName\" of the referenced configuration changes, we will automatically migrate traffic from the prior \"latest ready\" revision to the new one.  This field is never set in Route's status, only its spec.  This is mutually exclusive with RevisionName.",
          "type": "string"
        },
        "latestRevision": {
          "description": "LatestRevision may be optionally provided to indicate that the latest ready Revision of the Configuration should be used for this traffic target.  When provided LatestRevision must be true if RevisionName is empty; it must be false when RevisionName is non-empty.",
          "type": "boolean"
        },
        "percent": {
          "description": "Percent indicates that percentage based routing should be used and the value indicates the percent of traffic that is be routed to this Revision or Configuration. `0` (zero) mean no traffic, `100` means all traffic. When percentage based routing is being used the follow rules apply: - the sum of all percent values must equal 100 - when not specified, the implied value for `percent` is zero for\n  that particular Revision or Configuration",
          "type": "integer",
          "format": "int64"
        },
        "revisionName": {
          "description": "RevisionName of a specific revision to which to send this portion of traffic.  This is mutually exclusive with ConfigurationName.",
          "type": "string"
        },
        "tag": {
          "description": "Tag is optionally used to expose a dedicated url for referencing this target exclusively.",
          "type": "string"
        },
        "url": {
          "description": "URL displays the URL for accessing named traffic targets. URL is displayed in status, and is disallowed on spec. URL must contain a scheme (e.g. http://) and a hostname, but may not contain anything else (e.g. basic auth, url path, etc.)",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1",
        "Kind": "TrafficTarget",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1alpha1.CannotConvertError": {
      "description": "CannotConvertError is returned when a field cannot be converted.",
      "type": "object",
      "required": [
        "Message",
        "Field"
      ],
      "properties": {
        "Field": {
          "type": "string",
          "default": ""
        },
        "Message": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1alpha1",
        "Kind": "CannotConvertError",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1beta1.CannotConvertError": {
      "description": "CannotConvertError is returned when a field cannot be converted.",
      "type": "object",
      "required": [
        "Message",
        "Field"
      ],
      "properties": {
        "Field": {
          "type": "string",
          "default": ""
        },
        "Message": {
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1beta1",
        "Kind": "CannotConvertError",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1beta1.DomainMapping": {
      "description": "DomainMapping is a mapping from a custom hostname to an Addressable.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec is the desired state of the DomainMapping. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1beta1.DomainMappingSpec"
        },
        "status": {
          "description": "Status is the current state of the DomainMapping. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/dev.knative.serving.v1beta1.DomainMappingStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "serving.knative.dev",
        "Version": "v1beta1",
        "Kind": "DomainMapping",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1beta1.DomainMappingList": {
      "description": "DomainMappingList is a collection of DomainMapping objects.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "Items is the list of DomainMapping objects.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.serving.v1beta1.DomainMapping"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "serving.knative.dev",
        "Version": "v1beta1",
        "Kind": "DomainMappingList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1beta1.DomainMappingSpec": {
      "description": "DomainMappingSpec describes the DomainMapping the user wishes to exist.",
      "type": "object",
      "required": [
        "ref"
      ],
      "properties": {
        "ref": {
          "description": "Ref specifies the target of the Domain Mapping.\n\nThe object identified by the Ref must be an Addressable with a URL of the form `{name}.{namespace}.{domain}` where `{domain}` is the cluster domain, and `{name}` and `{namespace}` are the name and namespace of a Kubernetes Service.\n\nThis contract is satisfied by Knative types such as Knative Services and Knative Routes, and by Kubernetes Services.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.KReference"
        },
        "tls": {
          "description": "TLS allows the DomainMapping to terminate TLS traffic with an existing secret.",
          "$ref": "#/definitions/dev.knative.serving.v1beta1.SecretTLS"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1beta1",
        "Kind": "DomainMappingSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1beta1.DomainMappingStatus": {
      "description": "DomainMappingStatus describes the current state of the DomainMapping.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address holds the information needed for a DomainMapping to be the target of an event.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "description": "URL is the URL of this DomainMapping.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1beta1",
        "Kind": "DomainMappingStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.serving.v1beta1.SecretTLS": {
      "description": "SecretTLS wrapper for TLS SecretName.",
      "type": "object",
      "required": [
        "secretName"
      ],
      "properties": {
        "secretName": {
          "description": "SecretName is the name of the existing secret used to terminate TLS traffic.",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "serving.knative.dev",
        "Version": "v1beta1",
        "Kind": "SecretTLS",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sinks.v1alpha1.JobSink": {
      "description": "JobSink is the Schema for the JobSink API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sinks.v1alpha1.JobSinkSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sinks.v1alpha1.JobSinkStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "sinks.knative.dev",
        "Version": "v1alpha1",
        "Kind": "JobSink",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sinks.v1alpha1.JobSinkList": {
      "description": "JobSinkList contains a list of JobSink.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sinks.v1alpha1.JobSink"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "sinks.knative.dev",
        "Version": "v1alpha1",
        "Kind": "JobSinkList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sinks.v1alpha1.JobSinkSpec": {
      "description": "JobSinkSpec defines the desired state of the JobSink.",
      "type": "object",
      "properties": {
        "job": {
          "description": "Job to run when an event occur.",
          "$ref": "#/definitions/io.k8s.api.batch.v1.Job"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sinks.knative.dev",
        "Version": "v1alpha1",
        "Kind": "JobSinkSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sinks.v1alpha1.JobSinkStatus": {
      "description": "JobSinkStatus defines the observed state of JobSink.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is a single Addressable address. If Addresses is present, Address will be ignored by clients.",
          "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
        },
        "addresses": {
          "description": "Addresses is a list of addresses for different protocols (HTTP and HTTPS) If Addresses is present, Address must be ignored by clients.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.Addressable"
          }
        },
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "job": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sinks.v1alpha1.JobStatus"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "policies": {
          "description": "Policies holds the list of applied EventPolicies",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.AppliedEventPolicyRef"
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sinks.knative.dev",
        "Version": "v1alpha1",
        "Kind": "JobSinkStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sinks.v1alpha1.JobStatus": {
      "type": "object",
      "properties": {
        "selector": {
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sinks.knative.dev",
        "Version": "v1alpha1",
        "Kind": "JobStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.APIVersionKind": {
      "description": "APIVersionKind is an APIVersion and Kind tuple.",
      "type": "object",
      "required": [
        "apiVersion",
        "kind"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion - the API version of the resource to watch.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind of the resource to watch. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "default": ""
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "APIVersionKind",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.APIVersionKindSelector": {
      "description": "APIVersionKindSelector is an APIVersion Kind tuple with a LabelSelector.",
      "type": "object",
      "required": [
        "apiVersion",
        "kind"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion - the API version of the resource to watch.",
          "type": "string",
          "default": ""
        },
        "kind": {
          "description": "Kind of the resource to watch. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "default": ""
        },
        "selector": {
          "description": "LabelSelector filters this source to objects to those resources pass the label selector. More info: http://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "APIVersionKindSelector",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.ApiServerSource": {
      "description": "ApiServerSource is the Schema for the apiserversources API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1.ApiServerSourceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1.ApiServerSourceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "ApiServerSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.ApiServerSourceList": {
      "description": "ApiServerSourceList contains a list of ApiServerSource",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sources.v1.ApiServerSource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "ApiServerSourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.ApiServerSourceSpec": {
      "description": "ApiServerSourceSpec defines the desired state of ApiServerSource",
      "type": "object",
      "required": [
        "resources"
      ],
      "properties": {
        "ceOverrides": {
          "description": "CloudEventOverrides defines overrides to control the output format and modifications of the event sent to the sink.",
          "$ref": "#/definitions/dev.knative.duck.v1.CloudEventOverrides"
        },
        "filters": {
          "description": "Filters is an experimental field that conforms to the CNCF CloudEvents Subscriptions API. It's an array of filter expressions that evaluate to true or false. If any filter expression in the array evaluates to false, the event MUST NOT be sent to the Sink. If all the filter expressions in the array evaluate to true, the event MUST be attempted to be delivered. Absence of a filter or empty array implies a value of true.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.eventing.v1.SubscriptionsAPIFilter"
          }
        },
        "mode": {
          "description": "EventMode controls the format of the event. `Reference` sends a dataref event type for the resource under watch. `Resource` send the full resource lifecycle event. Defaults to `Reference`",
          "type": "string"
        },
        "namespaceSelector": {
          "description": "NamespaceSelector is a label selector to capture the namespaces that should be watched by the source.",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        },
        "owner": {
          "description": "ResourceOwner is an additional filter to only track resources that are owned by a specific resource type. If ResourceOwner matches Resources[n] then Resources[n] is allowed to pass the ResourceOwner filter.",
          "$ref": "#/definitions/dev.knative.sources.v1.APIVersionKind"
        },
        "resources": {
          "description": "Resource are the resources this source will track and send related lifecycle events from the Kubernetes ApiServer, with an optional label selector to help filter.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sources.v1.APIVersionKindSelector"
          }
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run this source. Defaults to default if not set.",
          "type": "string"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a uri to use as the sink.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "ApiServerSourceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.ApiServerSourceStatus": {
      "description": "ApiServerSourceStatus defines the observed state of ApiServerSource",
      "type": "object",
      "required": [
        "namespaces"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "namespaces": {
          "description": "Namespaces show the namespaces currently watched by the ApiServerSource",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "ApiServerSourceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.ContainerSource": {
      "description": "ContainerSource is the Schema for the containersources API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1.ContainerSourceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1.ContainerSourceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "ContainerSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.ContainerSourceList": {
      "description": "ContainerSourceList contains a list of ContainerSource",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sources.v1.ContainerSource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "ContainerSourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.ContainerSourceSpec": {
      "description": "ContainerSourceSpec defines the desired state of ContainerSource",
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "ceOverrides": {
          "description": "CloudEventOverrides defines overrides to control the output format and modifications of the event sent to the sink.",
          "$ref": "#/definitions/dev.knative.duck.v1.CloudEventOverrides"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a uri to use as the sink.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "template": {
          "description": "Template describes the pods that will be created",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "ContainerSourceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.ContainerSourceStatus": {
      "description": "ContainerSourceStatus defines the observed state of ContainerSource",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "ContainerSourceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.PingSource": {
      "description": "PingSource is the Schema for the PingSources API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1.PingSourceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1.PingSourceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "PingSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.PingSourceList": {
      "description": "PingSourceList contains a list of PingSources.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sources.v1.PingSource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "PingSourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.PingSourceSpec": {
      "description": "PingSourceSpec defines the desired state of the PingSource.",
      "type": "object",
      "properties": {
        "ceOverrides": {
          "description": "CloudEventOverrides defines overrides to control the output format and modifications of the event sent to the sink.",
          "$ref": "#/definitions/dev.knative.duck.v1.CloudEventOverrides"
        },
        "contentType": {
          "description": "ContentType is the media type of Data or DataBase64. Default is empty.",
          "type": "string"
        },
        "data": {
          "description": "Data is data used as the body of the event posted to the sink. Default is empty. Mutually exclusive with DataBase64.",
          "type": "string"
        },
        "dataBase64": {
          "description": "DataBase64 is the base64-encoded string of the actual event's body posted to the sink. Default is empty. Mutually exclusive with Data.",
          "type": "string"
        },
        "schedule": {
          "description": "Schedule is the cron schedule. Defaults to `* * * * *`.",
          "type": "string"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a uri to use as the sink.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "timezone": {
          "description": "Timezone modifies the actual time relative to the specified timezone. Defaults to the system time zone. More general information about time zones: https://www.iana.org/time-zones List of valid timezone values: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "PingSourceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.PingSourceStatus": {
      "description": "PingSourceStatus defines the observed state of PingSource.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "PingSourceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.SinkBinding": {
      "description": "SinkBinding describes a Binding that is also a Source. The `sink` (from the Source duck) is resolved to a URL and then projected into the `subject` by augmenting the runtime contract of the referenced containers to have a `K_SINK` environment variable holding the endpoint to which to send cloud events.",
      "type": "object",
      "required": [
        "spec",
        "status"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1.SinkBindingSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1.SinkBindingStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "SinkBinding",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.SinkBindingList": {
      "description": "SinkBindingList contains a list of SinkBinding",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sources.v1.SinkBinding"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "SinkBindingList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.SinkBindingSpec": {
      "description": "SinkBindingSpec holds the desired state of the SinkBinding (from the client).",
      "type": "object",
      "required": [
        "subject"
      ],
      "properties": {
        "ceOverrides": {
          "description": "CloudEventOverrides defines overrides to control the output format and modifications of the event sent to the sink.",
          "$ref": "#/definitions/dev.knative.duck.v1.CloudEventOverrides"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a uri to use as the sink.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "subject": {
          "description": "Subject references the resource(s) whose \"runtime contract\" should be augmented by Binding implementations.",
          "default": {},
          "$ref": "#/definitions/dev.knative.pkg.tracker.Reference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "SinkBindingSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1.SinkBindingStatus": {
      "description": "SinkBindingStatus communicates the observed state of the SinkBinding (from the controller).",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "oidcTokenSecretName": {
          "description": "OIDCTokenSecretName is the name of the secret containing the token for this SinkBindings OIDC authentication",
          "type": "string"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1",
        "Kind": "SinkBindingStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.AwsSqsSource": {
      "description": "AwsSqsSource is the Schema for the AWS SQS API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.AwsSqsSourceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.AwsSqsSourceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "AwsSqsSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.AwsSqsSourceList": {
      "description": "AwsSqsSourceList contains a list of AwsSqsSource",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sources.v1alpha1.AwsSqsSource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "AwsSqsSourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.AwsSqsSourceSpec": {
      "description": "AwsSqsSourceSpec defines the desired state of the source.",
      "type": "object",
      "required": [
        "queueUrl"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations to add to the pod, mostly used for Kube2IAM role",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "awsCredsSecret": {
          "description": "AwsCredsSecret is the credential to use to poll the AWS SQS",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        },
        "queueUrl": {
          "description": "QueueURL of the SQS queue that we will poll from.",
          "type": "string",
          "default": ""
        },
        "serviceAccountName": {
          "description": "ServiceAccoutName is the name of the ServiceAccount that will be used to run the Receive Adapter Deployment.",
          "type": "string"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a domain name to use as the sink.  This is where events will be received.",
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "AwsSqsSourceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.AwsSqsSourceStatus": {
      "description": "AwsSqsSourceStatus defines the observed state of the source.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "AwsSqsSourceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.CouchDbSource": {
      "description": "CouchDbSource is the Schema for the githubsources API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.CouchDbSourceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.CouchDbSourceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "CouchDbSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.CouchDbSourceList": {
      "description": "CouchDbSourceList contains a list of CouchDbSource",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sources.v1alpha1.CouchDbSource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "CouchDbSourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.CouchDbSourceSpec": {
      "description": "CouchDbSourceSpec defines the desired state of CouchDbSource",
      "type": "object",
      "required": [
        "feed",
        "database"
      ],
      "properties": {
        "credentials": {
          "description": "CouchDbCredentials is the credential to use to access CouchDb. Must be a secret. Only Name and Namespace are used.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        },
        "database": {
          "description": "Database is the database to watch for changes",
          "type": "string",
          "default": ""
        },
        "feed": {
          "description": "Feed changes how CouchDB sends the response. More information: https://docs.couchdb.org/en/stable/api/database/changes.html#changes-feeds",
          "type": "string",
          "default": ""
        },
        "serviceAccountName": {
          "description": "ServiceAccountName holds the name of the Kubernetes service account as which the underlying K8s resources should be run. If unspecified this will default to the \"default\" service account for the namespace in which the CouchDbSource exists.",
          "type": "string"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a domain name to use as the sink.",
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "CouchDbSourceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.CouchDbSourceStatus": {
      "description": "CouchDbSourceStatus defines the observed state of CouchDbSource",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "CouchDbSourceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.GitHubSource": {
      "description": "GitHubSource is the Schema for the githubsources API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.GitHubSourceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.GitHubSourceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitHubSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.GitHubSourceList": {
      "description": "GitHubSourceList contains a list of GitHubSource",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sources.v1alpha1.GitHubSource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitHubSourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.GitHubSourceSpec": {
      "description": "GitHubSourceSpec defines the desired state of GitHubSource",
      "type": "object",
      "required": [
        "ownerAndRepository",
        "eventTypes",
        "accessToken",
        "secretToken"
      ],
      "properties": {
        "accessToken": {
          "description": "AccessToken is the Kubernetes secret containing the GitHub access token",
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.SecretValueFromSource"
        },
        "ceOverrides": {
          "description": "CloudEventOverrides defines overrides to control the output format and modifications of the event sent to the sink.",
          "$ref": "#/definitions/dev.knative.duck.v1.CloudEventOverrides"
        },
        "eventTypes": {
          "description": "EventType is the type of event to receive from GitHub. These correspond to the \"Webhook event name\" values listed at https://developer.github.com/v3/activity/events/types/ - ie \"pull_request\"",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "githubAPIURL": {
          "description": "API URL if using github enterprise (default https://api.github.com)",
          "type": "string"
        },
        "ownerAndRepository": {
          "description": "OwnerAndRepository is the GitHub owner/org and repository to receive events from. The repository may be left off to receive events from an entire organization. Examples:\n myuser/project\n myorganization",
          "type": "string",
          "default": ""
        },
        "secretToken": {
          "description": "SecretToken is the Kubernetes secret containing the GitHub secret token",
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.SecretValueFromSource"
        },
        "secure": {
          "description": "Secure can be set to true to configure the webhook to use https, or false to use http.  Omitting it relies on the scheme of the Knative Service created (e.g. if auto-TLS is enabled it should do the right thing).",
          "type": "boolean"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName holds the name of the Kubernetes service account as which the underlying K8s resources should be run. If unspecified this will default to the \"default\" service account for the namespace in which the GitHubSource exists.",
          "type": "string"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a uri to use as the sink.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitHubSourceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.GitHubSourceStatus": {
      "description": "GitHubSourceStatus defines the observed state of GitHubSource",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "webhookIDKey": {
          "description": "WebhookIDKey is the ID of the webhook registered with GitHub",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitHubSourceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.GitLabSource": {
      "description": "GitLabSource is the Schema for the gitlabsources API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.GitLabSourceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.GitLabSourceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitLabSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.GitLabSourceList": {
      "description": "GitLabSourceList contains a list of GitLabSource.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sources.v1alpha1.GitLabSource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitLabSourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.GitLabSourceSpec": {
      "description": "GitLabSourceSpec defines the desired state of GitLabSource",
      "type": "object",
      "required": [
        "projectUrl",
        "eventTypes",
        "accessToken",
        "secretToken"
      ],
      "properties": {
        "accessToken": {
          "description": "AccessToken is the Kubernetes secret containing the GitLab access token",
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.SecretValueFromSource"
        },
        "ceOverrides": {
          "description": "CloudEventOverrides defines overrides to control the output format and modifications of the event sent to the sink.",
          "$ref": "#/definitions/dev.knative.duck.v1.CloudEventOverrides"
        },
        "eventTypes": {
          "description": "List of webhooks to enable on the selected GitLab project. Those correspond to the attributes enumerated at https://docs.gitlab.com/ee/api/projects.html#add-project-hook",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "projectUrl": {
          "description": "ProjectURL is the url of the GitLab project for which we are interested to receive events from. Examples:\n  https://gitlab.com/gitlab-org/gitlab-foss",
          "type": "string",
          "default": ""
        },
        "secretToken": {
          "description": "SecretToken is the Kubernetes secret containing the GitLab secret token",
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.SecretValueFromSource"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName holds the name of the Kubernetes service account as which the underlying K8s resources should be run. If unspecified this will default to the \"default\" service account for the namespace in which the GitLabSource exists.",
          "type": "string"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a uri to use as the sink.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "sslverify": {
          "description": "SSLVerify if true configure webhook so the ssl verification is done when triggering the hook",
          "type": "boolean"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitLabSourceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.GitLabSourceStatus": {
      "description": "GitLabSourceStatus defines the observed state of GitLabSource",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        },
        "webhookID": {
          "description": "WebhookID of the project hook registered with GitLab",
          "type": "integer",
          "format": "int32"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "GitLabSourceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.PrometheusSource": {
      "description": "PrometheusSource is the Schema for the prometheussources API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.PrometheusSourceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1alpha1.PrometheusSourceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PrometheusSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.PrometheusSourceList": {
      "description": "PrometheusSourceList contains a list of PrometheusSource",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sources.v1alpha1.PrometheusSource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PrometheusSourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.PrometheusSourceSpec": {
      "description": "PrometheusSourceSpec defines the desired state of PrometheusSource",
      "type": "object",
      "required": [
        "serverURL",
        "promQL",
        "schedule"
      ],
      "properties": {
        "authTokenFile": {
          "description": "The name of the file containing the authenication token",
          "type": "string"
        },
        "caCertConfigMap": {
          "description": "The name of the config map containing the CA certificate of the Prometheus service's signer.",
          "type": "string"
        },
        "promQL": {
          "description": "PromQL is the Prometheus query for this source",
          "type": "string",
          "default": ""
        },
        "schedule": {
          "description": "A crontab-formatted schedule for running the PromQL query",
          "type": "string",
          "default": ""
        },
        "serverURL": {
          "description": "ServerURL is the URL of the Prometheus server",
          "type": "string",
          "default": ""
        },
        "serviceAccountName": {
          "description": "ServiceAccountName holds the name of the Kubernetes service account as which the underlying K8s resources should be run. If unspecified this will default to the \"default\" service account for the namespace in which the PrometheusSource exists.",
          "type": "string"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a host name to use as the sink.",
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "step": {
          "description": "Query resolution step width in duration format or float number of seconds. Prometheus duration strings are of the form [0-9]+[smhdwy].",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PrometheusSourceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.PrometheusSourceStatus": {
      "description": "PrometheusSourceStatus defines the observed state of PrometheusSource",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "PrometheusSourceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1alpha1.SecretValueFromSource": {
      "description": "SecretValueFromSource represents the source of a secret value",
      "type": "object",
      "properties": {
        "secretKeyRef": {
          "description": "The Secret key to select from.",
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1alpha1",
        "Kind": "SecretValueFromSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1beta1.KafkaSource": {
      "description": "KafkaSource is the Schema for the kafkasources API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1beta1.KafkaSourceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1beta1.KafkaSourceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "sources.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1beta1.KafkaSourceList": {
      "description": "KafkaSourceList contains a list of KafkaSources.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sources.v1beta1.KafkaSource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "sources.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaSourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1beta1.KafkaSourceSpec": {
      "description": "KafkaSourceSpec defines the desired state of the KafkaSource.",
      "type": "object",
      "required": [
        "bootstrapServers",
        "topics"
      ],
      "properties": {
        "bootstrapServers": {
          "description": "Bootstrap servers are the Kafka servers the consumer will connect to.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        },
        "ceOverrides": {
          "description": "CloudEventOverrides defines overrides to control the output format and modifications of the event sent to the sink.",
          "$ref": "#/definitions/dev.knative.duck.v1.CloudEventOverrides"
        },
        "consumerGroup": {
          "description": "ConsumerGroupID is the consumer group ID.",
          "type": "string"
        },
        "consumers": {
          "description": "Number of desired consumers running in the consumer group. Defaults to 1.\n\nThis is a pointer to distinguish between explicit zero and not specified.",
          "type": "integer",
          "format": "int32"
        },
        "delivery": {
          "description": "Delivery contains the delivery spec for this source",
          "$ref": "#/definitions/dev.knative.duck.v1.DeliverySpec"
        },
        "initialOffset": {
          "description": "InitialOffset is the Initial Offset for the consumer group. should be earliest or latest",
          "type": "string"
        },
        "net": {
          "default": {},
          "$ref": "#/definitions/dev.knative.bindings.v1beta1.KafkaNetSpec"
        },
        "ordering": {
          "description": "Ordering is the type of the consumer verticle. Should be ordered or unordered. By default, it is ordered.",
          "type": "string"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a uri to use as the sink.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "topics": {
          "description": "Topic topics to consume messages from",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaSourceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1beta1.KafkaSourceStatus": {
      "description": "KafkaSourceStatus defines the observed state of KafkaSource.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "claims": {
          "description": "Claims consumed by this KafkaSource instance",
          "type": "string"
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "consumers": {
          "description": "Total number of consumers actually running in the consumer group.",
          "type": "integer",
          "format": "int32"
        },
        "maxAllowedVReplicas": {
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "placements": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1alpha1.Placement"
          }
        },
        "selector": {
          "description": "Use for labelSelectorPath when scaling Kafka source",
          "type": "string"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1beta1",
        "Kind": "KafkaSourceStatus",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1beta2.PingSource": {
      "description": "PingSource is the Schema for the PingSources API.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1beta2.PingSourceSpec"
        },
        "status": {
          "default": {},
          "$ref": "#/definitions/dev.knative.sources.v1beta2.PingSourceStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "sources.knative.dev",
        "Version": "v1beta2",
        "Kind": "PingSource",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1beta2.PingSourceList": {
      "description": "PingSourceList contains a list of PingSources.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.sources.v1beta2.PingSource"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "list",
        "Group": "sources.knative.dev",
        "Version": "v1beta2",
        "Kind": "PingSourceList",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1beta2.PingSourceSpec": {
      "description": "PingSourceSpec defines the desired state of the PingSource.",
      "type": "object",
      "properties": {
        "ceOverrides": {
          "description": "CloudEventOverrides defines overrides to control the output format and modifications of the event sent to the sink.",
          "$ref": "#/definitions/dev.knative.duck.v1.CloudEventOverrides"
        },
        "contentType": {
          "description": "ContentType is the media type of Data or DataBase64. Default is empty.",
          "type": "string"
        },
        "data": {
          "description": "Data is data used as the body of the event posted to the sink. Default is empty. Mutually exclusive with DataBase64.",
          "type": "string"
        },
        "dataBase64": {
          "description": "DataBase64 is the base64-encoded string of the actual event's body posted to the sink. Default is empty. Mutually exclusive with Data.",
          "type": "string"
        },
        "schedule": {
          "description": "Schedule is the cron schedule. Defaults to `* * * * *`.",
          "type": "string"
        },
        "sink": {
          "description": "Sink is a reference to an object that will resolve to a uri to use as the sink.",
          "default": {},
          "$ref": "#/definitions/dev.knative.duck.v1.Destination"
        },
        "timezone": {
          "description": "Timezone modifies the actual time relative to the specified timezone. Defaults to the system time zone. More general information about time zones: https://www.iana.org/time-zones List of valid timezone values: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
          "type": "string"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1beta2",
        "Kind": "PingSourceSpec",
        "Scope": "Namespaced"
      }
    },
    "dev.knative.sources.v1beta2.PingSourceStatus": {
      "description": "PingSourceStatus defines the observed state of PingSource.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "auth": {
          "description": "Auth defines the attributes that provide the generated service account name in the resource status.",
          "$ref": "#/definitions/dev.knative.duck.v1.AuthStatus"
        },
        "ceAttributes": {
          "description": "CloudEventAttributes are the specific attributes that the Source uses as part of its CloudEvents.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.duck.v1.CloudEventAttributes"
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/dev.knative.pkg.apis.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "sinkAudience": {
          "description": "SinkAudience is the OIDC audience of the sink.",
          "type": "string"
        },
        "sinkCACerts": {
          "description": "SinkCACerts are Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.",
          "type": "string"
        },
        "sinkUri": {
          "description": "SinkURI is the current active sink URI that has been configured for the Source.",
          "$ref": "#/definitions/dev.knative.pkg.apis.URL"
        }
      },
      "x-fabric8-info": {
        "Type": "nested",
        "Group": "sources.knative.dev",
        "Version": "v1beta2",
        "Kind": "PingSourceStatus",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.apps.v1.Deployment": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the Deployment.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec"
        },
        "status": {
          "description": "Most recently observed status of the Deployment.",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Deployment",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.batch.v1.Job": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec"
        },
        "status": {
          "description": "Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "default": {},
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobStatus"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Job",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.ConfigMap": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "binaryData": {
          "description": "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "data": {
          "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "default": ""
          }
        },
        "immutable": {
          "description": "Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "ConfigMap",
        "Scope": "Namespaced"
      }
    },
    "io.k8s.api.core.v1.Endpoints": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "default": {},
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "subsets": {
          "description": "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.",
          "type": "array",
          "items": {
            "default": {},
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointSubset"
          },
          "x-kubernetes-list-type": "atomic"
        }
      },
      "x-fabric8-info": {
        "Type": "object",
        "Group": "",
        "Version": "v1",
        "Kind": "Endpoints",
        "Scope": "Namespaced"
      }
    }
  }
}