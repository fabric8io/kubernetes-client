#*
 * Copyright (C) 2015 Fabric8 Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *#
/**
 * Copyright (C) 2015 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#set ($version = "unknown")
#set ($group = "")
#set ($annotations = $model.annotations)
#foreach ($annotation in $annotations)
#if ($annotation.getClassRef().getName().equals("ApiVersion"))
    #set ($apiGroupVersion = $annotation.getParameters().get("value"))
  #end
  #if ($annotation.getClassRef().getName().equals("ApiGroup"))
    #set ($apiGroupName = $annotation.getParameters().get("value"))
  #end
#end


package io.fabric8.openshift.client.dsl.internal;

import io.fabric8.openshift.client.OpenShiftConfig;
import io.fabric8.kubernetes.client.dsl.Resource;
import io.fabric8.kubernetes.client.dsl.base.HasMetadataOperation;
import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;
import io.fabric8.kubernetes.client.utils.ApiVersionUtil;
import io.fabric8.kubernetes.client.dsl.base.OperationContext;
import io.fabric8.openshift.client.OpenShiftConfig;

import okhttp3.OkHttpClient;

import ${model.packageName}.Doneable${model.name};
import ${model.packageName}.${model.name};
import ${model.packageName}.${model.name}List;
import ${model.packageName}.Doneable${model.name};

import java.util.Map;
import java.util.TreeMap;


public class ${model.name}OperationsImpl extends OpenShiftOperation<${model.name}, ${model.name}List, Doneable${model.name}, Resource<${model.name}, Doneable${model.name}>> {

  public ${model.name}OperationsImpl(OkHttpClient client, OpenShiftConfig config) {
    this(new OperationContext().withOkhttpClient(client).withConfig(config));
  }

  public ${model.name}OperationsImpl(OperationContext context) {
    super(context.withApiGroupName("$apiGroupName")
    .withApiGroupVersion("$apiGroupVersion")
    .withPlural("#pluralize ($model.name.toLowerCase())"));
    this.type = ${model.name}.class;
    this.listType = ${model.name}List.class;
    this.doneableType = Doneable${model.name}.class;
  }

  public ${model.name}OperationsImpl newInstance(OperationContext context) {
    return new ${model.name}OperationsImpl(context);
  }
}
